(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{559:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"spring中的推断构造方法的底层原理分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring中的推断构造方法的底层原理分析"}},[t._v("#")]),t._v(" "),s("strong",[t._v("Spring中的推断构造方法的底层原理分析")])]),t._v(" "),s("p",[t._v("Spring中的一个bean，需要实例化得到一个对象，而实例化就需要用到构造方法。")]),t._v(" "),s("p",[t._v("一般情况下，一个类只有一个构造方法：")]),t._v(" "),s("ol",[s("li",[t._v("要么是无参的构造方法")]),t._v(" "),s("li",[t._v("要么是有参的构造方法")])]),t._v(" "),s("p",[t._v("如果只有"),s("strong",[t._v("一个无参")]),t._v("的构造方法，那么实例化就只能使用这个构造方法了。")]),t._v(" "),s("p",[t._v("如果只有"),s("strong",[t._v("一个有参")]),t._v("的构造方法，那么实例化时能使用这个构造方法吗？要分情况讨论：")]),t._v(" "),s("ol",[s("li",[t._v("使用AnnotationConfigApplicationContext，会使用这个构造方法进行实例化，那么Spring会根据构造方法的参数信息去寻找bean，然后传给构造方法")]),t._v(" "),s("li",[t._v("使用ClassPathXmlApplicationContext，表示使用XML的方式来使用bean，要么在XML中指定构造方法的参数值(手动指定)，要么配置"),s("strong",[t._v("autowire=constructor")]),t._v("让Spring"),s("strong",[t._v("自动")]),t._v("去寻找bean做为构造方法参数值。")])]),t._v(" "),s("p",[t._v("上面是只有一个构造方法的情况，那么如果有多个构造方法呢？")]),t._v(" "),s("p",[t._v("又分为两种情况，多个构造方法中存不存在无参的构造方法。")]),t._v(" "),s("p",[t._v("分析：一个类存在多个构造方法，那么Spring进行实例化之前，该如何去确定到底用哪个构造方法呢？")]),t._v(" "),s("ol",[s("li",[t._v("如果开发者指定了想要使用的构造方法，那么就用这个构造方法")]),t._v(" "),s("li",[t._v("如果开发者没有指定想要使用的构造方法，则看开发者有没有让Spring自动去选择构造方法")]),t._v(" "),s("li",[t._v("如果开发者也没有让Spring自动去选择构造方法，则Spring利用无参构造方法，如果没有无参构造方法，则报错")])]),t._v(" "),s("p",[t._v("针对第一点，开发者可以通过什么方式来指定使用哪个构造方法呢？")]),t._v(" "),s("ol",[s("li",[t._v("xml中的"),s("constructor-arg",[t._v("标签，这个标签表示构造方法参数，所以可以根据这个确定想要使用的构造方法的参数个数，从而确定想要使用的构造方法")])],1),t._v(" "),s("li",[t._v("通过@Autowired注解，@Autowired注解可以写在构造方法上，所以哪个构造方法上写了@Autowired注解，表示开发者想使用哪个构造方法，当然，它和第一个方式的不同点是，通过xml的方式，我们直接指定了构造方法的参数值，而通过@Autowired注解的方式，需要Spring通过byType+byName的方式去找到符合条件的bean作为构造方法的参数值")])]),t._v(" "),s("p",[t._v("再来看第二点，如果开发者没有指定想要使用的构造方法，则看开发者有没有让Spring自动去选择构造方法，对于这一点，只能用在ClassPathXmlApplicationContext，因为通过AnnotationConfigApplicationContext没有办法去指定某个bean可以自动去选择构造方法，而通过ClassPathXmlApplicationContext可以在xml中指定某个bean的autowire为constructor，虽然这个属性表示通过构造方法自动注入，所以需要自动的去选择一个构造方法进行自动注入，因为是构造方法，所以顺便是进行实例化。")]),t._v(" "),s("p",[t._v("当然，还有一种情况，就是多个构造方法上写了@Autowired注解，那么此时Spring会报错。")]),t._v(" "),s("p",[t._v("但是，因为@Autowired还有一个属性required，默认为ture，所以一个类中，只有能一个构造方法标注了@Autowired或@Autowired（required=true），有多个会报错。但是可以有多个@Autowired（required=false）,这种情况下，需要Spring从这些构造方法中去自动选择一个构造方法。")]),t._v(" "),s("h2",{attrs:{id:"源码思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码思路"}},[t._v("#")]),t._v(" 源码思路")]),t._v(" "),s("ol",[s("li",[t._v("AbstractAutowireCapableBeanFactory类中的createBeanInstance()方法会去创建一个Bean实例")]),t._v(" "),s("li",[t._v("根据BeanDefinition加载类得到Class对象")]),t._v(" "),s("li",[t._v("如果BeanDefinition绑定了一个Supplier，那就调用Supplier的get方法得到一个对象并直接返回")]),t._v(" "),s("li",[t._v("如果BeanDefinition中存在"),s("strong",[t._v("factoryMethodName")]),t._v("，那么就"),s("strong",[t._v("调用该工厂方法")]),t._v("得到一个bean对象并返回")]),t._v(" "),s("li",[t._v("如果BeanDefinition已经自动构造过了，那就调用autowireConstructor()自动构造一个对象")]),t._v(" "),s("li",[t._v("调用SmartInstantiationAwareBeanPostProcessor的determineCandidateConstructors()方法得到哪些构造方法是可以用的")]),t._v(" "),s("li",[t._v("如果存在可用得构造方法，或者当前BeanDefinition的autowired是AUTOWIRE_CONSTRUCTOR，或者BeanDefinition中指定了构造方法参数值，或者创建Bean的时候指定了构造方法参数值，那么就调用**autowireConstructor()**方法自动构造一个对象")]),t._v(" "),s("li",[t._v("最后，如果不是上述情况，就根据无参的构造方法实例化一个对象")])]),t._v(" "),s("h3",{attrs:{id:"autowireconstructor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autowireconstructor"}},[t._v("#")]),t._v(" "),s("strong",[t._v("autowireConstructor()")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("先检查是否指定了具体的构造方法和构造方法参数值，或者在BeanDefinition中缓存了具体的构造方法或构造方法参数值，如果存在那么则直接使用该构造方法进行实例化")])]),t._v(" "),s("li",[s("p",[t._v("如果没有确定的构造方法或构造方法参数值，那么")])]),t._v(" "),s("li",[s("ol",[s("li",[t._v("如果没有确定的构造方法，那么则找出类中所有的构造方法")]),t._v(" "),s("li",[t._v("如果只有一个无参的构造方法，那么直接使用无参的构造方法进行实例化")]),t._v(" "),s("li",[t._v("如果有多个可用的构造方法或者当前Bean需要自动通过构造方法注入")]),t._v(" "),s("li",[t._v("根据所指定的构造方法参数值，确定所需要的最少的构造方法参数值的个数")]),t._v(" "),s("li",[t._v("对所有的构造方法进行排序，参数个数多的在前面")]),t._v(" "),s("li",[t._v("遍历每个构造方法")]),t._v(" "),s("li",[t._v("如果不是调用getBean方法时所指定的构造方法参数值，那么则根据构造方法参数类型找值")]),t._v(" "),s("li",[t._v("如果时调用getBean方法时所指定的构造方法参数值，就直接利用这些值")]),t._v(" "),s("li",[t._v("如果根据当前构造方法找到了对应的构造方法参数值，那么这个构造方法就是可用的，但是不一定这个构造方法就是最佳的，所以这里会涉及到是否有多个构造方法匹配了同样的值，这个时候就会用值和构造方法类型进行匹配程度的打分，找到一个最匹配的")])])])]),t._v(" "),s("h2",{attrs:{id:"为什么分越少优先级越高"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么分越少优先级越高"}},[t._v("#")]),t._v(" 为什么分越少优先级越高？")]),t._v(" "),s("p",[t._v("主要是计算找到的bean和构造方法参数类型匹配程度有多高。")]),t._v(" "),s("p",[t._v("假设bean的类型为A，A的父类是B，B的父类是C，同时A实现了接口D")]),t._v(" "),s("p",[t._v("如果构造方法的参数类型为A，那么完全匹配，得分为0")]),t._v(" "),s("p",[t._v("如果构造方法的参数类型为B，那么得分为2")]),t._v(" "),s("p",[t._v("如果构造方法的参数类型为C，那么得分为4")]),t._v(" "),s("p",[t._v("如果构造方法的参数类型为D，那么得分为1")]),t._v(" "),s("p",[t._v("可以直接使用如下代码进行测试：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" objects "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodInvoker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTypeDifferenceWeight")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodInvoker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTypeDifferenceWeight")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodInvoker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTypeDifferenceWeight")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodInvoker")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTypeDifferenceWeight")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" objects"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("所以，我们可以发现，越匹配分数越低。")]),t._v(" "),s("h2",{attrs:{id:"原理流程图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理流程图"}},[t._v("#")]),t._v(" 原理流程图")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/365147/1603789603276-ba554460-16bf-4359-b39e-60f7b9bc69b9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_48%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/365147/1604230229658-867455a4-22b6-43d8-9ba7-c100b70619f9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_52%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);