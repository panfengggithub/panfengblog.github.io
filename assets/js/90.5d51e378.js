(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{503:function(s,n,a){"use strict";a.r(n);var e=a(1),r=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"_1-简述rabbitmq的架构设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-简述rabbitmq的架构设计"}},[s._v("#")]),s._v(" "),n("strong",[s._v("1.简述"),n("strong",[n("strong",[s._v("RabbitMQ")])]),s._v("的架构设计")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Broker：rabbitmq的服务节点\n图灵学院\nQueue：队列，是RabbitMQ的内部对象，用于存储消息。RabbitMQ中消息只能存储在队列中。生产\n者投递消息到队列，消费者从队列中获取消息并消费。多个消费者可以订阅同一个队列，这时队列中的\n消息会被平均分摊(轮询)给多个消费者进行消费，而不是每个消费者都收到所有的消息进行消费。(注\n意：RabbitMQ不支持队列层面的广播消费，如果需要广播消费，可以采用一个交换器通过路由Key绑\n定多个队列，由多个消费者来订阅这些队列的方式。\nExchange：交换器。生产者将消息发送到Exchange，由交换器将消息路由到一个或多个队列中。如果\n路由不到，或返回给生产者，或直接丢弃，或做其它处理。\nRoutingKey：路由Key。生产者将消息发送给交换器的时候，一般会指定一个RoutingKey，用来指定\n这个消息的路由规则。这个路由Key需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。\n在交换器类型和绑定键固定的情况下，生产者可以在发送消息给交换器时通过指定RoutingKey来决定消\n息流向哪里。\nBinding：通过绑定将交换器和队列关联起来，在绑定的时候一般会指定一个绑定键，这样RabbitMQ\n就可以指定如何正确的路由到队列了。\n交换器和队列实际上是多对多关系。就像关系数据库中的两张表。他们通过BindingKey做关联(多对多\n关系表)。在投递消息时，可以通过Exchange和RoutingKey(对应BindingKey)就可以找到相对应的队\n列。\n信道：信道是建立在Connection 之上的虚拟连接。当应用程序与Rabbit Broker建立TCP连接的时候，\n客户端紧接着可以创建一个AMQP 信道(Channel) ，每个信道都会被指派一个唯一的D。RabbitMQ 处\n理的每条AMQP 指令都是通过信道完成的。信道就像电缆里的光纤束。一条电缆内含有许多光纤束，允\n许所有的连接通过多条光线束进行传输和接收。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h2",{attrs:{id:"_2-rabbitmq-如何确保消息发送-消息接收"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-rabbitmq-如何确保消息发送-消息接收"}},[s._v("#")]),s._v(" "),n("strong",[s._v("2.RabbitMQ****如何确保消息发送 ？ 消息接收？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("发送方确认机制：\n信道需要设置为 confirm 模式，则所有在信道上发布的消息都会分配一个唯一 ID。\n一旦消息被投递到queue（可持久化的消息需要写入磁盘），信道会发送一个确认给生产者（包含消息唯一\nID）。\n如果 RabbitMQ 发生内部错误从而导致消息丢失，会发送一条 nack（未确认）消息给生产者。\n所有被发送的消息都将被 confirm（即 ack） 或者被nack一次。但是没有对消息被 confirm 的快慢做\n任何保证，并且同一条消息不会既被 confirm又被nack\n发送方确认模式是异步的，生产者应用程序在等待确认的同时，可以继续发送消息。当确认消息到达生产者，\n生产者的回调方法会被触发。\nConfirmCallback接口：只确认是否正确到达 Exchange 中，成功到达则回调\nReturnCallback接口：消息失败返回时回调\n\n接收方确认机制：\nRabbitMQ事务消息\n通过对信道的设置实现\n1. channel.txSelect()；通知服务器开启事务模式；服务端会返回Tx.Select-Ok\n2. channel.basicPublish；发送消息，可以是多条，可以是消费消息提交ack\n3. channel.txCommit()提交事务；\n4. channel.txRollback()回滚事务；\n消费者使用事务：\n1. autoAck=false，手动提交ack，以事务提交或回滚为准；\n2. autoAck=true，不支持事务的，也就是说你即使在收到消息之后在回滚事务也是于事无补的，队\n列已经把消息移除了\n如果其中任意一个环节出现问题，就会抛出IoException异常，用户可以拦截异常进行事务回滚，或决\n定要不要重复消息。\n事务消息会降低rabbitmq的性能\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("h2",{attrs:{id:"_3-rabbitmq-死信队列、延时队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-rabbitmq-死信队列、延时队列"}},[s._v("#")]),s._v(" "),n("strong",[s._v("3.RabbitMQ****死信队列、延时队列")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1. 消息被消费方否定确认，使用 channel.basicNack 或 channel.basicReject ，并且此时\nrequeue 属性被设置为 false 。\n2. 消息在队列的存活时间超过设置的TTL时间。\n3. 消息队列的消息数量已经超过最大队列长度。\n那么该消息将成为“死信”。“死信”消息会被RabbitMQ进行特殊处理，如果配置了死信队列信息，那么该\n消息将会被丢进死信队列中，如果没有配置，则该消息将会被丢弃\n为每个需要使用死信的业务队列配置一个死信交换机，这里同一个项目的死信交换机可以共用一个，然\n后为每个业务队列分配一个单独的路由key，死信队列只不过是绑定在死信交换机上的队列，死信交换\n机也不是什么特殊的交换机，只不过是用来接受死信的交换机，所以可以为任何类型【Direct、\nFanout、Topic】\nTTL：一条消息或者该队列中的所有消息的最大存活时间\n如果一条消息设置了TTL属性或者进入了设置TTL属性的队列，那么这条消息如果在TTL设置的时间内没\n有被消费，则会成为“死信”。如果同时配置了队列的TTL和消息的TTL，那么较小的那个值将会被使用。\n只需要消费者一直消费死信队列里的消息\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h2",{attrs:{id:"_4-rabbitmq-镜像队列机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-rabbitmq-镜像队列机制"}},[s._v("#")]),s._v(" "),n("strong",[s._v("4.RabbitMQ****镜像队列机制")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("镜像queue有master节点和slave节点。master和slave是针对一个queue而言的，而不是一个node作\n为所有queue的master，其它node作为slave。一个queue第一次创建的node为它的master节点，其\n它node为slave节点。\n无论客户端的请求打到master还是slave最终数据都是从master节点获取。当请求打到master节点时，\nmaster节点直接将消息返回给client，同时master节点会通过GM（Guaranteed Multicast）协议将\nqueue的最新状态广播到slave节点。GM保证了广播消息的原子性，即要么都更新要么都不更新。\n当请求打到slave节点时，slave节点需要将请求先重定向到master节点，master节点将将消息返回给\nclient，同时master节点会通过GM协议将queue的最新状态广播到slave节点。\n如果有新节点加入，RabbitMQ不会同步之前的历史数据，新节点只会复制该节点加入到集群之后新增\n的消息。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"_5-kafka-架构设计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-kafka-架构设计"}},[s._v("#")]),s._v(" "),n("strong",[s._v("5.kafka****架构设计")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Consumer Group：消费者组，消费者组内每个消费者负责消费不同分区的数据，提高消费能力。逻\n辑上的一个订阅者。\nTopic：可以理解为一个队列，Topic 将消息分类，生产者和消费者面向的是同一个 Topic。\nPartition：为了实现扩展性，提高并发能力，一个Topic 以多个Partition的方式分布到多个 Broker\n上，每个 Partition 是一个 有序的队列。一个 Topic 的每个Partition都有若干个副本（Replica），一个\nLeader 和若干个 Follower。生产者发送数据的对象，以及消费者消费数据的对象，都是 Leader。\nFollower负责实时从 Leader 中同步数据，保持和 Leader 数据的同步。Leader 发生故障时，某个\nFollower 还会成为新的 Leader。\nOffset：消费者消费的位置信息，监控数据消费到什么位置，当消费者挂掉再重新恢复的时候，可以从\n消费位置继续消费。\nZookeeper：Kafka 集群能够正常工作，需要依赖于 Zookeeper，Zookeeper 帮助 Kafka 存储和管理\n集群信息。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"_6-kafka-在什么情况下会出现消息丢失及解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-kafka-在什么情况下会出现消息丢失及解决方案"}},[s._v("#")]),s._v(" "),n("strong",[s._v("6.Kafka****在什么情况下会出现消息丢失及解决方案")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1）消息发送\n\t1、ack=0，不重试\n    producer发送消息完，不管结果了，如果发送失败也就丢失了。\n    2、ack=1，leader crash\n    producer发送消息完，只等待lead写入成功就返回了，leader crash了，这时follower没来及同步，消\n    息丢失。\n    3、unclean.leader.election.enable 配置true\n    允许选举ISR以外的副本作为leader,会导致数据丢失，默认为false。producer发送异步消息完，只等待\n    lead写入成功就返回了，leader crash了，这时ISR中没有follower，leader从OSR中选举，因为OSR\n    中本来落后于Leader造成消息丢失。\n    解决方案：\n    1、配置：ack=all / -1,tries > 1,unclean.leader.election.enable : false\n    producer发送消息完，等待follower同步完再返回，如果异常则重试。副本的数量可能影响吞吐量。\n    不允许选举ISR以外的副本作为leader。\n    2、配置：min.insync.replicas > 1\n    副本指定必须确认写操作成功的最小副本数量。如果不能满足这个最小值，则生产者将引发一个异常(要么是\n    NotEnoughReplicas，要么是NotEnoughReplicasAfterAppend)。\n    min.insync.replicas和ack更大的持久性保证。确保如果大多数副本没有收到写操作，则生产者将引发异\n    常。\n    3、失败的offset单独记录\n    producer发送消息，会自动重试，遇到不可恢复异常会抛出，这时可以捕获异常记录到数据库或缓存，进行\n    单独处理。\n2）消费\n    先commit再处理消息。如果在处理消息的时候异常了，但是offset 已经提交了，这条消息对于该消费者\t来说就是丢失了，再也不会消费到了。\n3）broker的刷盘\n\t减小刷盘间隔\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("h2",{attrs:{id:"_7-kafka是pull-push-优劣势分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-kafka是pull-push-优劣势分析"}},[s._v("#")]),s._v(" "),n("strong",[s._v("7.Kafka"),n("strong",[n("strong",[s._v("是")])]),s._v("pull")]),s._v("**？"),n("strong",[n("strong",[s._v("push")])]),s._v("？优劣势分析**")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("pull模式：\n根据consumer的消费能力进行数据拉取，可以控制速率\n1、ack=0，不重试\nproducer发送消息完，不管结果了，如果发送失败也就丢失了。\n2、ack=1，leader crash\nproducer发送消息完，只等待lead写入成功就返回了，leader crash了，这时follower没来及同步，消\n息丢失。\n3、unclean.leader.election.enable 配置true\n允许选举ISR以外的副本作为leader,会导致数据丢失，默认为false。producer发送异步消息完，只等待\nlead写入成功就返回了，leader crash了，这时ISR中没有follower，leader从OSR中选举，因为OSR\n中本来落后于Leader造成消息丢失。\n解决方案：\n1、配置：ack=all / -1,tries > 1,unclean.leader.election.enable : false\nproducer发送消息完，等待follower同步完再返回，如果异常则重试。副本的数量可能影响吞吐量。\n不允许选举ISR以外的副本作为leader。\n2、配置：min.insync.replicas > 1\n副本指定必须确认写操作成功的最小副本数量。如果不能满足这个最小值，则生产者将引发一个异常(要么是\nNotEnoughReplicas，要么是NotEnoughReplicasAfterAppend)。\nmin.insync.replicas和ack更大的持久性保证。确保如果大多数副本没有收到写操作，则生产者将引发异\n常。\n3、失败的offset单独记录\nproducer发送消息，会自动重试，遇到不可恢复异常会抛出，这时可以捕获异常记录到数据库或缓存，进行\n单独处理。\n先commit再处理消息。如果在处理消息的时候异常了，但是offset 已经提交了，这条消息对于该消费者来\n说就是丢失了，再也不会消费到了。\n图灵学院\n可以批量拉取、也可以单条拉取\n可以设置不同的提交方式，实现不同的传输语义\n缺点：如果kafka没有数据，会导致consumer空循环，消耗资源\n解决：通过参数设置，consumer拉取数据为空或者没有达到一定数量时进行阻塞\npush模式：不会导致consumer循环等待\n缺点：速率固定、忽略了consumer的消费能力，可能导致拒绝服务或者网络拥塞等情况\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("h2",{attrs:{id:"_8-kafka中zk-的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-kafka中zk-的作用"}},[s._v("#")]),s._v(" "),n("strong",[s._v("8.Kafka"),n("strong",[n("strong",[s._v("中")])]),s._v("zk****的作用")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/brokers/ids：临时节点，保存所有broker节点信息，存储broker的物理地址、版本信息、启动时间\n等，节点名称为brokerID，broker定时发送心跳到zk，如果断开则该brokerID会被删除\n/brokers/topics：临时节点，节点保存broker节点下所有的topic信息，每一个topic节点下包含一个固\n定的partitions节点，partitions的子节点就是topic的分区，每个分区下保存一个state节点、保存着当\n前leader分区和ISR的brokerID，state节点由leader创建，若leader宕机该节点会被删除，直到有新的\nleader选举产生、重新生成state节点\n/consumers/[group_id]/owners/[topic]/[broker_id-partition_id]：维护消费者和分区的注册关系\n/consumers/[group_id]/offsets/[topic]/[broker_id-partition_id]：分区消息的消费进度Offset\nclient通过topic找到topic树下的state节点、获取leader的brokerID，到broker树中找到broker的物理\n地址，但是client不会直连zk，而是通过配置的broker获取到zk中的信息\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"_9-简述kafka的rebalance机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-简述kafka的rebalance机制"}},[s._v("#")]),s._v(" "),n("strong",[s._v("9.简述"),n("strong",[n("strong",[s._v("kafka")])]),s._v("的"),n("strong",[n("strong",[s._v("rebalance")])]),s._v("机制")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("consumer group中的消费者与topic下的partion重新匹配的过程\n何时会产生rebalance：\nconsumer group中的成员个数发生变化\nconsumer消费超时\ngroup订阅的topic个数发生变化\ngroup订阅的topic的分区数发生变化\n图灵学院\ncoordinator：通常是partition的leader节点所在的broker，负责监控group中consumer的存活，\nconsumer维持到coordinator的心跳，判断consumer的消费超时\ncoordinator通过心跳返回通知consumer进行rebalance\nconsumer请求coordinator加入组，coordinator选举产生leader consumer\nleader consumer从coordinator获取所有的consumer，发送syncGroup(分配信息)给到\ncoordinator\ncoordinator通过心跳机制将syncGroup下发给consumer\n完成rebalance\nleader consumer监控topic的变化，通知coordinator触发rebalance\n如果C1消费消息超时，触发rebalance，重新分配后、该消息会被其他消费者消费，此时C1消费完成提\n交offset、导致错误\n解决：coordinator每次rebalance，会标记一个Generation给到consumer，每次rebalance该\nGeneration会+1，consumer提交offset时，coordinator会比对Generation，不一致则拒绝提交\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h2",{attrs:{id:"_10-kafka-的性能好在什么地方"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-kafka-的性能好在什么地方"}},[s._v("#")]),s._v(" "),n("strong",[s._v("10.Kafka****的性能好在什么地方")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("kafka不基于内存，而是硬盘存储，因此消息堆积能力更强\n顺序写：利用磁盘的顺序访问速度可以接近内存，kafka的消息都是append操作，partition是有序的，\n节省了磁盘的寻道时间，同时通过批量操作、节省写入次数，partition物理上分为多个segment存储，\n方便删除\n传统：\n读取磁盘文件数据到内核缓冲区\n将内核缓冲区的数据copy到用户缓冲区\n将用户缓冲区的数据copy到socket的发送缓冲区\n将socket发送缓冲区中的数据发送到网卡、进行传输\n零拷贝：\n直接将内核缓冲区的数据发送到网卡传输\n使用的是操作系统的指令支持\nkafka不太依赖jvm，主要理由操作系统的pageCache，如果生产消费速率相当，则直接用pageCache\n交换数据，不需要经过磁盘IO\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);