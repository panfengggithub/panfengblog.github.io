(window.webpackJsonp=window.webpackJsonp||[]).push([[407],{820:function(s,t,a){"use strict";a.r(t);var n=a(1),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"从时间和空间角度分析算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从时间和空间角度分析算法"}},[s._v("#")]),s._v(" 从时间和空间角度分析算法")]),s._v(" "),t("h1",{attrs:{id:"一、前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[s._v("#")]),s._v(" 一、前言")]),s._v(" "),t("p",[s._v("在进一步学习数据结构与算法前，我们应该先掌握算法分析的一般方法。算法分析主要包括对算法的时空复杂度进行分析，但有些时候我们更关心算法的实际运行性能如何，此外，算法可视化是一项帮助我们理解算法实际执行过程的实用技能，在分析一些比较抽象的算法时，这项技能尤为实用。在在本篇博文中，我们首先会介绍如何通过设计实验来量化算法的实际运行性能，然后会介绍算法的时间复杂度的分析方法，我们还会介绍能够非常便捷的预测算法性能的倍率实验。当然，在文章的末尾，我们会一起来做几道一线互联网的相关面试/笔试题来巩固所学，达到学以致用。")]),s._v(" "),t("h1",{attrs:{id:"二、算法分析的一般方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、算法分析的一般方法"}},[s._v("#")]),s._v(" 二、算法分析的一般方法")]),s._v(" "),t("h2",{attrs:{id:"_1-量化算法的实际运行性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-量化算法的实际运行性能"}},[s._v("#")]),s._v(" 1. 量化算法的实际运行性能")]),s._v(" "),t("p",[s._v("在介绍算法的时空复杂度分析方法前，"),t("strong",[s._v("我们先来介绍以下如何来量化算法的实际运行性能")]),s._v("，**这里我们选取的衡量算法性能的量化指标是它的实际运行时间。**通常这个运行时间与算法要解决的问题规模相关，比如排序100万个数的时间通常要比排序10万个数的时间要长。所以我们在观察算法的运行时间时，还要同时考虑它所解决问题的规模，观察随着问题规模的增长，算法的实际运行时间时怎样增长的。这里我们采用"),t("a",{attrs:{href:"https://book.douban.com/subject/19952400/",target:"_blank",rel:"noopener noreferrer"}},[s._v("算法（第4版） (豆瓣)"),t("OutboundLink")],1),s._v("一书中的例子，代码如下：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreeSum")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cnt "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" k"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                        cnt"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" cnt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StdIn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readAllInts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StdOut")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("​    我们可以看到，"),t("strong",[s._v("以上代码的功能是统计标准一个int[]数组中的所有和为0的三整数元组的数量")]),s._v("。采用的算法十分直接，就是从头开始遍历数组，每次取三个数，若和为0，则计数加一，最后返回的计数值即为和为0的三元组的数量。这里我们采取含有整数数量分别为1000、2000、4000的3个文件（这些文件可以在上面的项目地址中找到），来对以上算法进行测试，观察它的运行时间随着问题规模的增长是怎样变化的。")]),s._v(" "),t("p",[s._v("**测量一个过程的运行时间的一个直接的方法就是，在这个过程运行前后各获取一次当前时间，两者的差值即为这个过程的运行时间。**当我们的过程本身需要的执行时间很短时间，这个测量方法可能会存在一些误差，但是我们可以通过执行多次这个过程再取平均数来减小以至可以忽略这个误差。下面我们来实际测量一下以上算法的运行时间，相关代码如下：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("In")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("readInts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" startTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" endTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("endTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" startTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StdOut")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The result is: "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('", and takes "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" seconds."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("我们分别以1000、2000、4000个整数作为输入，得到的运行结果如下:")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("The result is: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("70")]),s._v(", and takes "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.017")]),s._v(" seconds. //1000个整数\nThe result is: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("528")]),s._v(", and takes "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.894")]),s._v(" seconds. //2000个整数\nThe result is: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4039")]),s._v(", and takes "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64.348")]),s._v(" seconds. //4000个整数\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("​     我们从以上结果大概可你看到，当问题的规模变为原来的2倍时，实际运行时间大约变为原来的8倍。"),t("strong",[s._v("根据这个现象我们可以做出一个猜想：程序的运行时间关于问题规模N的函数关系式为T(N) = k*(n^3).")])]),s._v(" "),t("p",[s._v("在这个关系式中，当n变为原来的2倍时，T(N)会变为原来的8倍。那么ThreeSum算法的运行时间与问题规模是否满足以上的函数关系呢？在介绍算法时间复杂度的相关内容后，我们会回过头来再看这个问题。")]),s._v(" "),t("h2",{attrs:{id:"_2-算法的时间复杂度分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-算法的时间复杂度分析"}},[s._v("#")]),s._v(" 2. 算法的时间复杂度分析")]),s._v(" "),t("h3",{attrs:{id:"_1-基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本概念"}},[s._v("#")]),s._v(" （1）基本概念")]),s._v(" "),t("p",[s._v("关于算法的时间复杂度，这里我们先简单介绍下相关的三种符号记法：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("第一种叫"),t("strong",[s._v("Big O notation")]),s._v("，它给出了运行时间的”"),t("strong",[s._v("渐进上界")]),s._v("“，相当于**“小于等于”，"),t("strong",[s._v("也就是")]),s._v("算法在最坏情况下运行时间的上限**。")])]),s._v(" "),t("li",[t("p",[s._v("第三种叫做"),t("strong",[s._v("Big Ω notation")]),s._v("，它给出了运行时间的“"),t("strong",[s._v("渐进下界")]),s._v("”，相当于**“大于等于”，"),t("strong",[s._v("也就是")]),s._v("算法在最坏情况下运行时间的下限**。。")])]),s._v(" "),t("li",[t("p",[s._v("第三种叫"),t("strong",[s._v("Big Θ notation")]),s._v("，它确定了运行时间的”"),t("strong",[s._v("渐进确界")]),s._v("“。相当于**“等于”，"),t("strong",[s._v("也就是")]),s._v("算法在一般情况下运行时间的值**。")]),s._v(" "),t("p",[s._v("我们在平常的算法分析中最常用到的是Big O notation。下面我们将介绍分析算法的时间复杂度的具体方法。")])])]),s._v(" "),t("h3",{attrs:{id:"_2-时间复杂度的分析方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-时间复杂度的分析方法"}},[s._v("#")]),s._v(" （2）时间复杂度的分析方法")]),s._v(" "),t("p",[s._v("这部分我们将以上面的ThreeSum程序为例，来介绍一下算法时间复杂度的分析方法。为了方便阅读，这里再贴一下上面的程序：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cnt "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" k "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" k"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    cnt"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" cnt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/10385897/1615727245329-dbee8843-0ef3-4b91-8e21-13bdaa4fa595.png",alt:"img"}})]),s._v(" "),t("p",[s._v("​     在介绍时间复杂度分析方法前，我们首先来明确下"),t("strong",[s._v("算法的运行时间究竟取决于什么")]),s._v("。直观地想，一个算法的运行时间也就是执行所有程序语句的耗时总和。然而在实际的分析中，我们并不需要考虑所有程序语句的运行时间，我们应该做的是集中注意力于最耗时的部分，也就是"),t("strong",[s._v("执行频率最高而且最耗时的操作")]),s._v("。也就是说，在对一个程序的时间复杂度进行分析前，我们要先确定这个程序中哪些语句的执行占用的它的大部分执行时间，而那些尽管耗时大但只执行常数次（和问题规模无关）的操作我们可以忽略。"),t("strong",[s._v("我们选出一个最耗时的操作，通过计算这些操作的执行次数来估计算法的时间复杂度")]),s._v("，下面我们来具体介绍这一过程。")]),s._v(" "),t("p",[s._v("​    首先我们看到以上代码的第1行和第2行的语句只会执行一次，因此我们可以忽略它们。然后我们看到第4行到第12行是一个三层循环，最内存的循环体包含了一个if语句。也就是说，这个if语句是以上代码中耗时最多的语句，我们接下来只需要计算if语句的执行次数即可估计出这个算法的时间复杂度。以上算法中，我们的问题规模为N（输入数组包含的元素数目），我们也可以看到，if语句的执行次数与N是相关的。我们不难得出，"),t("strong",[s._v("if语句会执行N * (N - 1) * (N - 2) / 6次")]),s._v("，因此这个算法的时间复杂度为"),t("strong",[s._v("O(n^3)")]),s._v("。这也印证了我们之前猜想的运行时间与问题规模的函数关系**（T(n) = k * n ^ 3）**。由此我们也可以知道，算法的时间复杂度刻画的是随着问题规模的增长，算法的运行时间的增长速度是怎样的。在平常的使用中，"),t("strong",[s._v("Big O notation")]),s._v("通常都不是严格表示最坏情况下算法的运行时间上限，而是用来表示通常情况下算法的渐进性能的上限，在使用Big O notation描述算法最坏情况下运行时间的上限时，我们通常加上限定词“最坏情况“。")]),s._v(" "),t("p",[s._v("通过以上分析，我们知道分析算法的时间复杂度只需要两步（比把大象放进冰箱还少一步：) ）：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("寻找执行次数多的语句作为决定运行时间的[关键操作];")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("分析关键操作的执行次数。")])]),s._v(" "),t("p",[s._v("在以上的例子中我们可以看到，不论我们输入的整型数组是怎样的，if语句的执行次数是不变的，也就是说上面算法的运行时间与输入无关。而有些算法的实际运行时间高度依赖于我们给定的输入，关于这一问题下面我们进行介绍。")])])]),s._v(" "),t("h2",{attrs:{id:"_3-算法的期望运行时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-算法的期望运行时间"}},[s._v("#")]),s._v(" 3. 算法的期望运行时间")]),s._v(" "),t("p",[s._v("​    **算法的期望运行时间我们可以理解为，**"),t("strong",[s._v("在通常情况下，算法的运行时间是多少")]),s._v("。**在很多时候，我们更关心算法的期望运行时间而不是算法在最坏情况下运行时间的上限，因为最坏情况和最好情况发生的概率是比较低的，我们更常遇到的是一般情况。**比如说尽管快速排序算法与归并排序算法的时间复杂度都为O(nlogn)，但是在相同的问题规模下，快速排序往往要比归并排序快，因此快速排序算法的期望运行时间要比归并排序的期望时间小。然而在最坏情况下，快速排序的时间复杂度会变为O(n^2)，快速排序算法就是一个运行时间依赖于输入的算法，对于这个问题，我们可以通过打乱输入的待排序数组的顺序来避免发生最坏情况。")]),s._v(" "),t("h2",{attrs:{id:"_4-增长数量级与倍率实验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-增长数量级与倍率实验"}},[s._v("#")]),s._v(" 4. "),t("strong",[s._v("增长数量级与")]),s._v("倍率实验")]),s._v(" "),t("p",[s._v("下面我们来介绍一下"),t("a",{attrs:{href:"https://book.douban.com/subject/19952400/",target:"_blank",rel:"noopener noreferrer"}},[s._v("算法（第4版） (豆瓣)"),t("OutboundLink")],1),s._v("一书中的**“倍率实验”。这个方法能够简单有效地预测程序的性能并判断他们的运行时间大致的增长数量级。"),t("strong",[s._v("在正式介绍倍率实验前，我们先来简单介绍下")]),s._v("“增长数量级“**这一概念（同样引用自《算法》一书）：")]),s._v(" "),t("p",[s._v("我们用~f(N)表示所有随着N的增大除以f(N)的结果趋于1的函数。用g(N)~f(N)表示g(N) / f(N)随着N的增大趋近于1。通常我们用到的近似方式都是g(N) ~ a * f(N)。我们将f(N)称为g(N)的增长数量级。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/10385897/1615727190826-5d3a6049-4596-4a8d-aa38-fd4ff7d18add.png",alt:"img"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/10385897/1615727551580-0fd267f0-c35b-43a3-ad93-56a4caea826e.png",alt:"img"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/10385897/1615727515387-6bab9925-daeb-460e-9754-7920f88d6cf5.png",alt:"img"}})]),s._v(" "),t("p",[s._v("我们还是拿ThreeSum程序来举例，假设g(N)表示在输入数组尺寸为N时执行if语句的次数。根据以上的定义，我们就可以得到"),t("strong",[s._v("g(N) ~ N ^ 3（当N趋向于正无穷时，g(N) / N^3 趋近于1）")]),s._v("。所以g(N)的增长数量级为N^3，即ThreeSum算法的运行时间的增长数量级为N^3。")]),s._v(" "),t("p",[s._v("现在，我们来正式介绍倍率实验（以下内容主要引用自上面提到的《算法》一书，同时结合了一些个人理解）。首先我们来一个热身的小程序：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DoublingTest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeTrial")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAX")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StdRandom")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uniform")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAX")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MAX")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" startTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreeSum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" endTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentTimeMillis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("endTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" startTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("250")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" time "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeTrial")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StdOut")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%7d %5.1f\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" time"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("以上代码会以250为起点，每次将ThreeSum的问题规模翻一倍，并在每次运行ThreeSum后输出本次问题规模和对应的运行时间。运行以上程序得到的输出如下所示：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("250")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.6")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4000")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30.6")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("上面的输出之所以和理论值有所出入是因为实际运行环境是复杂多变的，因而会产生许多偏差，尽可能减小这种偏差的方式就是多次运行以上程序并取平均值。有了上面这个热身的小程序做铺垫，接下来我们就可以正式介绍这个“可以简单有效地预测任意程序执行性能并判断其运行时间的大致增长数量级”的方法了，实际上它的工作基于以上的DoublingTest程序，大致过程如下：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("开发一个[输入生成器]来产生实际情况下的各种可能的输入。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("反复运行下面的DoublingRatio程序，直至time/prev的值趋近于极限2^b，则该算法的增长数量级约为N^b（b为常数）。")])]),s._v(" "),t("p",[s._v("DoublingRatio程序如下：")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/10385897/1615727456834-819c9b6f-2ecd-4bf6-a241-33012cefb420.png",alt:"img"}})]),s._v(" "),t("p",[s._v("我们可以看到，"),t("strong",[s._v("time/prev确实收敛到了8（2^3)")]),s._v("。那么，为什么通过使输入不断翻倍而反复运行程序，运行时间的比例会趋于一个常数呢？答案是下面的[倍率定理]:")]),s._v(" "),t("p",[t("strong",[s._v("若T(N) ~ a * N^b * lgN，那么T(2N) / T(N) ~2^b。")])]),s._v(" "),t("p",[s._v("以上定理的证明很简单，只需要计算T(2N) / T(N)在N趋向于正无穷时的极限即可。其中，“a * N^b * lgN”基本上涵盖了常见算法的增长量级（a、b为常数）。值得我们注意的是，当一个算法的增长量级为NlogN时，对它进行倍率测试，我们会得到它的运行时间的增长数量级约为N。实际上，这并不矛盾，因为我们并不能根据倍率实验的结果推测出算法符合某个特定的数学模型，我们只能够大致预测相应算法的性能（当N在16000到32000之间时，14N与NlgN十分接近）。")]),s._v(" "),t("h2",{attrs:{id:"_5-均摊分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-均摊分析"}},[s._v("#")]),s._v(" 5. 均摊分析")]),s._v(" "),t("p",[s._v("考虑下用底层用数组实现的支持动态调整大小的栈。每次添加一个元素到栈中后，我们都会判断当前元素是否填满的数组，若是填满了，则创建一个尺寸为原来两倍的新数组，并把所有元素从原数组复制到新数组中。我们知道，在数组未填满的情况下，push操作的复杂度为O(1)，而当一个push操作使得数组被填满，创建新数组及复制这一工作会使得push操作的复杂度骤然上升到O(n)。")]),s._v(" "),t("p",[s._v("对于上面那种情况，我们显然不能说push的复杂度是O(n)，我们通常认为push的“平均复杂度”为O(1)，因为毕竟每n个push操作才会触发一次“复制元素到新数组”，因而这n个push把这一代价一均摊，对于这一系列push中的每个来说，它们的均摊代价就是O(1)。"),t("strong",[s._v("这种记录所有操作的总成本并除以操作总数来讲成本均摊的方法叫做均摊分析（也叫摊还分析）。")])]),s._v(" "),t("h1",{attrs:{id:"三、小试牛刀之实战名企面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、小试牛刀之实战名企面试题"}},[s._v("#")]),s._v(" 三、小试牛刀之实战名企面试题")]),s._v(" "),t("p",[s._v("前面我们介绍了算法分析的一些姿势，那么现在我们就来学以致用，一起来解决几道一线互联网企业有关于算法分析的面试/笔试题。")]),s._v(" "),t("p",[s._v("【腾讯】下面算法的时间复杂度是____")]),s._v(" "),t("p",[s._v("int foo(int n) {")]),s._v(" "),t("p",[s._v("if (n <= 1) {")]),s._v(" "),t("p",[s._v("​    return 1；")]),s._v(" "),t("p",[s._v("}")]),s._v(" "),t("p",[s._v("return n * foo(n - 1);")]),s._v(" "),t("p",[s._v("}")]),s._v(" "),t("p",[s._v("看到这道题要我们分析算法时间复杂度后，我们要做的第一步便是确定关键操作，这里的关键操作显然是if语句，那么我们只需要判断if语句执行的次数即可。首先我们看到这是一个递归过程："),t("strong",[s._v("foo会不断的调用自身，直到foo的实参小于等于1，foo就会返回1，之后便不会再执行if语句了。由此我们可以知道，if语句调用的次数为n次，所以时间复杂度为"),t("strong",[t("strong",[s._v("O(n)")])]),s._v("。")])]),s._v(" "),t("p",[s._v("【京东】以下函数的时间复杂度为____")]),s._v(" "),t("p",[s._v("void recursive(int n, int m, int o) {")]),s._v(" "),t("p",[s._v("if (n <= 0) {")]),s._v(" "),t("p",[s._v('​    printf("%d, %d\\n", m, o);')]),s._v(" "),t("p",[s._v("} else {")]),s._v(" "),t("p",[s._v("​    recursive(n - 1, m + 1, o);")]),s._v(" "),t("p",[s._v("​    recursive(n - 1, m, o + 1);")]),s._v(" "),t("p",[s._v("}")]),s._v(" "),t("p",[s._v("}")]),s._v(" "),t("p",[s._v("这道题明显要比上道题难一些，那么让我们来按部就班的解决它。首先，它的关键操作时if语句，因此我们只需判断出if语句的执行次数即可。以上函数会在n > 0的时候不断递归调用自身，我们要做的是判断在到达递归的base case（即n <= 0）前，共执行了多少次if语句。我们假设if语句的执行次数为T(n, m, o)，那么我们可以进一步得到：T(n, m, o) = T(n-1, m+1, o) + T(n-1, m, o+1) （当n > 0时）。我们可以看到base case与参数m, o无关，因此我们可以把以上表达式进一步简化为"),t("strong",[s._v("T(n) = 2T(n-1)")]),s._v("，由此我们可得"),t("strong",[s._v("T(n) = 2T(n-1) = (2^2) * T(n-2)")]),s._v("......所以我们可以得到以上算法的时间复杂度为O(2^n)。")]),s._v(" "),t("p",[s._v("【京东】如下程序的时间复杂度为____（其中m > 1，e > 0）")]),s._v(" "),t("p",[s._v("x = m;")]),s._v(" "),t("p",[s._v("y = 1;")]),s._v(" "),t("p",[s._v("while (x - y > e) {")]),s._v(" "),t("p",[s._v("x = (x + y) / 2;")]),s._v(" "),t("p",[s._v("y = m / x;")]),s._v(" "),t("p",[s._v("}")]),s._v(" "),t("p",[s._v("print(x);")]),s._v(" "),t("p",[s._v("以上算法的关键操作即while语句中的两条赋值语句，我们只需要计算这两条语句的执行次数即可。我们可以看到，当x - y > e时，while语句体内的语句就会执行，x = (x + y) / 2使得x不断变小（当y<<x时，执行一次这个语句会使x变为约原来的一半），假定y的值固定在1，那么循环体的执行次数即为~logm，而实际情况是y在每次循环体最后都会被赋值为m / x，这个值总是比y在上一轮循环中的值大，这样一来x-y的值就会更小，所以以上算法的时间复杂度为"),t("strong",[s._v("O(logm)")]),s._v("。")]),s._v(" "),t("p",[s._v("【搜狗】假设某算法的计算时间可用递推关系式T(n) = 2T(n/2) + n，T(1) = 1表示，则该算法的时间复杂度为____")]),s._v(" "),t("p",[s._v("根据题目给的递推关系式，我们可以进一步得到：T(n) = 2(2T(n/4) + n/2) + n = ... 将递推式进一步展开，我们可以得到该算法的时间复杂度为"),t("strong",[s._v("O(nlogn)")]),s._v("，这里就不贴上详细过程了。")]),s._v(" "),t("h1",{attrs:{id:"四、内存分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、内存分析"}},[s._v("#")]),s._v(" 四、内存分析")]),s._v(" "),t("p",[s._v("分析内存的使用要比分析程序的运行时间简单的多，主要的原因是它所涉及的语句较少（只有声明语句），且在分析中我们可以将复杂的对象简化为原始数据类型，而原始数据类型内存的使用是预先定义好的-----只需将变量的数量和它们的类型所对应的字节数分别相乘并汇总即可。")]),s._v(" "),t("h2",{attrs:{id:"_1-一个对象的内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-一个对象的内存"}},[s._v("#")]),s._v(" 1. 一个对象的内存")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("一个对象的内存=所有实例变量使用的内存+对象本身的开销（一般是16字节）")])]),s._v(" "),t("li",[t("p",[s._v("对象本身的开销=一个指向对象类的引用+垃圾回收信息+同步信息")])]),s._v(" "),t("li",[t("p",[s._v("一般内存的使用都会被填充为8字节（64位计算机中的机器字）的倍数。不够8的倍数，填充为8的倍数。")])]),s._v(" "),t("li",[t("p",[s._v("对象的引用，其实就是一个机器地址，一个机器地址所需内存一般是8字节（64位架构的计算机，32为架构的是4字节）")])]),s._v(" "),t("li",[t("p",[s._v("Integer对象内存（24字节）= 对象开销（16字节）+int（4字节）+填充字节（4字节）")])]),s._v(" "),t("li",[t("p",[s._v("Date对象内存（32字节）=对象开销（16字节）+3*int（12字节）+填充字节（4字节）")])]),s._v(" "),t("li",[t("p",[s._v("Counter对象内存（32字节）=对象开销（16）+String（8）+int（4）+填充字节（4）")])]),s._v(" "),t("li",[t("p",[s._v("Node内存（40）=对象开销（16）+额外开销（8）+Item的引用（8）+Node的引用（8)，因为Node是一个非静态的内部类，所以它持有对外部类的引用，"),t("strong",[s._v("额外开销就是来之于对外部类的引用")]),s._v("。")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/10385897/1615728674227-14e9605b-6c6a-41c0-91fc-0be65e164fd4.png",alt:"img"}})]),s._v(" "),t("h2",{attrs:{id:"_2-链表栈的内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-链表栈的内存"}},[s._v("#")]),s._v(" 2. 链表栈的内存")]),s._v(" "),t("p",[s._v("嵌套的非静态(内部)类，例如我们的Node类，还需要额外的8字节(用于一个指向外部类的引用)。因此，"),t("strong",[s._v("一个****Node对象需要使用40字节(")]),s._v(" "),t("strong",[s._v("16字节的对象开销，指向Item和Node对象的引用各需8字节，另外还有8字节的额外开销)")]),s._v("。因为"),t("strong",[s._v("Integer")]),s._v("对象需要使用"),t("strong",[s._v("24字节")]),s._v("，一个含有N个整数的基于链表的栈val需要使用( 32+64N)字节，包括LinkedStack对象val的16字节的开销，引用类型first实例变量8字节，int型实例变量4字节，4个填充字节。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  LinkedStack<Integer> val= LinkedStack<Integer>()")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedStack")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" first"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("N")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 集合的数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 结点")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" item"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" next"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h2",{attrs:{id:"_3-数组的内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-数组的内存"}},[s._v("#")]),s._v(" 3. 数组的内存")]),s._v(" "),t("p",[s._v("Java中数组被实现为对象，它们一般都会因为记录长度需要额外的内存。")]),s._v(" "),t("p",[s._v("一个原始数据类型的数组一般需要24字节的头信息（16字节的对象开销+4字节用于保存长度+4字节填充）再加上保存值所需的内存。")]),s._v(" "),t("ul",[t("li",[s._v("含有N个int类型的数组内存=24+4N（不够8的倍数会被填充）;")]),s._v(" "),t("li",[s._v("含有N个double类型的数组内存=24+8N;")]),s._v(" "),t("li",[s._v("含有N个Date对象的数组内存=24+（8+32）*N（其中32是一个Date对象所开销的内存，8是存在数组中对该Date对象的引用内存）;")]),s._v(" "),t("li",[s._v("一个M*N的Double类型二维数组内存=24+24M+8M+8MN ～8MN;")])]),s._v(" "),t("p",[s._v("二维数组就是一个数组的数组，MN的二维数组，就是第一层是一个M长度的数组，这个M长度数组内部存的每个元素都是一个对一个一维数组的引用，所以除了第一层数组所开销的24字节以外，还有M个第二层数组所开销的24M字节，对M个数组的引用8*M字节，因为存的是double类型的数组，所以这M个第二层数组里边都存了N个double类型的值=8MN字节。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/10385897/1615730064704-b8a987f3-d0aa-4355-ae3f-67fc751a5646.png",alt:"img"}})]),s._v(" "),t("h2",{attrs:{id:"_4-string的内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-string的内存"}},[s._v("#")]),s._v(" 4. String的内存")]),s._v(" "),t("p",[s._v("String的标准实现含有四个实例变量，value是指向字符数组的引用（8字节），offset描述的是字符数组中的偏移量（4字节），count是值字符串的长度（4字节），hash是字符串的散列值（4字节），再加上对象的开销（16字节），以及填充字节（4字节）。")]),s._v(" "),t("p",[s._v("如果不计算所存的字符数组内存，一个String对象所需要内存是40字节。")]),s._v(" "),t("p",[s._v("String的char数组常常是在多个字符串之间共享的，这是因为String对象是不可变的，这种设计使String的实现能够个对象都含有相同的value[]数组是，节省空间。")]),s._v(" "),t("p",[s._v("一个长度为 N 的 String 对象一般需要使用 40 字节(String 对象本身)加上(24+2N)字节(字符数组)，总共(64+2N)字节。")]),s._v(" "),t("p",[s._v("但字符串处理经常会和子字符串打交道，所以 Java 对字符串的表 示希望能够避免复制字符串中的字符。当你调用 substring() 方法时，就创建了一个新的 String 对象(40 字节)，但它仍然重用了相同的 value[] 数组，因此该字符串的子字符串只会使用 40 字 节的内存。含有原始字符串的字符数组的别名存在于子字符串中，子字符串对象的偏移量和长度域 标记了子字符串的位置。换句话说，一个子字符串所需的额外内存是一个常数，构造一个子字符串 所需的时间也是常数，即使字符串和子字符串的长度极大也是这样。")]),s._v(" "),t("p",[s._v("codon字符串中的字符数组元素 是从value[0]-value[count-1]")]),s._v(" "),t("p",[s._v("子字符串genome的字符数组元素表示是从value[offset]-value[offset+count-1]")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/10385897/1615730237213-928a8177-2afd-4a4d-8c9b-6c27f5234d00.png",alt:"img"}})]),s._v(" "),t("h2",{attrs:{id:"_5-函数的内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-函数的内存"}},[s._v("#")]),s._v(" 5. 函数的内存")]),s._v(" "),t("p",[s._v("涉及函数调用时，内存的 消耗就变成了一个复杂的动态过程，因为 Java 系统 的内存分配机制扮演一个重要的角色，而这套机制 又和 Java 的实现有关。")]),s._v(" "),t("p",[s._v("例如，当你的程序调用一个 方法时，系统会从内存中的一个特定区域为方法分 配所需要的内存(用于保存局部变量)，这个区域 叫做栈(Java 系统的下压栈)。当方法返回时，它 所占用的内存也被返回给了系统栈。")]),s._v(" "),t("p",[s._v("因此，在递归 程序中创建数组或是其他大型对象是很危险的，因 为这意味着每一次递归调用都会使用大量的内存。")]),s._v(" "),t("p",[s._v("当通过 new 创建对象时，系统会从堆内存的另一块 特定区域为该对象分配所需的内存。")]),s._v(" "),t("p",[s._v("而且， 你要记住所有对象都会一直存在，直到对它的引用 消失为止。此时系统的垃圾回收进程会将它所占用 的内存收回到堆中。这种动态过程使准确估计一个 程序的内存使用变得极为困难。")]),s._v(" "),t("h1",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),t("ul",[t("li",[s._v("https://www.cnblogs.com/absfree/p/5464779.html")]),s._v(" "),t("li",[s._v("https://blog.csdn.net/qq_34589749/article/details/104000560")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://book.douban.com/subject/19952400/",target:"_blank",rel:"noopener noreferrer"}},[s._v("算法（第4版） (豆瓣)"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);