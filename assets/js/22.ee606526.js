(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{432:function(v,_,e){"use strict";e.r(_);var t=e(1),p=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"课堂课中笔记"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#课堂课中笔记"}},[v._v("#")]),v._v(" "),_("strong",[v._v("课堂课中笔记")])]),v._v(" "),_("p",[v._v("springmvc原理解析--手写模拟springmvc  demo")]),v._v(" "),_("p",[v._v("1、web框架功能分析")]),v._v(" "),_("p",[v._v("2、模拟springmvc写web框架")]),v._v(" "),_("p",[v._v("3、springmvc整体架构")]),v._v(" "),_("p",[v._v("servlet和spring  实现web框架")]),v._v(" "),_("p",[v._v("IOC")]),v._v(" "),_("p",[v._v("处理器：做业务处理的组件  类  方法  跟url有映射关系")]),v._v(" "),_("p",[v._v("功能分析：")]),v._v(" "),_("p",[v._v("​\t使用内嵌tomcat作为servlet容器，")]),v._v(" "),_("p",[v._v("​\t打开IOC扫描，后置处理器，IOC取出处理器   处理器")]),v._v(" "),_("p",[v._v("​\tspring注解：@Controller  普通的bean   Map<url，Object处理器>")]),v._v(" "),_("p",[v._v("​\tspringmvc注解：@RequestMapping  url")]),v._v(" "),_("p",[v._v("​\t处理器执行：")]),v._v(" "),_("p",[v._v("springmvc处理器类型：")]),v._v(" "),_("p",[v._v("@Controller   @RequestMapping(url)方法   反射执行   <url,method>  反射")]),v._v(" "),_("p",[v._v("servlet  service()  映射路径  /  if  else")]),v._v(" "),_("p",[v._v("Controller  handleRequest   (Controller)处理器 调用 handleRequest")]),v._v(" "),_("p",[v._v("HttpRequestHandler  handleRequest  (HttpRequestHandler)处理器 调用 handleRequest")]),v._v(" "),_("p",[v._v("​\t/beanName  ---\x3e  bean处理器  </id,处理器>")]),v._v(" "),_("p",[v._v("适配器：跟映射器一一对应    处理器是由适配器执行的")]),v._v(" "),_("p",[v._v("​\t统一的接口")]),v._v(" "),_("p",[v._v("​\t判断适配是否成功   Object处理器  instanseOf  Controller")]),v._v(" "),_("p",[v._v("​\t执行处理逻辑    (Controller)处理器 调用 handleRequest")]),v._v(" "),_("p",[v._v("json返回  User  序列化  @responseBody")]),v._v(" "),_("p",[v._v("参数绑定   @RequestParam（value）")]),v._v(" "),_("p",[v._v("不加注解：参数是怎么注入的")]),v._v(" "),_("p",[v._v("jdk7：asm")]),v._v(" "),_("p",[v._v("jdk8：可以通过反射获取参数名")]),v._v(" "),_("p",[v._v("国际化")]),v._v(" "),_("p",[v._v("异常")]),v._v(" "),_("p",[v._v("扩展")]),v._v(" "),_("p",[v._v("拦截器")]),v._v(" "),_("p",[v._v("过滤器")]),v._v(" "),_("p",[v._v("监听器")]),v._v(" "),_("p",[v._v("dubbo  SPI")]),v._v(" "),_("p",[v._v("Tomcat  SPI：服务发现机制")]),v._v(" "),_("p",[v._v("特定的目录(目录路径是定死的，相对路径  META-INF/service +  接口全限定名)下：实现类(字符串)")]),v._v(" "),_("p",[v._v("自定义类加载器：隔离应用")]),v._v(" "),_("p",[v._v("webapp目录：放多个war")]),v._v(" "),_("p",[v._v("JDK  SPI")]),v._v(" "),_("p",[v._v("自定义类加载器：打破双亲委派")]),v._v(" "),_("p",[v._v("spring SPI")]),v._v(" "),_("p",[v._v("servlet3.0的核心接口：ServletContainerInitializers接口  调用 onStartup")]),v._v(" "),_("p",[v._v("为什么需要这个接口？")]),v._v(" "),_("p",[v._v("springmvc启动：")]),v._v(" "),_("p",[v._v("1、启动tomcat")]),v._v(" "),_("p",[v._v("2、完成IOC创建  初始化  扫描")]),v._v(" "),_("p",[v._v("tomcat.sh --\x3e  webapp目录  war（spring）  servlet规范")]),v._v(" "),_("p",[v._v("ServletContainerInitializers接口实现类  任意jar")]),v._v(" "),_("p",[v._v("ServletContainerInitializers接口实现类放入standardContext全局变量initializers")]),v._v(" "),_("p",[v._v("​")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1618119/1605681520117-845c294c-cb80-409a-bf48-fda5a4c1c8ec.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_29%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1618119/1606107216572-c05aff9d-c903-4e83-8df8-0eb3e5343328.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})])])}),[],!1,null,null,null);_.default=p.exports}}]);