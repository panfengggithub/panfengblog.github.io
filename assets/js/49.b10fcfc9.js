(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{460:function(s,a,n){"use strict";n.r(a);var t=n(1),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"java基础一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java基础一"}},[s._v("#")]),s._v(" java基础一")]),s._v(" "),a("h2",{attrs:{id:"_1、面向对象的特征有哪些方面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、面向对象的特征有哪些方面"}},[s._v("#")]),s._v(" "),a("strong",[s._v("1、面向对象的特征有哪些方面？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("面向对象的特征主要有以下几个方面：\n 抽象：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽\n象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的\n细节是什么。\n 继承：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类\n被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。继承让\n变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要\n手段（如果不能理解请阅读阎宏博士的《Java 与模式》或《设计模式精解》中\n关于桥梁模式的部分）。\n 封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问\n只能通过已定义的接口。面向对象的本质就是将现实世界描绘成一系列完全自\n治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写\n一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，\n只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，\n明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是\n封装得足够好的，因为几个按键就搞定了所有的事情）。\n 多态性：多态性是指允许不同子类型的对象对同一消息作出不同的响应。\n简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分\n为编译时的多态性和运行时的多态性。如果将对象的方法视为对象向外界提供的\n服务，那么运行时的多态性可以解释为：当 A 系统访问 B 系统提供的服务时，B\n系统有多种提供服务的方式，但一切对 A 系统来说都是透明的（就像电动剃须\n刀是 A 系统，它的供电系统是 B 系统，B 系统可以使用电池供电或者用交流电，\n甚至还有可能是太阳能，A 系统只会通过 B 类对象调用供电的方法，但并不知道\n供电系统的底层实现是什么，究竟通过何种方式获得了动力）。方法重载\n（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）\n实现的是运行时的多态性（也称为后绑定）。运行时的多态是面向对象最精髓的\n东西，要实现多态需要做两件事：1). 方法重写（子类继承父类并重写父类中已\n有的或抽象的方法）；2). 对象造型（用父类型引用引用子类型对象，这样同样\n的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h2",{attrs:{id:"_2、访问修饰符-public-private-protected-以及不写-默认-时的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、访问修饰符-public-private-protected-以及不写-默认-时的区别"}},[s._v("#")]),s._v(" "),a("strong",[s._v("2、访问修饰符 public,private,protected,以及不写（默认）时的区别？")])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("修饰符")]),s._v(" "),a("th",[s._v("当前类")]),s._v(" "),a("th",[s._v("同包")]),s._v(" "),a("th",[s._v("子类")]),s._v(" "),a("th",[s._v("其他包")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("public")]),s._v(" "),a("td",[s._v("√")]),s._v(" "),a("td",[s._v("√")]),s._v(" "),a("td",[s._v("√")]),s._v(" "),a("td",[s._v("√")])]),s._v(" "),a("tr",[a("td",[s._v("protected")]),s._v(" "),a("td",[s._v("√")]),s._v(" "),a("td",[s._v("√")]),s._v(" "),a("td",[s._v("√")]),s._v(" "),a("td",[s._v("×")])]),s._v(" "),a("tr",[a("td",[s._v("default")]),s._v(" "),a("td",[s._v("√")]),s._v(" "),a("td",[s._v("√")]),s._v(" "),a("td",[s._v("×")]),s._v(" "),a("td",[s._v("×")])]),s._v(" "),a("tr",[a("td",[s._v("private")]),s._v(" "),a("td",[s._v("√")]),s._v(" "),a("td",[s._v("×")]),s._v(" "),a("td",[s._v("×")]),s._v(" "),a("td",[s._v("×")])])])]),s._v(" "),a("h2",{attrs:{id:"_3、string-是最基本的数据类型吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、string-是最基本的数据类型吗"}},[s._v("#")]),s._v(" "),a("strong",[s._v("3、String 是最基本的数据类型吗？")])]),s._v(" "),a("p",[s._v("不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、")]),s._v(" "),a("p",[s._v("char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference")]),s._v(" "),a("p",[s._v("type），Java 5 以后引入的枚举类型也算是一种比较特殊的引用类型。")]),s._v(" "),a("h2",{attrs:{id:"_4、float-f-3-4-是否正确"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、float-f-3-4-是否正确"}},[s._v("#")]),s._v(" "),a("strong",[s._v("4、float f=3.4;是否正确？")])]),s._v(" "),a("p",[s._v("答:不正确。3.4 是双精度数，将双精度型（double）赋值给浮点型（float）属于")]),s._v(" "),a("p",[s._v("下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换")]),s._v(" "),a("p",[s._v("float f =(float)3.4; 或者写成 float f =3.4F;。")]),s._v(" "),a("h2",{attrs:{id:"_5、short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗"}},[s._v("#")]),s._v(" "),a("strong",[s._v("5、short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1；有错吗？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("对于 short s1 = 1; s1 = s1 + 1;由于 1 是 int 类型，因此 s1+1 运算结果也是 int")]),s._v(" "),a("p",[s._v("型，需要强制转换类型才能赋值给 short 型。而 short s1 = 1; s1 += 1;可以正确")]),s._v(" "),a("p",[s._v("编译，因为 s1+= 1;相当于 s1 = (short)(s1 + 1);其中有隐含的强制类型转换。")]),s._v(" "),a("h2",{attrs:{id:"_6、java-有没有-goto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、java-有没有-goto"}},[s._v("#")]),s._v(" "),a("strong",[s._v("6、Java 有没有 goto？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("goto 是 Java 中的保留字，在目前版本的 Java 中没有使用。（根据 James Gosling")]),s._v(" "),a("p",[s._v("（Java 之父）编写的《The Java Programming Language》一书的附录中给出")]),s._v(" "),a("p",[s._v("了一个 Java 关键字列表，其中有 goto 和 const，但是这两个是目前无法使用的")]),s._v(" "),a("p",[s._v("关键字，因此有些地方将其称之为保留字，其实保留字这个词应该有更广泛的意")]),s._v(" "),a("p",[s._v("义，因为熟悉 C 语言的程序员都知道，在系统类库中使用过的有特殊意义的单词")]),s._v(" "),a("p",[s._v("或单词的组合都被视为保留字）")]),s._v(" "),a("h2",{attrs:{id:"_7、int-和-integer-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、int-和-integer-有什么区别"}},[s._v("#")]),s._v(" "),a("strong",[s._v("7、int 和 Integer 有什么区别？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Java 是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本\n数据类型，但是为了能够将这些基本数据类型当成对象操作，Java 为每一个基本\n数据类型都引入了对应的包装类型（wrapper class），int 的包装类就是 Integer，\n从 Java 5 开始引入了自动装箱/拆箱机制，使得二者可以相互转换。\nJava 为每个原始类型提供了包装类型：\n 原始类型: boolean，char，byte，short，int，long，float，double\n 包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，\nDouble\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_8、-和-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、-和-的区别"}},[s._v("#")]),s._v(" "),a("strong",[s._v("8、&和&&的区别？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("&运算符有两种用法：(1)按位与；(2)逻辑与。&&运算符是短路与运算。逻辑与\n跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是\ntrue 整个表达式的值才是 true。&&之所以称为短路运算是因为，如果&&左边的\n表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我\n们可能都需要用&&而不是&，例如在验证用户登录时判定用户名不是 null 而且不\n是空字符串，应当写为：username != null &&!username.equals(“”)，二者\n的顺序不能交换，更不能用&运算符，因为第一个条件如果不成立，根本不能进行\n字符串的 equals 比较，否则会产生 NullPointerException 异常。注意：逻辑或\n运算符（|）和短路或运算符（||）的差别也是如此。\n补充：如果你熟悉 JavaScript，那你可能更能感受到短路运算的强大，想成为\nJavaScript 的高手就先从玩转短路运算开始吧。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"_9、解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("9、解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的\n现场保存都使用 JVM 中的栈空间；而通过 new 关键字和构造器创建的对象则放在\n堆空间，堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收\n集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为 Eden、\nSurvivor（又可分为 From Survivor 和 To Survivor）、Tenured；方法区和堆都\n是各个线程共享的内存区域，用于存储已经被 JVM 加载的类信息、常量、静态变\n量、JIT 编译器编译后的代码等数据；程序中的字面量（literal）如直接书写的 100、”\nhello”和常量都是放在常量池中，常量池是方法区的一部分，。栈空间操作起来\n最快但是栈很小，通常大量的对象都是放在堆空间，栈和堆的大小都可以通过 JVM\n的启动参数来进行调整，栈空间用光了会引发 StackOverflowError，而堆和常量\n池空间不足则会引发 OutOfMemoryError。\nString str = new String("hello");\n上面的语句中变量 str 放在栈上，用 new 创建出来的字符串对象放在堆上，而”\nhello”这个字面量是放在方法区的。\n补充 1：较新版本的 Java（从 Java 6 的某个更新开始）中，由于 JIT 编译器的发\n展和”逃逸分析”技术的逐渐成熟，栈上分配、标量替换等优化技术使得对象一\n定分配在堆上这件事情已经变得不那么绝对了。\n补充 2：运行时常量池相当于 Class 文件常量池具有动态性，Java 语言并不要求\n常量一定只有编译期间才能产生，运行期间也可以将新的常量放入池中，String\n类的 intern()方法就是这样的。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h2",{attrs:{id:"_10、math-round-11-5-等于多少-math-round-11-5-等于多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、math-round-11-5-等于多少-math-round-11-5-等于多少"}},[s._v("#")]),s._v(" "),a("strong",[s._v("10、Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("Math.round(11.5)的返回值是 12，Math.round(-11.5)的返回值是-11。四舍五")]),s._v(" "),a("p",[s._v("入的原理是在参数上加 0.5 然后进行下取整。")]),s._v(" "),a("h2",{attrs:{id:"_11、switch-是否能作用在-byte-上-是否能作用在-long-上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、switch-是否能作用在-byte-上-是否能作用在-long-上"}},[s._v("#")]),s._v(" "),a("strong",[s._v("11、switch 是否能作用在 byte 上，是否能作用在 long 上，")])]),s._v(" "),a("p",[a("strong",[s._v("是否能作用在 String 上？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("在 Java 5 以前，switch(expr)中，expr 只能是 byte、short、char、int。从 Java")]),s._v(" "),a("p",[s._v("5 开始，Java 中引入了枚举类型，expr 也可以是 enum 类型，从 Java 7 开始，")]),s._v(" "),a("p",[s._v("expr 还可以是字符串（String），但是长整型（long）在目前所有的版本中都是")]),s._v(" "),a("p",[s._v("不可以的。")]),s._v(" "),a("h2",{attrs:{id:"_12、用最有效率的方法计算-2-乘以-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12、用最有效率的方法计算-2-乘以-8"}},[s._v("#")]),s._v(" "),a("strong",[s._v("12、用最有效率的方法计算 2 乘以 8？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("2 << 3（左移 3 位相当于乘以 2 的 3 次方，右移 3 位相当于除以 2 的 3 次方）。")]),s._v(" "),a("h2",{attrs:{id:"_13、数组有没有-length-方法-string-有没有-length-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13、数组有没有-length-方法-string-有没有-length-方法"}},[s._v("#")]),s._v(" "),a("strong",[s._v("13、数组有没有 length()方法？String 有没有 length()方法？")])]),s._v(" "),a("p",[s._v("数组没有 length()方法，有 length 的属性。String 有 length()方法。JavaScript")]),s._v(" "),a("p",[s._v("中，获得字符串的长度是通过 length 属性得到的，这一点容易和 Java 混淆。")]),s._v(" "),a("h2",{attrs:{id:"_14、在-java-中-如何跳出当前的多重嵌套循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14、在-java-中-如何跳出当前的多重嵌套循环"}},[s._v("#")]),s._v(" "),a("strong",[s._v("14、在 Java 中，如何跳出当前的多重嵌套循环？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("在最外层循环前加一个标记如 A，然后用 break A;可以跳出多重循环。（Java 中")]),s._v(" "),a("p",[s._v("支持带标签的 break 和 continue 语句，作用有点类似于 C 和 C++中的 goto 语")]),s._v(" "),a("p",[s._v("句，但是就像要避免使用 goto 一样，应该避免使用带标签的 break 和 continue，")]),s._v(" "),a("p",[s._v("因为它不会让你的程序变得更优雅，很多时候甚至有相反的作用，所以这种语法")]),s._v(" "),a("p",[s._v("其实不知道更好）")]),s._v(" "),a("h2",{attrs:{id:"_15、构造器-constructor-是否可被重写-override"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15、构造器-constructor-是否可被重写-override"}},[s._v("#")]),s._v(" "),a("strong",[s._v("15、构造器（constructor）是否可被重写（override）？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("构造器不能被继承，因此不能被重写，但可以被重载。")]),s._v(" "),a("h2",{attrs:{id:"_16、两个对象值相同-x-equals-y-true-但却可有不同的hash-code-这句话对不对"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16、两个对象值相同-x-equals-y-true-但却可有不同的hash-code-这句话对不对"}},[s._v("#")]),s._v(" "),a("strong",[s._v("16、两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("不对，如果两个对象 x 和 y 满足 x.equals(y) == true，它们的哈希码（hash code）\n应当相同。Java 对于 eqauls 方法和 hashCode 方法是这样规定的：(1)如果两个\n对象相同（equals 方法返回 true），那么它们的 hashCode 值一定要相同；(2)\n如果两个对象的 hashCode 相同，它们并不一定相同。当然，你未必要按照要求\n去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现\n在 Set 集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，\n如果哈希码频繁的冲突将会造成存取性能急剧下降）。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"_17、是否可以继承-string-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17、是否可以继承-string-类"}},[s._v("#")]),s._v(" "),a("strong",[s._v("17、是否可以继承 String 类？")])]),s._v(" "),a("p",[s._v("String 类是 final 类，不可以被继承。")]),s._v(" "),a("p",[s._v("**补充：**继承 String 本身就是一个错误的行为，对 String 类型最好的重用方式是关")]),s._v(" "),a("p",[s._v("联关系（Has-A）和依赖关系（Use-A）而不是继承关系（Is-A）。")]),s._v(" "),a("h2",{attrs:{id:"_18、当一个对象被当作参数传递到一个方法后-此方法可改变这个对象的属性-并可返回变化后的结果-那么这里到底是值传递还是引用传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18、当一个对象被当作参数传递到一个方法后-此方法可改变这个对象的属性-并可返回变化后的结果-那么这里到底是值传递还是引用传递"}},[s._v("#")]),s._v(" "),a("strong",[s._v("18、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("是值传递。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个\n参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调\n用过程中被改变，但对对象引用的改变是不会影响到调用者的。C++和 C#中可以\n通过传引用或传输出参数来改变传入的参数的值。在 C#中可以编写如下所示的代\n码，但是在 Java 中却做不到。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"_19、string-和-stringbuilder、stringbuffer-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19、string-和-stringbuilder、stringbuffer-的区别"}},[s._v("#")]),s._v(" "),a("strong",[s._v("19、String 和 StringBuilder、StringBuffer 的区别？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Java 平台提供了两种类型的字符串：String 和 StringBuffer/StringBuilder，它\n们可以储存和操作字符串。其中 String 是只读字符串，也就意味着 String 引用的\n字符串内容是不能被改变的。而 StringBuffer/StringBuilder 类表示的字符串对象\n可以直接进行修改。StringBuilder 是 Java 5 中引入的，它和 StringBuffer 的方\n法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被\nsynchronized 修饰，因此它的效率也比 StringBuffer 要高。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"_20、重载-overload-和重写-override-的区别。重载的方法能否根据返回类型进行区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20、重载-overload-和重写-override-的区别。重载的方法能否根据返回类型进行区分"}},[s._v("#")]),s._v(" "),a("strong",[s._v("20、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，\n而后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同\n的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写\n发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返\n回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里\n氏代换原则）。重载对返回类型没有特殊的要求。\n面试题：华为的面试题中曾经问过这样一个问题 - “为什么不能根据返回类型来\n区分重载”，快说出你的答案吧！\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_21、描述一下-jvm-加载-class-文件的原理机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21、描述一下-jvm-加载-class-文件的原理机制"}},[s._v("#")]),s._v(" "),a("strong",[s._v("21、描述一下 JVM 加载 class 文件的原理机制？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("JVM 中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java 中的\n类加载器是一个重要的 Java 运行时系统组件，它负责在运行时查找和装入类文件\n中的类。\n由于 Java 的跨平台性，经过编译的 Java 源程序并不是一个可执行程序，而是一\n个或多个类文件。当 Java 程序需要使用某个类时，JVM 会确保这个类已经被加载、\n连接（验证、准备和解析）和初始化。类的加载是指把类的.class 文件中的数据读\n入到内存中，通常是创建一个字节数组读入.class 文件，然后产生与所加载类对应\n的 Class 对象。加载完成后，Class 对象还不完整，所以此时的类还不可用。当类\n被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设\n置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后 JVM 对\n类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么\n就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。\n类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加\n载器（Extension）、系统加载器（System）和用户自定义类加载器\n（java.lang.ClassLoader 的子类）。从 Java 2（JDK 1.2）开始，类加载过程采\n取了父亲委托机制（PDM）。PDM 更好的保证了 Java 平台的安全性，在该机制\n中，JVM 自带的 Bootstrap 是根加载器，其他的加载器都有且仅有一个父类加载\n器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载\n器自行加载。JVM 不会向 Java 程序提供对 Bootstrap 的引用。下面是关于几个类\n加载器的说明：\n Bootstrap：一般用本地代码实现，负责加载 JVM 基础核心类库（rt.jar）；\n Extension：从 java.ext.dirs 系统属性所指定的目录中加载类库，它的父\n加载器是 Bootstrap；\n System：又叫应用类加载器，其父类是 Extension。它是应用最广泛的\n类加载器。它从环境变量 classpath 或者系统属性 java.class.path 所指定的目\n录中记载类，是用户自定义加载器的默认父加载器。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("h2",{attrs:{id:"_22、char-型变量中能不能存贮一个中文汉字-为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22、char-型变量中能不能存贮一个中文汉字-为什么"}},[s._v("#")]),s._v(" "),a("strong",[s._v("22、char 型变量中能不能存贮一个中文汉字，为什么？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("char 类型可以存储一个中文汉字，因为 Java 中使用的编码是 Unicode（不选择\n任何特定的编码，直接使用字符在字符集中的编号，这是统一的唯一方法），一\n个 char 类型占 2 个字节（16 比特），所以放一个中文是没问题的。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"_23、抽象类-abstract-class-和接口-interface-有什么异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23、抽象类-abstract-class-和接口-interface-有什么异同"}},[s._v("#")]),s._v(" "),a("strong",[s._v("23、抽象类（abstract class）和接口（interface）有什么异同？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如\n果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实\n现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中\n可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其\n中的方法全部都是抽象方法。抽象类中的成员可以是 private、默认、protected、\npublic 的，而接口中的成员全都是 public 的。抽象类中可以定义成员变量，而接\n口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而\n抽象类未必要有抽象方法。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_24、静态嵌套类-static-nested-class-和内部类-inner-class-的不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24、静态嵌套类-static-nested-class-和内部类-inner-class-的不同"}},[s._v("#")]),s._v(" "),a("strong",[s._v("24、静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Static Nested Class 是被声明为静态（static）的内部类，它可以不依赖于外部类\n实例被实例化。而通常的内部类需要在外部类实例化后才能实例化，其语法看起\n来挺诡异的，如下所示。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"_25、java-中会存在内存泄漏吗-请简单描述。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25、java-中会存在内存泄漏吗-请简单描述。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("25、Java 中会存在内存泄漏吗，请简单描述。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("理论上 Java 因为有垃圾回收机制（GC）不会存在内存泄露问题（这也是 Java 被\n广泛使用于服务器端编程的一个重要原因）；然而在实际开发中，可能会存在无\n用但可达的对象，这些对象不能被 GC 回收，因此也会导致内存泄露的发生。例如\nHibernate 的 Session（一级缓存）中的对象属于持久态，垃圾回收器是不会回收\n这些对象的，然而这些对象中可能存在无用的垃圾对象，如果不及时关闭（close）\n或清空（flush）一级缓存就可能导致内存泄露。下面例子中的代码也会导致内存\n泄露。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"_26、抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized修饰"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26、抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized修饰"}},[s._v("#")]),s._v(" "),a("strong",[s._v("26、抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被 synchronized修饰？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("都不能。抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛\n盾的。本地方法是由本地代码（如 C 代码）实现的方法，而抽象方法是没有实现\n的，也是矛盾的。synchronized 和方法的实现细节有关，抽象方法不涉及实现细\n节，因此也是相互矛盾的。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"_27、阐述静态变量和实例变量的区别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27、阐述静态变量和实例变量的区别。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("27、阐述静态变量和实例变量的区别。")])]),s._v(" "),a("p",[s._v("静态变量是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的")]),s._v(" "),a("p",[s._v("任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷")]),s._v(" "),a("p",[s._v("贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。")]),s._v(" "),a("p",[s._v("静态变量可以实现让多个对象共享内存。")]),s._v(" "),a("p",[s._v("**补充：**在 Java 开发中，上下文类和工具类中通常会有大量的静态成员。")]),s._v(" "),a("h2",{attrs:{id:"_28、是否可以从一个静态-static-方法内部发出对非静态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28、是否可以从一个静态-static-方法内部发出对非静态"}},[s._v("#")]),s._v(" "),a("strong",[s._v("28、是否可以从一个静态（static）方法内部发出对非静态")])]),s._v(" "),a("p",[a("strong",[s._v("（non-static）方法的调用？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("不可以，静态方法只能访问静态成员，因为非静态方法的调用要先创建对象，在")]),s._v(" "),a("p",[s._v("调用静态方法时可能对象并没有被初始化。")]),s._v(" "),a("h2",{attrs:{id:"_29、如何实现对象克隆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29、如何实现对象克隆"}},[s._v("#")]),s._v(" "),a("strong",[s._v("29、如何实现对象克隆？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("有两种方式：\n1). 实现 Cloneable 接口并重写 Object 类中的 clone()方法；\n2). 实现 Serializable 接口，通过对象的序列化和反序列化实现克隆，可以实现真\n正的深度克隆，代码如下。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"_30、gc-是什么-为什么要有-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30、gc-是什么-为什么要有-gc"}},[s._v("#")]),s._v(" "),a("strong",[s._v("30、GC 是什么？为什么要有 GC？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("GC 是垃圾收集的意思，内存处理是编程人员容易出现问题的地方，忘记或者错误\n的内存回收会导致程序或系统的不稳定甚至崩溃，Java 提供的 GC 功能可以自动\n监测对象是否超过作用域从而达到自动回收内存的目的，Java 语言没有提供释放\n已分配内存的显示操作方法。Java 程序员不用担心内存管理，因为垃圾收集器会\n自动进行管理。要请求垃圾收集，可以调用下面的方法之一：System.gc() 或\nRuntime.getRuntime().gc() ，但 JVM 可以屏蔽掉显示的垃圾回收调用。\n垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通\n常是作为一个单独的低优先级的线程运行，不可预知的情况下对内存堆中已经死\n亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回\n收器对某个对象或所有对象进行垃圾回收。在 Java 诞生初期，垃圾回收是 Java\n最大的亮点之一，因为服务器端的编程需要有效的防止内存泄露问题，然而时过\n境迁，如今 Java 的垃圾回收机制已经成为被诟病的东西。移动智能终端用户通常\n觉得 iOS 的系统比 Android 系统有更好的用户体验，其中一个深层次的原因就在\n于 Android 系统中垃圾回收的不可预知性。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"_31、string-s-new-string-xyz-创建了几个字符串对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31、string-s-new-string-xyz-创建了几个字符串对象"}},[s._v("#")]),s._v(" "),a("strong",[s._v("31、String s = new String(“xyz”);创建了几个字符串对象？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("两个对象，一个是静态区的”xyz”，一个是用 new 创建在堆上的对象。")]),s._v(" "),a("h2",{attrs:{id:"_32、接口是否可继承-extends-接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32、接口是否可继承-extends-接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class"}},[s._v("#")]),s._v(" "),a("strong",[s._v("32、接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("接口可以继承接口，而且支持多重继承。抽象类可以实现(implements)接口，抽")]),s._v(" "),a("p",[s._v("象类可继承具体类也可以继承抽象类。")]),s._v(" "),a("h2",{attrs:{id:"_33、一个-java-源文件中是否可以包含多个类-不是内部类-有什么限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33、一个-java-源文件中是否可以包含多个类-不是内部类-有什么限制"}},[s._v("#")]),s._v(" "),a("strong",[s._v("33、一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("可以，但一个源文件中最多只能有一个公开类（public class）而且文件名必须和")]),s._v(" "),a("p",[s._v("公开类的类名完全保持一致。")]),s._v(" "),a("h2",{attrs:{id:"_34、anonymous-inner-class-匿名内部类-是否可以继承其它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34、anonymous-inner-class-匿名内部类-是否可以继承其它"}},[s._v("#")]),s._v(" "),a("strong",[s._v("34、Anonymous Inner Class(匿名内部类)是否可以继承其它")])]),s._v(" "),a("p",[a("strong",[s._v("类？是否可以实现接口？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("可以继承其他类或实现其他接口，在 Swing 编程和 Android 开发中常用此方式来")]),s._v(" "),a("p",[s._v("实现事件监听和回调。")]),s._v(" "),a("h2",{attrs:{id:"_35、内部类可以引用它的包含类-外部类-的成员吗-有没有"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35、内部类可以引用它的包含类-外部类-的成员吗-有没有"}},[s._v("#")]),s._v(" "),a("strong",[s._v("35、内部类可以引用它的包含类（外部类）的成员吗？有没有")])]),s._v(" "),a("p",[a("strong",[s._v("什么限制？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("一个内部类对象可以访问创建它的外部类对象的成员，包括私有成员。")]),s._v(" "),a("h2",{attrs:{id:"_36、java-中的-final-关键字有哪些用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36、java-中的-final-关键字有哪些用法"}},[s._v("#")]),s._v(" "),a("strong",[s._v("36、Java 中的 final 关键字有哪些用法？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("(1)修饰类：表示该类不能被继承；(2)修饰方法：表示方法不能被重写；(3)修饰变")]),s._v(" "),a("p",[s._v("量：表示变量只能一次赋值以后值不能被修改（常量）。")]),s._v(" "),a("h2",{attrs:{id:"_37、指出下面程序的运行结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37、指出下面程序的运行结果"}},[s._v("#")]),s._v(" "),a("strong",[s._v("37、指出下面程序的运行结果")])]),s._v(" "),a("p",[s._v("创建对象时构造器的调用顺序是：先初始化静态成员，然后")]),s._v(" "),a("p",[s._v("调用父类构造器，再初始化非静态成员，最后调用自身构造器。")]),s._v(" "),a("h2",{attrs:{id:"_38、数据类型之间的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38、数据类型之间的转换"}},[s._v("#")]),s._v(" "),a("strong",[s._v("38、数据类型之间的转换：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("如何将字符串转换为基本数据类型？\n 如何将基本数据类型转换为字符串？\n答：\n 调用基本数据类型对应的包装类中的方法 parseXXX(String)或\nvalueOf(String)即可返回相应基本类型；\n一种方法是将基本数据类型与空字符串（”“）连接（+）即可获得其所\n对应的字符串；另一种方法是调用 String 类中的 valueOf()方法返回相应字符\n串\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_39、如何实现字符串的反转及替换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39、如何实现字符串的反转及替换"}},[s._v("#")]),s._v(" "),a("strong",[s._v("39、如何实现字符串的反转及替换？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("方法很多，可以自己写实现也可以使用 String 或 StringBuffer/StringBuilder 中\n的方法。有一道很常见的面试题是用递归实现字符串反转，代码如下所示：\npublic static String reverse(String originStr) {\nif(originStr == null || originStr.length() <= 1)\nreturn originStr;\nreturn reverse(originStr.substring(1)) + originStr.charAt(0);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"_40、怎样将-gb2312-编码的字符串转换为-iso-8859-1-编码的字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40、怎样将-gb2312-编码的字符串转换为-iso-8859-1-编码的字符串"}},[s._v("#")]),s._v(" "),a("strong",[s._v("40、怎样将 GB2312 编码的字符串转换为 ISO-8859-1 编码的字符串？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("代码如下所示：")]),s._v(" "),a("p",[s._v('String s1 = "你好";')]),s._v(" "),a("p",[s._v('String s2 = new String(s1.getBytes("GB2312"), "ISO-8859-1");')]),s._v(" "),a("h2",{attrs:{id:"_41、日期和时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_41、日期和时间"}},[s._v("#")]),s._v(" "),a("strong",[s._v("41、日期和时间：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('如何取得年月日、小时分钟秒？\n 如何取得从 1970 年 1 月 1 日 0 时 0 分 0 秒到现在的毫秒数？\n 如何取得某月的最后一天？\n 如何格式化日期？\n答：\n问题 1：创建 java.util.Calendar 实例，调用其 get()方法传入不同的参数即可获\n得参数所对应的值。Java 8 中可以使用 java.time.LocalDateTimel 来获取，代码\n如下所示。\npublic class DateTimeTest {\npublic static void main(String[] args) {\nCalendar cal = Calendar.getInstance();\nSystem.out.println(cal.get(Calendar.YEAR));\nSystem.out.println(cal.get(Calendar.MONTH)); // 0 - 11\nSystem.out.println(cal.get(Calendar.DATE));\nSystem.out.println(cal.get(Calendar.HOUR_OF_DAY));\nSystem.out.println(cal.get(Calendar.MINUTE));\nSystem.out.println(cal.get(Calendar.SECOND));\n// Java 8\nLocalDateTime dt = LocalDateTime.now();\nSystem.out.println(dt.getYear());\nSystem.out.println(dt.getMonthValue()); // 1 - 12\nSystem.out.println(dt.getDayOfMonth());\nSystem.out.println(dt.getHour());\nSystem.out.println(dt.getMinute());\nSystem.out.println(dt.getSecond());\n}\n}\n问题 2：以下方法均可获得该毫秒数。\nCalendar.getInstance().getTimeInMillis();\nSystem.currentTimeMillis();\nClock.systemDefaultZone().millis(); // Java 8\n问题 3：代码如下所示。\nCalendar time = Calendar.getInstance();\ntime.getActualMaximum(Calendar.DAY_OF_MONTH);\n问题 4：利用 java.text.DataFormat 的子类（如 SimpleDateFormat 类）中的\nformat(Date)方法可将日期格式化。Java 8 中可以用\njava.time.format.DateTimeFormatter 来格式化时间日期，代码如下所示。\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Date;\nclass DateFormatTest {\npublic static void main(String[] args) {\nSimpleDateFormat oldFormatter = new\nSimpleDateFormat("yyyy/MM/dd");\nDate date1 = new Date();\nSystem.out.println(oldFormatter.format(date1));\n// Java 8\nDateTimeFormatter newFormatter =\nDateTimeFormatter.ofPattern("yyyy/MM/dd");\nLocalDate date2 = LocalDate.now();\nSystem.out.println(date2.format(newFormatter));\n}\n}\n补充：Java 的时间日期 API 一直以来都是被诟病的东西，为了解决这一问题，Java\n8 中引入了新的时间日期 API，其中包括 LocalDate、LocalTime、LocalDateTime、\nClock、Instant 等类，这些的类的设计都使用了不变模式，因此是线程安全的设\n计。如果不理解这些内容，可以参考我的另一篇文章《关于 Java 并发编程的总结\n和思考》。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br")])]),a("h2",{attrs:{id:"_42、打印昨天的当前时刻。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_42、打印昨天的当前时刻。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("42、打印昨天的当前时刻。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import java.util.Calendar;\nclass YesterdayCurrent {\npublic static void main(String[] args){\nCalendar cal = Calendar.getInstance();\ncal.add(Calendar.DATE, -1);\nSystem.out.println(cal.getTime());\n}\n}\nimport java.time.LocalDateTime;\nclass YesterdayCurrent {\npublic static void main(String[] args) {\nLocalDateTime today = LocalDateTime.now();\nLocalDateTime yesterday = today.minusDays(1);\nSystem.out.println(yesterday);\n}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"_43、比较一下-java-和-javasciprt。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_43、比较一下-java-和-javasciprt。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("43、比较一下 Java 和 JavaSciprt。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("JavaScript 与 Java 是两个公司开发的不同的两个产品。Java 是原 Sun\nMicrosystems 公司推出的面向对象的程序设计语言，特别适合于互联网应用程序\n开发；而 JavaScript 是 Netscape 公司的产品，为了扩展 Netscape 浏览器的功\n能而开发的一种可以嵌入 Web 页面中运行的基于对象和事件驱动的解释性语言。\nJavaScript 的前身是 LiveScript；而 Java 的前身是 Oak 语言\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"_44、什么时候用断言-assert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_44、什么时候用断言-assert"}},[s._v("#")]),s._v(" "),a("strong",[s._v("44、什么时候用断言（assert）？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("断言在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。一\n般来说，断言用于保证程序最基本、关键的正确性。断言检查通常在开发和测试\n时开启。为了保证程序的执行效率，在软件发布后断言检查通常是关闭的。断言\n是一个包含布尔表达式的语句，在执行这个语句时假定该表达式为 true；如果表\n达式的值为 false，那么系统会报告一个 AssertionError。断\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"_45、error-和-exception-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_45、error-和-exception-有什么区别"}},[s._v("#")]),s._v(" "),a("strong",[s._v("45、Error 和 Exception 有什么区别？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Error 表示系统级的错误和程序不必处理的异常，是恢复不是不可能但很困难的情\n况下的一种严重问题；比如内存溢出，不可能指望程序能处理这样的情况；\nException 表示需要捕捉或者需要程序进行处理的异常，是一种设计或实现问题；\n也就是说，它表示如果程序运行正常，从不会发生的情况。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"_46、try-里有一个-return-语句-那么紧跟在这个-try-后的finally-里的代码会不会被执行-什么时候被执行-在-return前还是后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_46、try-里有一个-return-语句-那么紧跟在这个-try-后的finally-里的代码会不会被执行-什么时候被执行-在-return前还是后"}},[s._v("#")]),s._v(" "),a("strong",[s._v("46、try{}里有一个 return 语句，那么紧跟在这个 try 后的finally{}里的代码会不会被执行，什么时候被执行，在 return前还是后?")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("会执行，在方法返回调用者前执行。\n注意：在 finally 中改变返回值的做法是不好的，因为如果存在 finally 代码块，try\n中的 return 语句不会立马返回调用者，而是记录下返回值待 finally 代码块执行完\n毕之后再向调用者返回其值，然后如果在 finally 中修改了返回值，就会返回修改\n后的值。显然，在 finally 中返回或者修改返回值会对程序造成很大的困扰，C#中\n直接用编译错误的方式来阻止程序员干这种龌龊的事情，Java 中也可以通过提升\n编译器的语法检查级别来产生警告或错误，Eclipse 中可以在如图所示的地方进行\n设置，强烈建议将此项设置为编译错误。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_47、java-语言如何进行异常处理-关键字-throws、throw、try、catch、finally-分别如何使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_47、java-语言如何进行异常处理-关键字-throws、throw、try、catch、finally-分别如何使用"}},[s._v("#")]),s._v(" "),a("strong",[s._v("47、Java 语言如何进行异常处理，关键字：throws、throw、try、catch、finally 分别如何使用？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Java 通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了\n良好的接口。在 Java 中，每个异常都是一个对象，它是 Throwable 类或其子类\n的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，\n调用这个对象的方法可以捕获到这个异常并可以对其进行处理。Java 的异常处理\n是通过 5 个关键词来实现的：try、catch、throw、throws 和 finally。一般情况\n下是用 try 来执行一段程序，如果系统会抛出（throw）一个异常对象，可以通过\n它的类型来捕获（catch）它，或通过总是执行代码块（finally）来处理；try 用\n来指定一块预防所有异常的程序；catch 子句紧跟在 try 块后面，用来指定你想要\n捕获的异常的类型；throw 语句用来明确地抛出一个异常；throws 用来声明一个\n方法可能抛出的各种异常（当然声明异常时允许无病呻吟）；finally 为确保一段\n代码不管发生什么异常状况都要被执行；try 语句可以嵌套，每当遇到一个 try 语\n句，异常的结构就会被放入异常栈中，直到所有的 try 语句都完成。如果下一级的\ntry 语句没有对某种异常进行处理，异常栈就会执行出栈操作，直到遇到有处理这\n种异常的 try 语句或者最终将异常抛给 JVM。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"_48、运行时异常与受检异常有何异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_48、运行时异常与受检异常有何异同"}},[s._v("#")]),s._v(" "),a("strong",[s._v("48、运行时异常与受检异常有何异同？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常\n操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就\n不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可\n能因使用的问题而引发。Java 编译器要求方法必须声明抛出可能发生的受检异常，\n但是并不要求必须声明抛出未被捕获的运行时异常。异常和继承一样，是面向对\n象程序设计中经常被滥用的东西\n 不要将异常处理用于正常的控制流（设计良好的 API 不应该强迫它的调\n用者为了正常的控制流而使用异常）\n 对可以恢复的情况使用受检异常，对编程错误使用运行时异常\n 避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发\n生）\n优先使用标准的异常\n 每个方法抛出的异常都要有文档\n 保持异常的原子性\n 不要在 catch 中忽略掉捕获到的异常\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"_49、列出一些你常见的运行时异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_49、列出一些你常见的运行时异常"}},[s._v("#")]),s._v(" "),a("strong",[s._v("49、列出一些你常见的运行时异常？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ArithmeticException（算术异常）\n ClassCastException （类转换异常）\n IllegalArgumentException （非法参数异常）\n IndexOutOfBoundsException （下标越界异常）\n NullPointerException （空指针异常）\n SecurityException （安全异常）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"_50、阐述-final、finally、finalize-的区别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_50、阐述-final、finally、finalize-的区别。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("50、阐述 final、finally、finalize 的区别。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("final：修饰符（关键字）有三种用法：如果一个类被声明为 final，意味\n着它不能再派生出新的子类，即不能被继承，因此它和 abstract 是反义词。将\n变量声明为 final，可以保证它们在使用中不被改变，被声明为 final 的变量必须\n在声明时给定初值，而在以后的引用中只能读取不可修改。被声明为 final 的方\n法也同样只能使用，不能在子类中被重写。\nfinally：通常放在 try…catch…的后面构造总是执行代码块，这就意味着\n程序无论正常执行还是发生异常，这里的代码只要 JVM 不关闭都能执行，可以\n将释放外部资源的代码写在 finally 块中。\n finalize：Object 类中定义的方法，Java 中允许使用 finalize()方法在垃\n圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收\n集器在销毁对象时调用的，通过重写 finalize()方法可以整理系统资源或者执行\n其他清理工作。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"_51、类-examplea-继承-exception-类-exampleb-继承examplea。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_51、类-examplea-继承-exception-类-exampleb-继承examplea。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("51、类 ExampleA 继承 Exception，类 ExampleB 继承ExampleA。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('try {\nthrow new ExampleB("b")\n} catch（ExampleA e）{\nSystem.out.println("ExampleA");\n} catch（Exception e）{\nSystem.out.println("Exception");\n}\n**请问执行此段代码的输出是什么？\n答：\n输出：ExampleA。（根据里氏代换原则[能使用父类型的地方一定能使用子类型]，\n抓取 ExampleA 类型异常的 catch 块能够抓住 try 块中抛出的 ExampleB 类型的\n异常）\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"_52、list、set、map-是否继承自-collection-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_52、list、set、map-是否继承自-collection-接口"}},[s._v("#")]),s._v(" "),a("strong",[s._v("52、List、Set、Map 是否继承自 Collection 接口？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("List、Set 是，Map 不是。Map 是键值对映射容器，与 List 和 Set 有明显的区别，\n而 Set 存储的零散的元素且不允许有重复元素（数学中的集合也是如此），List\n是线性结构的容器，适用于按数值索引访问元素的情形\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"_53、阐述-arraylist、vector、linkedlist-的存储性能和特性。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_53、阐述-arraylist、vector、linkedlist-的存储性能和特性。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("53、阐述 ArrayList、Vector、LinkedList 的存储性能和特性。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ArrayList 和 Vector 都是使用数组方式存储数据，此数组元素数大于实际存储的\n数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉\n及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector 中的方法由\n于添加了 synchronized 修饰，因此 Vector 是线程安全的容器，但性能上较\nArrayList 差，因此已经是 Java 中的遗留容器。LinkedList 使用双向链表实现存\n储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索\n引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更\n高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本\n项的前后项即可，所以插入速度较快。Vector 属于遗留容器（Java 早期的版本中\n提供的容器，除此之外，Hashtable、Dictionary、BitSet、Stack、Properties\n都是遗留容器），已经不推荐使用，但是由于 ArrayList 和 LinkedListed 都是非\n线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类\nCollections 中的 synchronizedList 方法将其转换成线程安全的容器后再使用（这\n是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强\n实现）。\n补充：遗留容器中的 Properties 类和 Stack 类在设计上有严重的问题，Properties\n是一个键和值都是字符串的特殊的键值对映射，在设计上应该是关联一个\nHashtable 并将其两个泛型参数设置为 String 类型，但是 Java API 中的\nProperties 直接继承了 Hashtable，这很明显是对继承的滥用。这里复用代码的\n方式应该是 Has-A 关系而不是 Is-A 关系，另一方面容器都属于工具类，继承工具\n类本身就是一个错误的做法，使用工具类最好的方式是 Has-A 关系（关联）或\nUse-A 关系（依赖）。同理，Stack 类继承 Vector 也是不正确的。Sun 公司的工\n程师们也会犯这种低级错误，让人唏嘘不已。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h2",{attrs:{id:"_54、collection-和-collections-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_54、collection-和-collections-的区别"}},[s._v("#")]),s._v(" "),a("strong",[s._v("54、Collection 和 Collections 的区别？")])]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("Collection 是一个接口，它是 Set、List 等容器的父接口；Collections 是个一个")]),s._v(" "),a("p",[s._v("工具类，提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、")]),s._v(" "),a("p",[s._v("排序、线程安全化等等。")]),s._v(" "),a("h2",{attrs:{id:"_55、list、map、set-三个接口存取元素时-各有什么特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_55、list、map、set-三个接口存取元素时-各有什么特点"}},[s._v("#")]),s._v(" "),a("strong",[s._v("55、List、Map、Set 三个接口存取元素时，各有什么特点？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("List 以特定索引来存取元素，可以有重复元素。Set 不能存放重复元素（用对象的\nequals()方法来区分元素是否重复）。Map 保存键值对（key-value pair）映射，\n映射关系可以是一对一或多对一。Set 和 Map 容器都有基于哈希存储和排序树的\n两种实现版本，基于哈希存储的版本理论存取时间复杂度为 O(1)，而基于排序树\n版本的实现在插入或删除元素时会按照元素或元素的键（key）构成排序树从而达\n到排序和去重的效果。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"_56、treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_56、treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素"}},[s._v("#")]),s._v(" "),a("strong",[s._v("56、TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("答：\nTreeSet 要求存放的对象所属的类必须实现 Comparable 接口，该接口提供了比\n较元素的 compareTo()方法，当插入元素时会回调该方法比较元素的大小。\nTreeMap 要求存放的键值对映射的键必须实现 Comparable 接口从而根据键对元\n素进行排序。Collections 工具类的 sort 方法有两种重载的形式，第一种要求传入\n的待排序容器中存放的对象比较实现 Comparable 接口以实现元素的比较；第二\n种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是\nComparator 接口的子类型（需要重写 compare 方法实现元素的比较），相当于\n一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对\n回调模式的应用（Java 中对函数式编程的支持）。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"_57、thread-类的-sleep-方法和对象的-wait-方法都可以让线程暂停执行-它们有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_57、thread-类的-sleep-方法和对象的-wait-方法都可以让线程暂停执行-它们有什么区别"}},[s._v("#")]),s._v(" "),a("strong",[s._v("57、Thread 类的 sleep()方法和对象的 wait()方法都可以让线程暂停执行，它们有什么区别?")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程\n暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保\n持，因此休眠时间结束后会自动恢复（线程回到就绪状态，请参考第 66 题中的线\n程状态转换图）。wait()是 Object 类的方法，调用对象的 wait()方法导致当前线\n程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用\n对象的 notify()方法（或 notifyAll()方法）时才能唤醒等待池中的线程进入等锁池\n（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"_58、线程的-sleep-方法和-yield-方法有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_58、线程的-sleep-方法和-yield-方法有什么区别"}},[s._v("#")]),s._v(" "),a("strong",[s._v("58、线程的 sleep()方法和 yield()方法有什么区别？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("① sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的\n线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的\n机会；\n② 线程执行 sleep()方法后转入阻塞（blocked）状态，而执行 yield()方法后转\n入就绪（ready）状态；\n③ sleep()方法声明抛出 InterruptedException，而 yield()方法没有声明任何异\n常；\n④ sleep()方法比 yield()方法（跟操作系统 CPU 调度相关）具有更好的可移植性\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_59、当一个线程进入一个对象的-synchronized-方法-a-之后-其它线程是否可进入此对象的-synchronized-方法-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_59、当一个线程进入一个对象的-synchronized-方法-a-之后-其它线程是否可进入此对象的-synchronized-方法-b"}},[s._v("#")]),s._v(" "),a("strong",[s._v("59、当一个线程进入一个对象的 synchronized 方法 A 之后，其它线程是否可进入此对象的 synchronized 方法 B？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("不能。其它线程只能访问该对象的非同步方法，同步方法则不能进入。因为非静\n态方法上的 synchronized 修饰符要求执行方法时要获得对象的锁，如果已经进入\nA 方法说明对象锁已经被取走，那么试图进入 B 方法的线程就只能在等锁池（注\n意不是等待池哦）中等待对象的锁。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"_60、请说出与线程同步以及线程调度相关的方法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_60、请说出与线程同步以及线程调度相关的方法。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("60、请说出与线程同步以及线程调度相关的方法。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；\n sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用\n此方法要处理 InterruptedException 异常；\n notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并\n不能确切的唤醒某一个等待状态的线程，而是由 JVM 确定唤醒哪个线程，而且\n与优先级无关；\n notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给\n所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_61、编写多线程程序有几种实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_61、编写多线程程序有几种实现方式"}},[s._v("#")]),s._v(" "),a("strong",[s._v("61、编写多线程程序有几种实现方式？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Java 5 以前实现多线程有两种实现方法：一种是继承 Thread 类；另一种是实现\nRunnable 接口。两种方式都要通过重写 run()方法来定义线程的行为，推荐使用\n后者，因为 Java 中的继承是单继承，一个类有一个父类，如果继承了 Thread 类\n就无法再继承其他类了，显然使用 Runnable 接口更为灵活。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"_62、synchronized-关键字的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_62、synchronized-关键字的用法"}},[s._v("#")]),s._v(" "),a("strong",[s._v("62、synchronized 关键字的用法？")])]),s._v(" "),a("p",[s._v("synchronized 关键字可以将对象或者方法标记为同步，以实现对对象和方法的互")]),s._v(" "),a("p",[s._v("斥访问，可以用 synchronized(对象) { … }定义同步代码块，或者在声明方法时")]),s._v(" "),a("p",[s._v("将 synchronized 作为方法的修饰符。在第 60 题的例子中已经展示了")]),s._v(" "),a("p",[s._v("synchronized 关键字的用法。")]),s._v(" "),a("h2",{attrs:{id:"_63、举例说明同步和异步。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_63、举例说明同步和异步。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("63、举例说明同步和异步。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("如果系统中存在临界资源（资源数量少于竞争资源的线程数量的资源），例如正\n在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线\n程写过了，那么这些数据就必须进行同步存取（数据库操作中的排他锁就是最好\n的例子）。当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并\n且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异\n步途径往往更有效率。事实上，所谓的同步就是指阻塞式操作，而异步就是非阻\n塞式操作。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"_64、启动一个线程是调用-run-还是-start-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_64、启动一个线程是调用-run-还是-start-方法"}},[s._v("#")]),s._v(" "),a("strong",[s._v("64、启动一个线程是调用 run()还是 start()方法？")])]),s._v(" "),a("p",[s._v("启动一个线程是调用 start()方法，使线程所代表的虚拟处理机处于可运行状态，")]),s._v(" "),a("p",[s._v("这意味着它可以由 JVM 调度并执行，这并不意味着线程就会立即运行。run()方")]),s._v(" "),a("p",[s._v("法是线程启动后要进行回调（callback）的方法。")]),s._v(" "),a("h2",{attrs:{id:"_65、什么是线程池-thread-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_65、什么是线程池-thread-pool"}},[s._v("#")]),s._v(" "),a("strong",[s._v("65、什么是线程池（thread pool）？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("在面向对象编程中，创建和销毁对象是很费时间的，因为创建一个对象要获取内\n存资源或者其它更多资源。在 Java 中更是如此，虚拟机将试图跟踪每一个对象，\n以便能够在对象销毁后进行垃圾回收。所以提高服务程序效率的一个手段就是尽\n可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这就\n是”池化资源”技术产生的原因。线程池顾名思义就是事先创建若干个可执行的\n线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，使用完\n毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销。\nJava 5+中的 Executor 接口定义一个执行线程的工具。它的子类型即线程池接口\n是 ExecutorService。要配置一个线程池是比较复杂的，尤其是对于线程池的原理\n不是很清楚的情况下，因此在工具类 Executors 面提供了一些静态工厂方法，生\n成一些常用的线程池\nnewSingleThreadExecutor：创建一个单线程的线程池。这个线程池只\n有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线\n程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执\n行顺序按照任务的提交顺序执行。\n newFixedThreadPool：创建固定大小的线程池。每次提交一个任务就创\n建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就\n会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n newCachedThreadPool：创建一个可缓存的线程池。如果线程池的大小\n超过了处理任务所需要的线程，那么就会回收部分空闲（60 秒不执行任务）的\n线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程\n池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说 JVM）\n能够创建的最大线程大小。\n newScheduledThreadPool：创建一个大小无限的线程池。此线程池支\n持定时以及周期性执行任务的需求。\n newSingleThreadExecutor：创建一个单线程的线程池。此线程池支持\n定时以及周期性执行任务的需求。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("h2",{attrs:{id:"_67、简述-synchronized-和-java-util-concurrent-locks-lock的异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_67、简述-synchronized-和-java-util-concurrent-locks-lock的异同"}},[s._v("#")]),s._v(" "),a("strong",[s._v("67、简述 synchronized 和 java.util.concurrent.locks.Lock的异同？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Lock 是 Java 5 以后引入的新的 API，和关键字 synchronized 相比主要相同点：\nLock 能完成 synchronized 所实现的所有功能；主要不同点：Lock 有比\nsynchronized 更精确的线程语义和更好的性能，而且不强制性的要求一定要获得\n锁。synchronized 会自动释放锁，而 Lock 一定要求程序员手工释放，并且最好\n在 finally 块中释放（这是释放外部资源的最好的地方）。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"_68、java-中如何实现序列化-有什么意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_68、java-中如何实现序列化-有什么意义"}},[s._v("#")]),s._v(" "),a("strong",[s._v("68、Java 中如何实现序列化，有什么意义？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流\n化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。\n序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会\n存在数据乱序的问题）。\n要实现序列化，需要让一个类实现 Serializable 接口，该接口是一个标识性接口，\n标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通\n过 writeObject(Object)方法就可以将实现对象写出（即保存其状态）；如果需要\n反序列化则可以用一个输入流建立对象输入流，然后通过 readObject 方法从流中\n读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"_69、java-中有几种类型的流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_69、java-中有几种类型的流"}},[s._v("#")]),s._v(" "),a("strong",[s._v("69、Java 中有几种类型的流？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("字节流和字符流。字节流继承于 InputStream、OutputStream，字符流继承于\nReader、Writer。在 java.io 包中还有许多其他的流，主要是为了提高性能和使\n用方便。关于 Java 的 I/O 需要注意的有两点：一是两种对称性（输入和输出的对\n称性，字节和字符的对称性）；二是两种设计模式（适配器模式和装潢模式）。\n另外 Java 中的流不同于 C#的是它只有一个维度一个方向。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"_70、写一个方法-输入一个文件名和一个字符串-统计这个字符串在这个文件中出现的次数。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_70、写一个方法-输入一个文件名和一个字符串-统计这个字符串在这个文件中出现的次数。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("70、写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import java.io.BufferedReader;\nimport java.io.FileReader;\npublic final class MyUtil {\n// 工具类中的方法都是静态方式访问的因此将构造器私有不允许创建对象\n(绝对好习惯)\nprivate MyUtil() {\nthrow new AssertionError();\n}\n/**\n* 统计给定文件中给定字符串的出现次数\n*\n* @param filename 文件名\n* @param word 字符串\n* @return 字符串在文件中出现的次数\n*/\npublic static int countWordInFile(String filename, String word) {\nint counter = 0;\ntry (FileReader fr = new FileReader(filename)) {\ntry (BufferedReader br = new BufferedReader(fr)) {\nString line = null;\nwhile ((line = br.readLine()) != null) {\nint index = -1;\nwhile (line.length() >= word.length() && (index =\nline.indexOf(word)) >= 0) {\ncounter++;\nline = line.substring(index + word.length());\n}\n}\n}\n} catch (Exception ex) {\nex.printStackTrace();\n}\nreturn counter;\n}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("h2",{attrs:{id:"_71、如何用-java-代码列出一个目录下所有的文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_71、如何用-java-代码列出一个目录下所有的文件"}},[s._v("#")]),s._v(" "),a("strong",[s._v("71、如何用 Java 代码列出一个目录下所有的文件？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import java.io.File;\nclass Test12 {\npublic static void main(String[] args) {\nFile f = new File("/Users/Hao/Downloads");\nfor(File temp : f.listFiles()) {\nif(temp.isFile()) {\nSystem.out.println(temp.getName());\n}\n}\n}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"_73、xml-文档定义有几种形式-它们之间有何本质区别-解析xml-文档有哪几种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_73、xml-文档定义有几种形式-它们之间有何本质区别-解析xml-文档有哪几种方式"}},[s._v("#")]),s._v(" "),a("strong",[s._v("73、XML 文档定义有几种形式？它们之间有何本质区别？解析XML 文档有哪几种方式？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("XML 文档定义分为 DTD 和 Schema 两种形式，二者都是对 XML 语法的约束，其\n本质区别在于 Schema 本身也是一个 XML 文件，可以被 XML 解析器解析，而且\n可以为 XML 承载的数据定义类型，约束能力较之 DTD 更强大。对 XML 的解析主\n要有 DOM（文档对象模型，Document Object Model）、SAX（Simple API for\nXML）和 StAX（Java 6 中引入的新的解析 XML 的方式，Streaming API for XML），\n其中 DOM 处理大型文件时其性能下降的非常厉害，这个问题是由 DOM 树结构占\n用的内存较多造成的，而且 DOM 解析方式必须在解析文件之前把整个文档装入内\n存，适合对 XML 的随机访问（典型的用空间换取时间的策略）；SAX 是事件驱动\n型的 XML 解析方式，它顺序读取 XML 文件，不需要一次全部装载整个文件。当\n遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，\n用户通过事件回调代码来处理 XML 文件，适合对 XML 的顺序访问；顾名思义，\nStAX 把重点放在流上，实际上 StAX 与其他解析方式的本质区别就在于应用程序\n能够把 XML 作为一个事件流来处理。将 XML 作为一组事件来处理的想法并不新\n颖（SAX 就是这样做的），但不同之处在于 StAX 允许应用程序代码把这些事件逐\n个拉出来，而不用提供在解析器方便时从解析器中接收事件的处理程序。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"_74、你在项目中哪些地方用到了-xml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_74、你在项目中哪些地方用到了-xml"}},[s._v("#")]),s._v(" "),a("strong",[s._v("74、你在项目中哪些地方用到了 XML？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("XML 的主要作用有两个方面：数据交换和信息配置。在做数据交换时，XML 将数\n据用标签组装成起来，然后压缩打包加密后通过网络传送给接收者，接收解密与\n解压缩后再从 XML 文件中还原相关信息进行处理，XML 曾经是异构系统间交换数\n据的事实标准，但此项功能几乎已经被 JSON（JavaScript Object Notation）取\n而代之。当然，目前很多软件仍然使用 XML 来存储配置信息，我们在很多项目中\n通常也会将作为配置信息的硬代码写在 XML 文件中，Java 的很多框架也是这么做\n的，而且这些框架都选择了 dom4j 作为处理 XML 的工具，因为 Sun 公司的官方\nAPI 实在不怎么好用。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_75、阐述-jdbc-操作数据库的步骤。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_75、阐述-jdbc-操作数据库的步骤。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("75、阐述 JDBC 操作数据库的步骤。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('下面的代码以连接本机的 Oracle 数据库为例，演示 JDBC 操作数据库的步骤。\n 加载驱动。\nClass.forName("oracle.jdbc.driver.OracleDriver");\n 创建连接。\nConnection con =\nDriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl",\n"scott", "tiger");\n 创建语句。\nPreparedStatement ps = con.prepareStatement("select * from emp\nwhere sal between ? and ?");\nps.setInt(1, 1000);\nps.setInt(2, 3000);\n 执行语句。\nResultSet rs = ps.executeQuery();\n第 298 页 共 485 页\n 处理结果。\nwhile(rs.next()) {\nSystem.out.println(rs.getInt("empno") + " - " +\nrs.getString("ename"));\n}\n 关闭资源。\nfinally {\nif(con != null) {\ntry {\ncon.close();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\n}\n提示：关闭外部资源的顺序应该和打开的顺序相反，也就是说先关闭 ResultSet、\n再关闭 Statement、在关闭 Connection。上面的代码只关闭了 Connection（连\n接），虽然通常情况下在关闭连接时，连接上创建的语句和打开的游标也会关闭，\n但不能保证总是如此，因此应该按照刚才说的顺序分别关闭。此外，第一步加载\n驱动在 JDBC 4.0 中是可以省略的（自动从类路径中加载驱动），但是我们建议保\n留。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("h2",{attrs:{id:"_76、statement-和-preparedstatement-有什么区别-哪个性能更好"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_76、statement-和-preparedstatement-有什么区别-哪个性能更好"}},[s._v("#")]),s._v(" "),a("strong",[s._v("76、Statement 和 PreparedStatement 有什么区别？哪个性能更好？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("与 Statement 相比，①PreparedStatement 接口代表预编译的语句，它主要的优\n势在于可以减少 SQL 的编译错误并增加 SQL 的安全性（减少 SQL 注射攻击的可\n能性）；②PreparedStatement 中的 SQL 语句是可以带参数的，避免了用字符串\n连接拼接 SQL 语句的麻烦和不安全；③当批量处理 SQL 或频繁执行相同的查询时，\nPreparedStatement 有明显的性能上的优势，由于数据库可以将编译优化后的\nSQL 语句缓存起来，下次执行相同结构的语句时就会很快（不用再次编译和生成\n执行计划）。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"_77、使用-jdbc-操作数据库时-如何提升读取数据的性能-如何提升更新数据的性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_77、使用-jdbc-操作数据库时-如何提升读取数据的性能-如何提升更新数据的性能"}},[s._v("#")]),s._v(" "),a("strong",[s._v("77、使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("要提升读取数据的性能，可以指定通过结果集（ResultSet）对象的 setFetchSize()\n方法指定每次抓取的记录数（典型的空间换时间策略）；要提升更新数据的性能\n可以使用 PreparedStatement 语句构建批处理，将若干 SQL 语句置于一个批处\n理中执行。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"_78、在进行数据库编程时-连接池有什么作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_78、在进行数据库编程时-连接池有什么作用"}},[s._v("#")]),s._v(" "),a("strong",[s._v("78、在进行数据库编程时，连接池有什么作用？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("由于创建连接和释放连接都有很大的开销（尤其是数据库服务器不在本地时，每\n次建立连接都需要进行 TCP 的三次握手，释放连接需要进行 TCP 四次握手，造成\n的开销是不可忽视的），为了提升系统访问数据库的性能，可以事先创建若干连\n接置于连接池中，需要时直接从连接池获取，使用结束时归还连接池而不必关闭\n连接，从而避免频繁创建和释放连接所造成的开销，这是典型的用空间换取时间\n的策略（浪费了空间存储连接，但节省了创建和释放连接的时间）。池化技术在\nJava 开发中是很常见的，在使用线程时创建线程池的道理与此相同。基于 Java 的\n开源数据库连接池主要有：C3P0、Proxool、DBCP、BoneCP、Druid 等。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_79、什么是-dao-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_79、什么是-dao-模式"}},[s._v("#")]),s._v(" "),a("strong",[s._v("79、什么是 DAO 模式？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("DAO（Data Access Object）顾名思义是一个为数据库或其他持久化机制提供了\n抽象接口的对象，在不暴露底层持久化方案实现细节的前提下提供了各种数据访\n问操作。在实际的开发中，应该将所有对数据源的访问操作进行抽象化后封装在\n一个公共 API 中。用程序设计语言来说，就是建立一个接口，接口中定义了此应\n用程序中将会用到的所有事务方法。在这个应用程序中，当需要和数据源进行交\n互的时候则使用这个接口，并且编写一个单独的类来实现这个接口，在逻辑上该\n类对应一个特定的数据存储。DAO 模式实际上包含了两个模式，一是 Data\nAccessor（数据访问器），二是 Data Object（数据对象），前者要解决如何访\n问数据的问题，而后者要解决的是如何用对象封装数据。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"_80、事务的-acid-是指什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_80、事务的-acid-是指什么"}},[s._v("#")]),s._v(" "),a("strong",[s._v("80、事务的 ACID 是指什么？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("原子性(Atomic)：事务中各项操作，要么全做要么全不做，任何一项操作\n的失败都会导致整个事务的失败；\n 一致性(Consistent)：事务结束后系统状态是一致的；\n 隔离性(Isolated)：并发执行的事务彼此无法看到对方的中间状态；\n 持久性(Durable)：事务完成后所做的改动都会被持久化，即使发生灾难\n性的失败。通过日志和同步备份可以在故障发生后重建数据。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"_81、jdbc-中如何进行事务处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_81、jdbc-中如何进行事务处理"}},[s._v("#")]),s._v(" 81、JDBC 中如何进行事务处理？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Connection 提供了事务处理的方法，通过调用 setAutoCommit(false)可以设置\n手动提交事务；当事务完成后用 commit()显式提交事务；如果在事务处理过程中\n发生异常则通过 rollback()进行事务回滚。除此之外，从 JDBC 3.0 中还引入了\nSavepoint（保存点）的概念，允许通过代码设置保存点并让事务回滚到指定的保\n存点。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"_82、jdbc-能否处理-blob-和-clob"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_82、jdbc-能否处理-blob-和-clob"}},[s._v("#")]),s._v(" "),a("strong",[s._v("82、JDBC 能否处理 Blob 和 Clob？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Blob 是指二进制大对象（Binary Large Object），而 Clob 是指大字符对象\n（Character Large Objec），因此其中 Blob 是为存储大的二进制数据而设计的，\n而 Clob 是为存储大的文本数据而设计的。JDBC 的 PreparedStatement 和\nResultSet 都提供了相应的方法来支持 Blob 和 Clob 操作。下面的代码展示了如\n何使用 JDBC 操作 LOB：\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"_84、java-中是如何支持正则表达式操作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_84、java-中是如何支持正则表达式操作的"}},[s._v("#")]),s._v(" "),a("strong",[s._v("84、Java 中是如何支持正则表达式操作的？")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 中的 "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" 类提供了支持正则表达式操作的方法，包括："),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("、\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replaceAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replaceFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("。此外，"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Java")]),s._v(" 中可以用 "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pattern")]),s._v(" 类表示正则\n表达式对象，它提供了丰富的 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("API")]),s._v(" 进行各种正则表达式操作，请参考下面面试题\n的代码。\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Matcher")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pattern")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExpTest")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"北京市(朝阳区)(西城区)(海淀区)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pattern")]),s._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pattern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("compile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('".*?(?=\\\\()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Matcher")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("matcher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("group")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"_85、获得一个类的类对象有哪些方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_85、获得一个类的类对象有哪些方式"}},[s._v("#")]),s._v(" "),a("strong",[s._v("85、获得一个类的类对象有哪些方式？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("方法 1：类型.class，例如：String.class\n方法 2：对象.getClass()，例如：”hello”.getClass()\n方法 3：Class.forName()，例如：Class.forName(“java.lang.String”)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"_86、如何通过反射创建对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_86、如何通过反射创建对象"}},[s._v("#")]),s._v(" 86、如何通过反射创建对象？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("方法 1：通过类对象调用 newInstance()方法，例如：\nString.class.newInstance()\n方法 2：通过类对象的 getConstructor()或 getDeclaredConstructor()\n方法获得构造器（Constructor）对象并调用其 newInstance()方法创建对象，\n例如：String.class.getConstructor(String.class).newInstance(“Hello”);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"_87、如何通过反射获取和设置对象私有字段的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_87、如何通过反射获取和设置对象私有字段的值"}},[s._v("#")]),s._v(" 87、如何通过反射获取和设置对象私有字段的值？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("可以通过类对象的 getDeclaredField()方法字段（Field）对象，然后再通过字段\n对象的 setAccessible(true)将其设置为可以访问，接下来就可以通过 get/set 方\n法来获取/设置字段的值了。下面的代码实现了一个反射的工具类，其中的两个静\n态方法分别用于获取和设置私有字段的值，字段可以是基本类型也可以是对象类\n型且支持多级对象操作，例如 ReflectionUtil.get(dog, “owner.car.engine.id”);\n可以获得 dog 对象的主人的汽车的引擎的 ID 号。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"_88、如何通过反射调用对象的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_88、如何通过反射调用对象的方法"}},[s._v("#")]),s._v(" "),a("strong",[s._v("88、如何通过反射调用对象的方法？")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lang"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MethodInvokeTest")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Method")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"toUpperCase"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// HELLO")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_89、简述一下面向对象的-六原则一法则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_89、简述一下面向对象的-六原则一法则"}},[s._v("#")]),s._v(" 89、简述一下面向对象的”六原则一法则”")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("单一职责原则：一个类只做它该做的事情。（单一职责原则想表达的就是”\n高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，就如同葵花宝\n典或辟邪剑谱的中心思想就八个字”欲练此功必先自宫”，所谓的高内聚就是一\n个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，\n而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。我\n们都知道一句话叫”因为专注，所以专业”，一个对象如果承担太多的职责，那\n么注定它什么都做不好。这个世界上任何好的东西都有两个特征，一个是功能单\n一，好的相机绝对不是电视购物里面卖的那种一个机器有一百多种功能的，它基\n本上只能照相；另一个是模块化，好的自行车是组装车，从减震叉、刹车到变速\n器，所有的部件都是可以拆卸和重新组装的，好的乒乓球拍也不是成品拍，一定\n是底板和胶皮可以拆分和自行组装的，一个好的软件系统，它里面的每个功能模\n块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。）\n 开闭原则：软件实体应当对扩展开放，对修改关闭。（在理想的状态下，\n当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类\n就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：①抽象是关\n键，一个系统中如果没有抽象类或接口系统就没有扩展点；②封装可变性，将系\n统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系\n统将变得复杂而换乱，如果不清楚如何封装可变性，可以参考《设计模式精解》\n一书中对桥梁模式的讲解的章节。）\n 依赖倒转原则：面向接口编程。（该原则说得直白和具体一些就是声明方\n法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不\n用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里\n氏替换原则。）\n里氏替换原则：任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的\n描述，Barbara Liskov 女士的描述比这个要复杂得多，但简单的说就是能用父\n类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如\n果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对\n代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都\n是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：\n子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更\n多，把能力多的对象当成能力少的对象来用当然没有任何问题。）\n 接口隔离原则：接口要小而专，绝不能大而全。（臃肿的接口是对接口的\n污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高\n度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口\n中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，\n毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现\n几个接口，这样的话每个接口被复用的可能性是很高的。Java 中的接口代表能\n力、代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。）\n 合成聚合复用原则：优先使用聚合或合成关系复用代码。（通过继承来复\n用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例\n外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，\nIs-A 关系、Has-A 关系、Use-A 关系，分别代表继承、关联和依赖。其中，关\n联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是\nHas-A 关系，合成聚合复用原则想表达的是优先考虑 Has-A 关系而不是 Is-A 关\n系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在\nJava 的 API 中也有不少滥用继承的例子，例如 Properties 类继承了 Hashtable\n类，Stack 类继承了 Vector 类，这些继承明显就是错误的，更好的做法是在\nProperties 类中放置一个 Hashtable 类型的成员并且将其键和值都设置为字符\n串来存储数据，而 Stack 类的设计也应该是在 Stack 类中放一个 Vector 对象来\n存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，\n而不是拿来继承的。）\n 迪米特法则：迪米特法则又叫最少知识原则，一个对象应当对其他对象有\n尽可能少的了解。（迪米特法则简单的说就是如何做到”低耦合”，门面模式和\n调停者模式就是对迪米特法则的践行。对于门面模式可以举一个简单的例子，你\n去一家公司洽谈业务，你不需要了解这个公司内部是如何运作的，你甚至可以对\n这个公司一无所知，去的时候只需要找到公司入口处的前台美女，告诉她们你要\n做什么，她们会找到合适的人跟你接洽，前台的美女就是公司这个系统的门面。\n再复杂的系统都可以为用户提供一个简单的门面，Java Web 开发中作为前端控\n制器的 Servlet 或 Filter 不就是一个门面吗，浏览器对服务器的运作方式一无所\n知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可\n以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡\n各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，\n计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它\n将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统\n的耦合度和复杂度，如下图所示。迪米特法则用通俗的话来将就是不要和陌生人\n打交道，如果真的需要，找一个自己的朋友，让他替你和陌生人打交道。）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br")])]),a("h2",{attrs:{id:"_90、简述一下你了解的设计模式。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_90、简述一下你了解的设计模式。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("90、简述一下你了解的设计模式。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("所谓设计模式，就是一套被反复使用的代码设计经验的总结（情境中一个问题经\n过证实的一个解决方案）。使用设计模式是为了可重用代码、让代码更容易被他\n人理解、保证代码可靠性。设计模式使人们可以更加简单方便的复用成功的设计\n和体系结构。将已证实的技术表述成设计模式也会使新系统开发者更加容易理解\n其设计思路。\n在 GoF 的《Design Patterns: Elements of Reusable Object-Oriented\nSoftware》中给出了三类（创建型[对类的实例化过程的抽象化]、结构型[描述如\n何将类或对象结合在一起形成更大的结构]、行为型[对在不同的对象之间划分责任\n和算法的抽象化]）共 23 种设计模式，包括：Abstract Factory（抽象工厂模式），\nBuilder（建造者模式），Factory Method（工厂方法模式），Prototype（原始\n模型模式），Singleton（单例模式）；Facade（门面模式），Adapter（适配器\n模式），Bridge（桥梁模式），Composite（合成模式），Decorator（装饰模\n式），Flyweight（享元模式），Proxy（代理模式）；Command（命令模式），\nInterpreter（解释器模式），Visitor（访问者模式），Iterator（迭代子模式），\nMediator（调停者模式），Memento（备忘录模式），Observer（观察者模式），\nState（状态模式），Strategy（策略模式），Template Method（模板方法模式），\nChain Of Responsibility（责任链模式）。\n面试被问到关于设计模式的知识时，可以拣最常用的作答，例如：\n 工厂模式：工厂类可以根据条件生成不同的子类实例，这些子类有一个公\n共的抽象父类并且实现了相同的方法，但是这些方法针对不同的数据进行了不同\n的操作（多态方法）。当得到子类的实例后，开发人员可以调用基类中的方法而\n不必考虑到底返回的是哪一个子类的实例。\n 代理模式：给一个对象提供一个代理对象，并由代理对象控制原对象的引\n用。实际开发中，按照使用目的的不同，代理可以分为：远程代理、虚拟代理、\n保护代理、Cache 代理、防火墙代理、同步化代理、智能引用代理。\n 适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使\n原本因接口不匹配而无法在一起使用的类能够一起工作。\n 模板方法模式：提供一个抽象类，将部分逻辑以具体方法或构造器的形式\n实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不\n同的方式实现这些抽象方法（多态实现），从而实现不同的业务逻辑。\n除此之外，还可以讲讲上面提到的门面模式、桥梁模式、单例模式、装潢模式\n（Collections 工具类和 I/O 系统中都使用装潢模式）等，反正基本原则就是拣\n自己最熟悉的、用得最多的作答，以免言多必失。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("h2",{attrs:{id:"_91、用-java-写一个单例类。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_91、用-java-写一个单例类。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("91、用 Java 写一个单例类。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("饿汉式单例\npublic class Singleton {\nprivate Singleton(){}\nprivate static Singleton instance = new Singleton();\npublic static Singleton getInstance(){\nreturn instance;\n}\n}\n 懒汉式单例\npublic class Singleton {\nprivate static Singleton instance = null;\nprivate Singleton() {}\npublic static synchronized Singleton getInstance(){\nif (instance == null) instance ＝ new Singleton();\nreturn instance;\n}\n}\n注意：实现一个单例有两点注意事项，①将构造器私有，不允许外界通过构造器\n创建对象；②通过公开的静态方法向外界返回类的唯一实例。这里有一个问题可\n以思考：Spring 的 IoC 容器可以为普通的类创建单例，它是怎么做到的呢？\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h2",{attrs:{id:"_95、用-java-写一个折半查找。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_95、用-java-写一个折半查找。"}},[s._v("#")]),s._v(" "),a("strong",[s._v("95、用 Java 写一个折半查找。")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("折半查找，也称二分查找、二分搜索，是一种在有序数组中查找某一特定元素的\n搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，\n则搜素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小\n于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一\n步骤数组已经为空，则表示找不到指定的元素。这种搜索算法每一次比较都使搜\n索范围缩小一半，其时间复杂度是 "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("O")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("logN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("。\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparator")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyUtil")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("binarySearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v("\nkey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("binarySearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用循环实现的二分查找")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("binarySearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" comp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" high "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" cmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" comp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("compare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\nlow"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\nhigh"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用递归实现的二分查找")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("binarySearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("\nlow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("high "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("low"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("binarySearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("low"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("binarySearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n说明：上面的代码中给出了折半查找的两个版本，一个用递归实现，一个用循环\n实现。需要注意的是计算中间位置时不应该使用"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("high"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" low"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 的方式，因为加\n法运算可能导致整数越界，这里应该使用以下三种方式之一：low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("high "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" low"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 或 low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("high – low"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 或"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("（"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>>")]),s._v("是逻辑右移，是\n不带符号位的右移）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);