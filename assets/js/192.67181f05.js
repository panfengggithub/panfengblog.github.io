(window.webpackJsonp=window.webpackJsonp||[]).push([[192],{606:function(e,s,n){"use strict";n.r(s);var a=n(1),t=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("概要：\n一、Dubbo 调用模块基本组成\n二 、Dubbo 调用非典型使用场景\n三、调用通信内部实现源码分析")]),e._v(" "),s("h2",{attrs:{id:"一、dubbo-调用模块基本组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、dubbo-调用模块基本组成"}},[e._v("#")]),e._v(" 一、Dubbo 调用模块基本组成")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"dubbo调用模块概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dubbo调用模块概述"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Dubbo调用模块概述：")])]),e._v(" "),s("p",[e._v("dubbo调用模块核心功能是发起一个远程方法的调用并顺利拿到返回结果，其体系组成如下：")]),e._v(" "),s("ol",[s("li",[e._v("**透明代理：**通过动态代理技术，屏蔽远程调用细节以提高编程友好性。")]),e._v(" "),s("li",[e._v("**负载均衡：**当有多个提供者是，如何选择哪个进行调用的负载算法。")]),e._v(" "),s("li",[e._v("**容错机制：**当服务调用失败时采取的策略")]),e._v(" "),s("li",[e._v("**调用方式：**支持同步调用、异步调用")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://images-cdn.shimo.im/EKumlxdB8ygnUt0i/image.png!thumbnail",alt:"图片"}})]),e._v(" "),s("h3",{attrs:{id:"透明代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#透明代理"}},[e._v("#")]),e._v(" 透明代理：")]),e._v(" "),s("p",[e._v("参见源码：\ncom.alibaba.dubbo.config.ReferenceConfig#createProxy\ncom.alibaba.dubbo.common.bytecode.ClassGenerator\ncom.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory")]),e._v(" "),s("h3",{attrs:{id:"负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[e._v("#")]),e._v(" "),s("strong",[e._v("负载均衡")])]),e._v(" "),s("p",[e._v("Dubbo 目前官方支持以下负载均衡策略：")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("随机")]),e._v("(random)：按权重设置随机概率。此为默认算法.")]),e._v(" "),s("li",[e._v("**轮循 **(roundrobin):按公约后的权重设置轮循比率。")]),e._v(" "),s("li",[s("strong",[e._v("最少活跃调用数")]),e._v("(leastactive):相同活跃数的随机，活跃数指调用前后计数差。")]),e._v(" "),s("li",[s("strong",[e._v("一致性Hash")]),e._v("(consistenthash ):相同的参数总是发到同一台机器")])]),e._v(" "),s("p",[e._v("设置方式支持如下四种方式设置，优先级由低至高")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('\x3c!-- 服务端级别--\x3e\n<dubbo:service interface="..." loadbalance="roundrobin" />\n\x3c!-- 客户端级别--\x3e\n<dubbo:reference interface="..." loadbalance="roundrobin" />\n\x3c!-- 服务端方法级别--\x3e\n<dubbo:service interface="...">\n    <dubbo:method name="..." loadbalance="roundrobin"/>\n</dubbo:service>\n\x3c!-- 客户端方法级别--\x3e\n<dubbo:reference interface="...">\n    <dubbo:method name="..." loadbalance="roundrobin"/>\n</dubbo:reference>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[e._v("#TODO 一至性hash 演示")]),e._v(" "),s("ul",[s("li",[e._v("[ ] 配置loadbalance")]),e._v(" "),s("li",[e._v("[ ] 配置需要hash 的参数与虚拟节点数")]),e._v(" "),s("li",[e._v("[ ] 发起远程调用")])]),e._v(" "),s("p",[e._v("一至性hash 算法详解：\n"),s("img",{attrs:{src:"https://images-cdn.shimo.im/2ng2Z09XeC8W2znz/%E4%B8%80%E8%87%B3%E6%80%A7%E5%95%A5%E5%B8%8C.png!thumbnail",alt:"图片"}})]),e._v(" "),s("h3",{attrs:{id:"容错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容错"}},[e._v("#")]),e._v(" "),s("strong",[e._v("容错")])]),e._v(" "),s("p",[e._v("Dubbo 官方目前支持以下容错策略：")]),e._v(" "),s("ol",[s("li",[e._v("**失败自动切换：**调用失败后基于retries=“2” 属性重试其它服务器")]),e._v(" "),s("li",[e._v("**快速失败：**快速失败，只发起一次调用，失败立即报错。")]),e._v(" "),s("li",[e._v("**勿略失败：**失败后勿略，不抛出异常给客户端。")]),e._v(" "),s("li",[e._v("**失败重试：**失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作")]),e._v(" "),s("li",[e._v('**并行调用: **只要一个成功即返回，并行调用指定数量机器，可通过 forks="2" 来设置最大并行数。')]),e._v(" "),s("li",[e._v("**广播调用：**广播调用所有提供者，逐个调用，任意一台报错则报错")])]),e._v(" "),s("p",[e._v("设置方式支持如下两种方式设置，优先级由低至高")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('\x3c!-- \nFailover 失败自动切换 retries="1" 切换次数\nFailfast 快速失败\nFailsafe 勿略失败\nFailback 失败重试，5秒后仅重试一次\nForking 并行调用  forks="2" 最大并行数\nBroadcast 广播调用\n--\x3e\n<dubbo:service interface="..." cluster="broadcast" />\n<dubbo:reference interface="..." cluster="broadcast"/ >\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v('注：容错机制 在基于 API设置时无效 如   referenceConfig.setCluster("failback"); 经测试不启作用')]),e._v(" "),s("h3",{attrs:{id:"异步调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步调用"}},[e._v("#")]),e._v(" "),s("strong",[e._v("异步调用")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("异步调用是指发起远程调用之后获取结果的方式。\n")])])]),s("ol",[s("li",[e._v("同步等待结果返回（默认）")]),e._v(" "),s("li",[e._v("异步等待结果返回")]),e._v(" "),s("li",[e._v("不需要返回结果")])]),e._v(" "),s("p",[e._v("Dubbo 中关于异步等待结果返回的实现流程如下图：\n"),s("img",{attrs:{src:"https://images-cdn.shimo.im/OPdbf7GTUcs1Q9DQ/image.png!thumbnail",alt:"图片"}})]),e._v(" "),s("p",[e._v("异步调用配置:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<dubbo:reference id="asyncDemoService"\n                 interface="com.tuling.teach.service.async.AsyncDemoService">\n                 \x3c!-- 异步调async：true 异步调用 false 同步调用--\x3e\n    <dubbo:method name="sayHello1" async="false"/>\n    <dubbo:method name="sayHello2" async="false"/>\n     <dubbo:method name="notReturn" return="false"/>\n</dubbo:reference>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v('注：在进行异步调用时 容错机制不能为  cluster="forking" 或  cluster="broadcast"')]),e._v(" "),s("p",[s("strong",[e._v("异步获取结果演示：")])]),e._v(" "),s("ul",[s("li",[e._v("[ ] 编写异步调用代码")]),e._v(" "),s("li",[e._v("[ ] 编写同步调用代码")]),e._v(" "),s("li",[e._v("[ ] 分别演示同步调用与异步调用耗时")])]),e._v(" "),s("p",[s("em",[e._v("异步调用结果获取Demo")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('demoService.sayHello1("han");\nFuture<Object> future1 = RpcContext.getContext().getFuture();\ndemoService.sayHello2("han2");\nFuture<Object> future2 = RpcContext.getContext().getFuture();\nObject r1 = null, r2 = null;\n// wait 直到拿到结果 获超时\nr1 = future1.get();\n// wait 直到拿到结果 获超时\nr2 = future2.get();\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("h3",{attrs:{id:"过滤器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[e._v("#")]),e._v(" "),s("strong",[e._v("过滤器")])]),e._v(" "),s("p",[e._v("** 类似于 WEB 中的Filter ，Dubbo本身提供了Filter 功能用于拦截远程方法的调用。其支持自定义过滤器与官方的过滤器使用：**\n#TODO 演示添加日志访问过滤:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<dubbo:provider  filter="accesslog" accesslog="logs/dubbo.log"/>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("以上配置 就是 为 服务提供者 添加 日志记录过滤器， 所有访问日志将会集中打印至 accesslog 当中")]),e._v(" "),s("h2",{attrs:{id:"二-、dubbo-调用非典型使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-、dubbo-调用非典型使用场景"}},[e._v("#")]),e._v(" 二 、Dubbo 调用非典型使用场景")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"泛化提供-引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛化提供-引用"}},[e._v("#")]),e._v(" "),s("strong",[e._v("泛化提供&引用")])]),e._v(" "),s("p",[s("strong",[e._v("泛化提供")]),e._v("\n是指不通过接口的方式直接将服务暴露出去。通常用于Mock框架或服务降级框架实现。\n#TODO 示例演示")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public static void doExportGenericService() {\n    ApplicationConfig applicationConfig = new ApplicationConfig();\n    applicationConfig.setName("demo-provider");\n    // 注册中心\n    RegistryConfig registryConfig = new RegistryConfig();\n    registryConfig.setProtocol("zookeeper");\n    registryConfig.setAddress("192.168.0.147:2181");\n    ProtocolConfig protocol=new ProtocolConfig();\n    protocol.setPort(-1);\n    protocol.setName("dubbo");\n    GenericService demoService = new MyGenericService();\n    ServiceConfig<GenericService> service = new ServiceConfig<GenericService>();\n    // 弱类型接口名\n    service.setInterface("com.tuling.teach.service.DemoService");\n    // 指向一个通用服务实现\n    service.setRef(demoService);\n    service.setApplication(applicationConfig);\n    service.setRegistry(registryConfig);\n    service.setProtocol(protocol);\n    // 暴露及注册服务\n    service.export();\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br")])]),s("p",[s("strong",[e._v("泛化引用")]),e._v("\n是指不通过常规接口的方式去引用服务，通常用于测试框架。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('ApplicationConfig applicationConfig = new ApplicationConfig();\napplicationConfig.setName("demo-provider");\n// 注册中心\nRegistryConfig registryConfig = new RegistryConfig();\nregistryConfig.setProtocol("zookeeper");\nregistryConfig.setAddress("192.168.0.147:2181");\n// 引用远程服务\nReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>();\n// 弱类型接口名\nreference.setInterface("com.tuling.teach.service.DemoService");\n// 声明为泛化接口\nreference.setGeneric(true);\nreference.setApplication(applicationConfig);\nreference.setRegistry(registryConfig);\n// 用com.alibaba.dubbo.rpc.service.GenericService可以替代所有接口引用\nGenericService genericService = reference.get();\nObject result = genericService.$invoke("sayHello", new String[]{"java.lang.String"}, new Object[]{"world"});\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("h3",{attrs:{id:"隐示传参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隐示传参"}},[e._v("#")]),e._v(" "),s("strong",[e._v("隐示传参")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("是指通过非常方法参数传递参数，类似于http 调用当中添加cookie值。通常用于分布式追踪框架的实现。使用方式如下 ：\n")])])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//客户端隐示设置值\nRpcContext.getContext().setAttachment("index", "1"); // 隐式传参，后面的远程调用都会隐\n//服务端隐示获取值\nString index = RpcContext.getContext().getAttachment("index"); \n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h3",{attrs:{id:"令牌验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#令牌验证"}},[e._v("#")]),e._v(" "),s("strong",[e._v("令牌验证")])]),e._v(" "),s("p",[e._v("通过令牌验证在注册中心控制权限，以决定要不要下发令牌给消费者，可以防止消费者绕过注册中心访问提供者，另外通过注册中心可灵活改变授权方式，而不需修改或升级提供者\n"),s("img",{attrs:{src:"https://images-cdn.shimo.im/O0rGr5Zvudsmd3j5/dubbo_token.jpg!thumbnail",alt:"图片"}})]),e._v(" "),s("p",[e._v("使用：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('\x3c!--随机token令牌，使用UUID生成--\x3e<dubbo:provider interface="com.foo.BarService" token="true" />\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"三、调用通信内部实现源码分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、调用通信内部实现源码分析"}},[e._v("#")]),e._v(" 三、调用通信内部实现源码分析")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"网络传输的实现组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络传输的实现组成"}},[e._v("#")]),e._v(" "),s("strong",[e._v("网络传输的实现组成")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://images-cdn.shimo.im/zcMTjcreyJ0T8Ucd/image.png!thumbnail",alt:"图片"}})]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("IO模型：")])]),e._v(" "),s("li",[e._v("BIO 同步阻塞")]),e._v(" "),s("li",[e._v("NIO 同步非阻塞")]),e._v(" "),s("li",[e._v("AIO 异步非阻塞")]),e._v(" "),s("li",[s("strong",[e._v("连接模型：")])]),e._v(" "),s("li",[e._v("长连接")]),e._v(" "),s("li",[e._v("短连接")]),e._v(" "),s("li",[s("strong",[e._v("线程分类：")])]),e._v(" "),s("li",[e._v("IO线程")]),e._v(" "),s("li",[e._v("服务端业务线程")]),e._v(" "),s("li",[e._v("客户端调度线程")]),e._v(" "),s("li",[e._v("客户端结果exchange线程。")]),e._v(" "),s("li",[e._v("保活心跳线程")]),e._v(" "),s("li",[e._v("重连线程")]),e._v(" "),s("li",[s("strong",[e._v("线程池模型：")])]),e._v(" "),s("li",[e._v("固定数量线程池")]),e._v(" "),s("li",[e._v("缓存线程池")]),e._v(" "),s("li",[e._v("有限线程池")])]),e._v(" "),s("h3",{attrs:{id:"dubbo-长连接实现与配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-长连接实现与配置"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Dubbo 长连接实现与配置")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("**初始连接：**\n引用服务增加提供者==>获取连接===》是否获取共享连接==>创建连接客户端==》开启心跳检测状态检查定时任务===》开启连接状态检测\n")])])]),s("p",[e._v("源码见：com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol#getClients\n"),s("strong",[e._v("心跳发送：")]),e._v("\n在创建一个连接客户端同时也会创建一个心跳客户端，客户端默认基于60秒发送一次心跳来保持连接的存活，可通过 heartbeat  设置。\n源码见："),s("em",[e._v("com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeClient#startHeatbeatTimer")]),e._v(" "),s("strong",[e._v("断线重连：")]),e._v("\n每创建一个客户端连接都会启动一个定时任务每两秒中检测一次当前连接状态，如果断线则自动重连。\n源码见：com.alibaba.dubbo.remoting.transport.AbstractClient#initConnectStatusCheckCommand\n"),s("strong",[e._v("连接销毁:")]),e._v("\n基于注册中心通知，服务端断开后销毁\n源码见：com.alibaba.dubbo.remoting.transport.AbstractClient#close()")]),e._v(" "),s("h3",{attrs:{id:"dubbo传输uml类图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dubbo传输uml类图"}},[e._v("#")]),e._v(" "),s("strong",[e._v("dubbo传输uml类图:")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://images-cdn.shimo.im/nINBK0pdrMAK7HnJ/image.png!thumbnail",alt:"图片"}})]),e._v(" "),s("h3",{attrs:{id:"dubbo-传输协作线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-传输协作线程"}},[e._v("#")]),e._v(" "),s("strong",[e._v("Dubbo 传输协作线程")])]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("客户端调度线程")]),e._v("：用于发起远程方法调用的线程。")]),e._v(" "),s("li",[e._v("**客户端结果"),s("strong",[s("strong",[e._v("Exchange")])]),e._v("线程：**当远程方法返回response后由该线程填充至指定ResponseFuture，并叫醒等待的调度线程。")]),e._v(" "),s("li",[e._v("**客户端IO线程：**由传输框架实现，用于request 消息流发送、response 消息流读取与解码等操作。")]),e._v(" "),s("li",[s("strong",[e._v("服务端IO线程")]),e._v("：由传输框架实现，用于request消息流读取与解码 与Response发送。")]),e._v(" "),s("li",[e._v("**业务执行线程：**服务端具体执行业务方法的线程")])]),e._v(" "),s("p",[s("strong",[e._v("客户端线程协作流程：")]),e._v(" "),s("img",{attrs:{src:"https://images-cdn.shimo.im/TIuMUaWHtyQK9ZBX/image.png!thumbnail",alt:"图片"}})]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("调度线程")])]),e._v(" "),s("li",[e._v("调用远程方法")]),e._v(" "),s("li",[e._v("对request 进行协议编码")]),e._v(" "),s("li",[e._v("发送request 消息至IO线程")]),e._v(" "),s("li",[e._v("等待结果的获取")]),e._v(" "),s("li",[s("strong",[e._v("IO线程")])]),e._v(" "),s("li",[e._v("读取response流")]),e._v(" "),s("li",[e._v("response 解码")]),e._v(" "),s("li",[e._v("提交Exchange 任务")]),e._v(" "),s("li",[s("strong",[e._v("Exchange线程")])]),e._v(" "),s("li",[e._v("填写response值 至 ResponseFuture")]),e._v(" "),s("li",[e._v("唤醒调度线程，通知其获取结果")])]),e._v(" "),s("p",[e._v("调用调试：")]),e._v(" "),s("p",[e._v("客户端的执行线程:\n1、业务线程")]),e._v(" "),s("ol",[s("li",[e._v("DubboInvoker#doInvoke(隐示传公共参数、获取客户端、异步、单向、同步（等待返回结果）)\n2)AbstractPeer#send// netty Client客户端发送消息 写入管道\n3)DubboCodec#encodeRequestData // Request 协议编码\n2、IO线程\nDubboCodec#decodeBody //Response解码 \nAllChannelHandler#received //// 派发消息处理线程\n3、调度线程\nDefaultFuture#doReceived // 设置返回结果")])]),e._v(" "),s("p",[s("strong",[e._v("服务端线程协作：")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://images-cdn.shimo.im/fVkgO2wvwuAhTdC5/image.png!thumbnail",alt:"图片"}})]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("IO线程：")])]),e._v(" "),s("li",[e._v("request 流读取")]),e._v(" "),s("li",[e._v("request 解码")]),e._v(" "),s("li",[e._v("提交业务处理任务")]),e._v(" "),s("li",[s("strong",[e._v("业务线程：")])]),e._v(" "),s("li",[e._v("业务方法执行")]),e._v(" "),s("li",[e._v("response 编码")]),e._v(" "),s("li",[e._v("回写结果至channel")])]),e._v(" "),s("p",[s("strong",[e._v("线程池")])]),e._v(" "),s("ol",[s("li",[e._v("**fixed：**固定线程池,此线程池启动时即创建固定大小的线程数，不做任何伸缩，")]),e._v(" "),s("li",[e._v("**cached：**缓存线程池,此线程池可伸缩，线程空闲一分钟后回收，新请求重新创建线程")]),e._v(" "),s("li",[e._v("**Limited：**有限线程池,此线程池一直增长，直到上限，增长后不收缩。")])])])}),[],!1,null,null,null);s.default=t.exports}}]);