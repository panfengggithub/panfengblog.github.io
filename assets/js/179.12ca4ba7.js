(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{592:function(r,e,i){"use strict";i.r(e);var n=i(1),t=Object(n.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"微服务的更新换代以及未来发展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微服务的更新换代以及未来发展"}},[r._v("#")]),r._v(" "),e("strong",[r._v("微服务的更新换代以及未来发展")])]),r._v(" "),e("h2",{attrs:{id:"写在前面的话"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写在前面的话"}},[r._v("#")]),r._v(" 写在前面的话")]),r._v(" "),e("p",[r._v("从上次讲解，包括写笔记 是在1年前， 那时候微服务的 CURRENT&GA版本(官方正式发布版本及推荐使用版本) 还是Finchley版本， 到如今已经是Hoxton 版本了(中间还经历了一个Greenwich 大版本)")]),r._v(" "),e("p",[r._v("那么本节  主要是弥补这几个版本中的一些重大更新 以及spring cloud 所做的一些决策 包括spring cloud未来发展的探讨，")]),r._v(" "),e("p",[r._v("无论是现在已经在进行spring cloud 开发 还是 未来打算进行spring cloud开发  相信本文都会给你带来一定的启发")]),r._v(" "),e("p",[r._v("注:关于资料，基本上是根据对于官方博客发布信息的中文翻译,资料整理于spring 官方博客： https://spring.io/blog")]),r._v(" "),e("h2",{attrs:{id:"greenwich-版本的主要更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#greenwich-版本的主要更新"}},[r._v("#")]),r._v(" Greenwich  版本的主要更新")]),r._v(" "),e("p",[r._v("官方链接：https://spring.io/blog/2019/01/23/spring-cloud-greenwich-release-is-now-available")]),r._v(" "),e("p",[r._v("1：首先 是对于jdk的兼容  到Greenwich  版本的Spring cloud 完全兼容JDK11")]),r._v(" "),e("p",[r._v('2： Edgware 版本将在2019.08.01变为EOL状态  Edgware 版本作为Finchley的前一个版本， 按照当今的版本迭代速度来讲 已经是一个比较"老"的版本了， 他的停止维护，也是在人的预料之内的。  值得一提的是Finchley版本也会在spring boot2.0.x版本到达EOL状态之时，同时变更为EOL状态， 所以大家在spring cloud开发当中， 版本的迭代升级，是一件需要重要考虑的事情。')]),r._v(" "),e("p",[r._v("​\t\t（EOL状态的项目即停止维护状态 对于项目不会再更新 包括即使出现bug也不会再去维护了，一般在开发中使用到这个状态的项目， 需要及时升级为新项目，以防项目上线出现问题）")]),r._v(" "),e("p",[r._v("​\t3: 新项目 Greenwich Release系列中包含两个新项目，即"),e("a",{attrs:{href:"https://spring.io/projects/spring-cloud-gcp",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring Cloud GCP"),e("OutboundLink")],1),r._v("（提供与Google Cloud Platform的集成）和"),e("a",{attrs:{href:"https://spring.io/projects/spring-cloud-kubernetes#overview",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring Cloud Kubernetes"),e("OutboundLink")],1),r._v("（提供与Kubernetes的集成）。")]),r._v(" "),e("p",[r._v("4： Spring Cloud Netflix 进入维护状态")]),r._v(" "),e("p",[r._v("​\t\tSpring Cloud Netflix这个项目， 在spring cloud里面大家接触的还是比较多的 （eureka，ribbon，hystrix，zuul等等..）全是他家的产品，  Netflix的项目其实大多数早就已经处于维护状态了，  这里只是发布一个官方的通知罢了")]),r._v(" "),e("ol",[e("li",[r._v("spring-cloud-netflix-archaius")]),r._v(" "),e("li",[r._v("spring-cloud-netflix-hystrix-contract")]),r._v(" "),e("li",[r._v("spring-cloud-netflix-hystrix-dashboard")]),r._v(" "),e("li",[r._v("spring-cloud-netflix-hystrix-stream")]),r._v(" "),e("li",[r._v("spring-cloud-netflix-hystrix")]),r._v(" "),e("li",[r._v("spring-cloud-netflix-ribbon")]),r._v(" "),e("li",[r._v("spring-cloud-netflix-turbine-stream")]),r._v(" "),e("li",[r._v("spring-cloud-netflix-turbine")]),r._v(" "),e("li",[r._v("spring-cloud-netflix-zuul")])]),r._v(" "),e("p",[r._v("上列的项目全部列入维护状态")]),r._v(" "),e("p",[r._v("注:  eureka并不在其中，说明eureka还是处于开发状态的")]),r._v(" "),e("p",[r._v('关于eureka  这两年网上一直有一股 "歪风邪气"----- eureka闭源了（停止更新了） 大家不要使用了。')]),r._v(" "),e("p",[r._v("关于这个事情， 其实我经常在课上当做一个槽点来讲，  这主要还是源于一则eureka官方的通知， 关于那个通知的网页 我已经找不到了， 口头上描述就是， 官方的意思是 eureka2停止开发（闭源了）  但是eureka1还在正常进行开发")]),r._v(" "),e("p",[r._v("怎么理解这句话？  首先 市面上99%的对于eureka使用的上线项目，包括大家所学习的eureka  全部是 eureka1  也就是第一代 eureka2 是netflix团队打算基于eureka1开源的新一代eureka 框架  那么这里 他们就是2个不同的框架了，（就像电影叶问1和叶问2的关系） 那么官方对于eureka2的停止开发， 其实是影响不到eureka1的 （就好像甄子丹甄师傅说叶问4是他的收官之作，也就是不会再拍叶问5了， 难道大家都不去看叶问4了吗？ 或者整个叶问系列都不看了吗？） 本人举例子水平可能有点问题， 但是我大概要表达的意思即是如此 。")]),r._v(" "),e("p",[r._v("关于eureka1 官方一直在做更新维护 可以详见eureka的官方git的更新：https://github.com/Netflix/eureka/releases         （写这个笔记的时候，eureka上次的更新在2020.02.04）")]),r._v(" "),e("p",[r._v("(关于维护模式: 就是开发团队不再对此项目进行更新换代了， 只会对已有的项目中出现的BUG以及问题进行修复)")]),r._v(" "),e("p",[r._v("关于一些常用项目的替代品：")]),r._v(" "),e("p",[r._v("刚刚我们有讲 netflix大量项目进入了维护状态， 其中不乏有我们在做微服务要常用的： ribbon，hystrix，zuul， 等  这些组件， 那么 spring cloud  也提出了解决方案的推荐：")]),r._v(" "),e("p",[r._v("ribbon替代方案：Spring Cloud Loadbalancer（spring cloud 自己研发的负载均衡器）")]),r._v(" "),e("p",[r._v("hystrix替代方案：Resilience4j （一个轻量级函数式编程容错框架，不过我们也有国内的阿里Sentinel）")]),r._v(" "),e("p",[r._v("zull 替代方案：  Spring Cloud Gateway")]),r._v(" "),e("p",[r._v("咱们这一章主要是讲一些重大更新与决策， 那么Greenwich  版本的更新咱就讲到这， 后面还有一些spring cloud 组件的一些模块功能的改动， 就不一一阐述了， 感兴趣的读者可以走进我上方给出的官方博客链接。")]),r._v(" "),e("h2",{attrs:{id:"hoxton-版本的主要更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hoxton-版本的主要更新"}},[r._v("#")]),r._v(" Hoxton 版本的主要更新")]),r._v(" "),e("p",[r._v("本章的更新内容主要是关于异步编程的支持， 正如我之前一直在课上讲过的， 异步编程以后会慢慢成为主流的， 现在大量框架开始对于异步编程进行支持与兼容了， 包括spring mvc  衍生了spring webflux 支持异步响应流，  spring boot 在高版本以后 也对于异步变成进行支持，  虽然异步编程的普及对于咱国内程序员来讲可能还很漫长（单单一个jdk8 到现在还不能说普及了） 但是大家能提前掌握相关的技术的话， 对于自身的竞争力的提升还是相当不错的")]),r._v(" "),e("p",[r._v("除了对于异步编程的支持， 剩下就是关于Spring Cloud Loadbalancer组件的更新")]),r._v(" "),e("p",[r._v("Spring Cloud Loadbalancer我们在刚刚有讲过 是spring cloud 对于ribbon的解决方案，  这个组件还在更新中， spring cloud 对于他的理想化路线是支持阻塞与非阻塞两种负载均衡方式 但是这个组件仍在开发中， 功能并未完全开发完毕（目前的负载均衡策略仅轮询一种，后面在讲ribbon源码的时候会做详细的源码对比） 所以还在使用ribbon的读者们不用着急更替，但是可以先着手学习。")]),r._v(" "),e("p",[r._v("那么剩下的更新就是对于组件内部的功能维护了， 就不做一一阐述， 详见官网博客：")]),r._v(" "),e("p",[r._v("https://spring.io/blog/2019/11/28/spring-cloud-hoxton-released")]),r._v(" "),e("h2",{attrs:{id:"关于微服务的未来发展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于微服务的未来发展"}},[r._v("#")]),r._v(" 关于微服务的未来发展")]),r._v(" "),e("p",[r._v("对于微服务，现在市面上主流的解决方案便是大家所熟悉的Spring Cloud  那么大家如果回顾（在有的情况下）一下自己微服务的开发经验的话，会发现  微服务开发当中 我们使用的组件的更替及更新换代非常迅速（会经常看到某些组件进入了EOL模式亦或是维护模式，也有大量的新开源组件供大家使用及更替）")]),r._v(" "),e("p",[r._v("这对于传统的项目开发方式来讲的话 区别还是很大的 ，这也正是 微服务的理念体现：模块之间的更新并不影响整个系统的运作。")]),r._v(" "),e("p",[r._v("对于大家来讲的话， 最大的挑战可能是学习了， 因为微服务项目的模块更新， 比传统项目要方便的多， 比起项目架构来讲， 学习成本可能更大一点， 那么在微服务领域开发的(亦或是打算加入)读者们， 不妨反思一下， 自己是否准备好接受这种节奏的(微服务)项目开发了呢？")])])}),[],!1,null,null,null);e.default=t.exports}}]);