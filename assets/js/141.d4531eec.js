(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{555:function(a,s,_){"use strict";_.r(s);var t=_(1),e=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"paxos算法-一-basic-paxos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#paxos算法-一-basic-paxos"}},[a._v("#")]),a._v(" **Paxos算法（一）- Basic Paxos")]),a._v(" "),s("p",[a._v("提到分布式算法，就不得不提 Paxos 算法，在过去几十年里，它基本上是分布式共识的代名词，因为当前最常用的一批共识算法都是基于它改进的。比如，Fast Paxos 算法、Cheap Paxos 算法、Raft 算法等等。而很多同学都会在准确和系统理解 Paxos 算法上踩坑，比如，只知道它可以用来达成共识，但不知道它是如何达成共识的。")]),a._v(" "),s("p",[a._v("这其实侧面说明了 Paxos 算法有一定的难度，可分布式算法本身就很复杂，Paxos 算法自然也不会例外，当然了，除了这一点，还跟兰伯特有关。")]),a._v(" "),s("p",[a._v("兰伯特提出的 Paxos 算法包含 2 个部分：")]),a._v(" "),s("ul",[s("li",[a._v("一个是 Basic Paxos 算法，描述的是多节点之间如何就某个值（提案 Value）达成共识；")]),a._v(" "),s("li",[a._v("另一个是 Multi-Paxos 思想，描述的是执行多个 Basic Paxos 实例，就一系列值达成共识。")])]),a._v(" "),s("p",[a._v("可因为兰伯特提到的 Multi-Paxos 思想，缺少代码实现的必要细节（比如怎么选举领导者），所以在理解上比较难。")]),a._v(" "),s("p",[a._v("为了让你理解 Paxos 算法，接下来我会用 2 节课的时间，分别以 Basic Paxos 和 Multi-Paxos 为核心，带你了解 Basic Paxos 如何达成共识，以及针对 Basic Paxos 的局限性 Multi-Paxos 又是如何改进的。今天咱们先来聊聊 Basic Paxos。")]),a._v(" "),s("p",[a._v("在我看来，Basic Paxos 是 Multi-Paxos 思想的核心，说白了，Multi-Paxos 就是多执行几次 Basic Paxos。所以掌握它之后，你能更好地理解后几讲基于 Multi-Paxos 思想的共识算法（比如 Raft 算法），还能掌握分布式共识算法的最核心内容，当现在的算法不能满足业务需求，进行权衡折中，设计自己的算法。")]),a._v(" "),s("h2",{attrs:{id:"来看一道思考题。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#来看一道思考题。"}},[a._v("#")]),a._v(" 来看一道思考题。")]),a._v(" "),s("p",[a._v("假设我们要实现一个分布式集群，这个集群是由节点 A、B、C 组成，提供只读 KV 存储服务。你应该知道，创建只读变量的时候，必须要对它进行赋值，而且这个值后续没办法修改。因此一个节点创建只读变量后就不能再修改它了，所以所有节点必须要先对只读变量的值达成共识，然后所有节点再一起创建这个只读变量。")]),a._v(" "),s("p",[a._v("那么，当有多个客户端（比如客户端 1、2）访问这个系统，试图创建同一个只读变量（比如 X），客户端 1 试图创建值为 3 的 X，客户端 2 试图创建值为 7 的 X，这样要如何达成共识，实现各节点上 X 值的一致呢？带着这个问题，我们进入今天的学习。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/365147/1587706225793-be319a94-bdfe-4c23-abb0-e3b3783f48fb.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),a._v(" "),s("p",[a._v("在一些经典的算法中，你会看到一些既形象又独有的概念（比如二阶段提交协议中的协调者），Basic Paxos 算法也不例外。为了帮助人们更好地理解 Basic Paxos 算法，兰伯特在讲解时，也使用了一些独有而且比较重要的概念，提案、准备（Prepare）请求、接受（Accept）请求、角色等等，其中最重要的就是“角色”。因为角色是对 Basic Paxos 中最核心的三个功能的抽象，比如，由接受者（Acceptor）对提议的值进行投票，并存储接受的值。")]),a._v(" "),s("h2",{attrs:{id:"你需要了解的三种角色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你需要了解的三种角色"}},[a._v("#")]),a._v(" 你需要了解的三种角色")]),a._v(" "),s("p",[a._v("在 Basic Paxos 中，有提议者（Proposer）、接受者（Acceptor）、学习者（Learner）三种角色，他们之间的关系如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/365147/1587706264065-cd1de8e1-0424-4fc3-8df1-1b1add8bbbea.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),a._v(" "),s("p",[a._v("看着是不是有些复杂，其实并不难理解：")]),a._v(" "),s("ul",[s("li",[s("p",[s("strong",[a._v("提议者（Proposer）")]),a._v("：提议一个值，用于投票表决。为了方便演示，你可以把图 1 中的客户端 1 和 2 看作是提议者。但在绝大多数场景中，集群中收到客户端请求的节点，才是提议者（图 1 这个架构，是为了方便演示算法原理）。这样做的好处是，对业务代码没有入侵性，也就是说，我们不需要在业务代码中实现算法逻辑，就可以像使用数据库一样访问后端的数据。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("接受者（Acceptor）")]),a._v("：对每个提议的值进行投票，并存储接受的值，比如 A、B、C 三个节点。 一般来说，集群中的所有节点都在扮演接受者的角色，参与共识协商，并接受和存储数据。")])])]),a._v(" "),s("p",[a._v("讲到这儿，你可能会有疑惑：前面不是说接收客户端请求的节点是提议者吗？这里怎么又是接受者呢？这是因为一个节点（或进程）可以身兼多个角色。想象一下，一个 3 节点的集群，1 个节点收到了请求，那么该节点将作为提议者发起二阶段提交，然后这个节点和另外 2 个节点一起作为接受者进行共识协商，就像下图的样子：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/365147/1587706679666-615cb642-86cb-448f-9f69-d7cd0f8fa0be.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("学习者（Learner）")]),a._v("：被告知投票的结果，接受达成共识的值，存储保存，不参与投票的过程。一般来说，学习者是数据备份节点，比如“Master-Slave”模型中的 Slave，被动地接受数据，容灾备份。")])]),a._v(" "),s("p",[a._v("其实，这三种角色，在本质上代表的是三种功能：")]),a._v(" "),s("ul",[s("li",[a._v("提议者代表的是接入和协调功能，收到客户端请求后，发起二阶段提交，进行共识协商；")]),a._v(" "),s("li",[a._v("接受者代表投票协商和存储数据，对提议的值进行投票，并接受达成共识的值，存储保存；")]),a._v(" "),s("li",[a._v("学习者代表存储数据，不参与共识协商，只接受达成共识的值，存储保存。")])]),a._v(" "),s("p",[a._v("因为一个完整的算法过程是由这三种角色对应的功能组成的，所以理解这三种角色，是你理解 Basic Paxos 如何就提议的值达成共识的基础。那么接下来，咱们看看如何使用 Basic Paxos 达成共识，解决开篇提到的那道思考题。")]),a._v(" "),s("h2",{attrs:{id:"如何达成共识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何达成共识"}},[a._v("#")]),a._v(" 如何达成共识？")]),a._v(" "),s("p",[a._v("想象这样一个场景，现在疫情这么严重，每个村的路都封得差不多了，就你的村委会不作为，迟迟没有什么防疫的措施。你决定给村委会提交个提案，提一些防疫的建议，除了建议之外，为了和其他村民的提案做区分，你的提案还得包含一个提案编号，来起到唯一标识的作用。")]),a._v(" "),s("p",[a._v("与你的做法类似，在 Basic Paxos 中，兰伯特也使用提案代表一个提议。不过在提案中，除了提案编号，还包含了提议值。为了方便演示，我使用[n, v]表示一个提案，其中 n 为提案编号，v 为提议值。")]),a._v(" "),s("p",[a._v("我想强调一下，整个共识协商是分 2 个阶段进行的（也就是我在 03 讲提到的二阶段提交）。那么具体要如何协商呢？")]),a._v(" "),s("p",[a._v("我们假设客户端 1 的提案编号为 1，客户端 2 的提案编号为 5，并假设节点 A、B 先收到来自客户端 1 的准备请求，节点 C 先收到来自客户端 2 的准备请求。")]),a._v(" "),s("h3",{attrs:{id:"准备-prepare-阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备-prepare-阶段"}},[a._v("#")]),a._v(" 准备（Prepare）阶段")]),a._v(" "),s("p",[a._v("先来看第一个阶段，首先客户端 1、2 作为提议者，分别向所有接受者发送包含提案编号的准备请求：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/365147/1587706789059-df50a06d-5f9e-4f98-82d3-cd72d9b8ff05.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),a._v(" "),s("p",[s("strong",[a._v("你要注意，在准备请求中是不需要指定提议的值的，只需要携带提案编号就可以了，这是很多同学容易产生误解的地方。")])]),a._v(" "),s("p",[a._v("接着，当节点 A、B 收到提案编号为 1 的准备请求，节点 C 收到提案编号为 5 的准备请求后，将进行这样的处理：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/365147/1587706809358-28648188-8765-4f99-8357-6aff06516a10.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),a._v(" "),s("ul",[s("li",[s("p",[a._v("由于之前没有通过任何提案，所以节点 A、B 将返回一个 “尚无提案”的响应。也就是说节点 A 和 B 在告诉提议者，我之前没有通过任何提案呢，并承诺以后不再响应提案编号小于等于 1 的准备请求，不会通过编号小于 1 的提案。")])]),a._v(" "),s("li",[s("p",[a._v("节点 C 也是如此，它将返回一个 “尚无提案”的响应，并承诺以后不再响应提案编号小于等于 5 的准备请求，不会通过编号小于 5 的提案。")])])]),a._v(" "),s("p",[a._v("另外，当节点 A、B 收到提案编号为 5 的准备请求，和节点 C 收到提案编号为 1 的准备请求的时候，将进行这样的处理过程：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/365147/1587706840502-bde72894-eec3-400a-9cc6-a3c37491934b.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),a._v(" "),s("ul",[s("li",[a._v("当节点 A、B 收到提案编号为 5 的准备请求的时候，因为提案编号 5 大于它们之前响应的准备请求的提案编号 1，而且两个节点都没有通过任何提案，所以它将返回一个 “尚无提案”的响应，并承诺以后不再响应提案编号小于等于 5 的准备请求，不会通过编号小于 5 的提案。")]),a._v(" "),s("li",[a._v("当节点 C 收到提案编号为 1 的准备请求的时候，由于提案编号 1 小于它之前响应的准备请求的提案编号 5，所以丢弃该准备请求，不做响应。")])]),a._v(" "),s("h3",{attrs:{id:"接受-accept-阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接受-accept-阶段"}},[a._v("#")]),a._v(" 接受（Accept）阶段")]),a._v(" "),s("p",[a._v("第二个阶段也就是接受阶段，首先客户端 1、2 在收到大多数节点的准备响应之后，会分别发送接受请求：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/365147/1587706875129-e1133240-bf0a-49b7-9c16-10efc1f8aa72.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),a._v(" "),s("ul",[s("li",[a._v("当客户端 1 收到大多数的接受者（节点 A、B）的准备响应后，根据响应中提案编号最大的提案的值，设置接受请求中的值。因为该值在来自节点 A、B 的准备响应中都为空（也就是图 5 中的“尚无提案”），所以就把自己的提议值 3 作为提案的值，发送接受请求[1, 3]。")]),a._v(" "),s("li",[a._v("当客户端 2 收到大多数的接受者的准备响应后（节点 A、B 和节点 C），根据响应中提案编号最大的提案的值，来设置接受请求中的值。因为该值在来自节点 A、B、C 的准备响应中都为空（也就是图 5 和图 6 中的“尚无提案”），所以就把自己的提议值 7 作为提案的值，发送接受请求[5, 7]。")])]),a._v(" "),s("p",[a._v("当三个节点收到 2 个客户端的接受请求时，会进行这样的处理：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/365147/1587706907401-b177cd09-247a-46d2-8cbb-f83adfb59252.jpeg?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),a._v(" "),s("ul",[s("li",[a._v("当节点 A、B、C 收到接受请求[1, 3]的时候，由于提案的提案编号 1 小于三个节点承诺能通过的提案的最小提案编号 5，所以提案[1, 3]将被拒绝。")]),a._v(" "),s("li",[a._v("当节点 A、B、C 收到接受请求[5, 7]的时候，由于提案的提案编号 5 不小于三个节点承诺能通过的提案的最小提案编号 5，所以就通过提案[5, 7]，也就是接受了值 7，三个节点就 X 值为 7 达成了共识。")])]),a._v(" "),s("p",[a._v("讲到这儿我想补充一下，如果集群中有学习者，当接受者通过了一个提案时，就通知给所有的学习者。当学习者发现大多数的接受者都通过了某个提案，那么它也通过该提案，接受该提案的值。")]),a._v(" "),s("p",[a._v("通过上面的演示过程，你可以看到，最终各节点就 X 的值达成了共识。那么在这里我还想强调一下，Basic Paxos 的容错能力，源自“大多数”的约定，你可以这么理解：当少于一半的节点出现故障的时候，共识协商仍然在正常工作。")]),a._v(" "),s("h2",{attrs:{id:"内容小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内容小结"}},[a._v("#")]),a._v(" 内容小结")]),a._v(" "),s("p",[a._v("本节课我主要带你了解了 Basic Paxos 的原理和一些特点，我希望你明确这样几个重点。")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("你可以看到，Basic Paxos 是通过二阶段提交的方式来达成共识的。二阶段提交是达成共识的常用方式，如果你需要设计新的共识算法的时候，也可以考虑这个方式。")])]),a._v(" "),s("li",[s("p",[a._v("除了共识，Basic Paxos 还实现了容错，在少于一半的节点出现故障时，集群也能工作。它不像分布式事务算法那样，必须要所有节点都同意后才提交操作，因为“所有节点都同意”这个原则，在出现节点故障的时候会导致整个集群不可用。也就是说，“大多数节点都同意”的原则，赋予了 Basic Paxos 容错的能力，让它能够容忍少于一半的节点的故障。")])]),a._v(" "),s("li",[s("p",[a._v("本质上而言，提案编号的大小代表着优先级，你可以这么理解，根据提案编号的大小，接受者保证三个承诺，具体来说：如果准备请求的提案编号，小于等于接受者已经响应的准备请求的提案编号，那么接受者将承诺不响应这个准备请求；如果接受请求中的提案的提案编号，小于接受者已经响应的准备请求的提案编号，那么接受者将承诺不通过这个提案；如果接受者之前有通过提案，那么接受者将承诺，会在准备请求的响应中，包含已经通过的最大编号的提案信息。")])])]),a._v(" "),s("p",[a._v("参考：")]),a._v(" "),s("ol",[s("li",[a._v("https://time.geekbang.org/column/article/201700")]),a._v(" "),s("li",[a._v("https://zhuanlan.zhihu.com/p/31780743")]),a._v(" "),s("li",[a._v("[https://baike.baidu.com/item/Paxos%20%E7%AE%97%E6%B3%95/10688635?fr=aladdin](https://baike.baidu.com/item/Paxos 算法/10688635?fr=aladdin)")]),a._v(" "),s("li",[a._v("https://en.wikipedia.org/wiki/Paxos_(computer_science)")])])])}),[],!1,null,null,null);s.default=e.exports}}]);