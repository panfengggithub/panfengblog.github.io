(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{451:function(a,s,n){"use strict";n.r(s);var t=n(1),e=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java-并发编程一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-并发编程一"}},[a._v("#")]),a._v(" "),s("strong",[a._v("Java 并发编程一")])]),a._v(" "),s("h2",{attrs:{id:"_1、在-java-中守护线程和本地线程区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、在-java-中守护线程和本地线程区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("1、在 java 中守护线程和本地线程区别？")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("java 中的线程分为两种：守护线程（Daemon）和用户线程（User）。\n任何线程都可以设置为守护线程和用户线程，通过方法 Thread.setDaemon(bool\non)；true 则把该线程设置为守护线程，反之则为用户线程。Thread.setDaemon()\n必须在 Thread.start()之前调用，否则运行时会抛出异常。\n两者的区别：\n唯一的区别是判断虚拟机(JVM)何时离开，Daemon 是为其他线程提供服务，如果\n全部的 User Thread 已经撤离，Daemon 没有可服务的线程，JVM 撤离。也可\n以理解为守护线程是 JVM 自动创建的线程（但不一定），用户线程是程序创建的\n线程；比如 JVM 的垃圾回收线程是一个守护线程，当所有线程已经撤离，不再产\n生垃圾，守护线程自然就没事可干了，当垃圾回收线程是 Java 虚拟机上仅剩的线\n程时，Java 虚拟机会自动离开。\n扩展：Thread Dump 打印出来的线程信息，含有 daemon 字样的线程即为守护\n进程，可能会有：服务守护进程、编译守护进程、windows 下的监听 Ctrl+break\n的守护进程、Finalizer 守护进程、引用处理守护进程、GC 守护进程。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br")])]),s("h2",{attrs:{id:"_2、线程与进程的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、线程与进程的区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("2、线程与进程的区别？")])]),a._v(" "),s("p",[a._v("进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元。")]),a._v(" "),s("p",[a._v("一个程序至少有一个进程,一个进程至少有一个线程。")]),a._v(" "),s("h2",{attrs:{id:"_3、什么是多线程中的上下文切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、什么是多线程中的上下文切换"}},[a._v("#")]),a._v(" "),s("strong",[a._v("3、什么是多线程中的上下文切换？")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("多线程会共同使用一组计算机上的 CPU，而线程数大于给程序分配的 CPU 数量时，\n为了让各个线程都有执行的机会，就需要轮转使用 CPU。不同的线程切换使用 CPU\n发生的切换数据等就是上下文切换。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"_4、死锁与活锁的区别-死锁与饥饿的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、死锁与活锁的区别-死锁与饥饿的区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("4、死锁与活锁的区别，死锁与饥饿的区别？")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("死锁：是指两个或两个以上的进程（或线程）在执行过程中，因争夺资源而造成\n的一种互相等待的现象，若无外力作用，它们都将无法推进下去。\n产生死锁的必要条件：\n1、互斥条件：所谓互斥就是进程在某一时间内独占资源。\n2、请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。\n3、不剥夺条件:进程已获得资源，在末使用完之前，不能强行剥夺。\n4、循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。\n活锁：任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，\n失败，尝试，失败。\n活锁和死锁的区别在于，处于活锁的实体是在不断的改变状态，所谓的“活”， 而\n处于死锁的实体表现为等待；活锁有可能自行解开，死锁则不能。\n饥饿：一个或者多个线程因为种种原因无法获得所需要的资源，导致一直无法执\n行的状态。\nJava 中导致饥饿的原因：\n1、高优先级线程吞噬所有的低优先级线程的 CPU 时间。\n2、线程被永久堵塞在一个等待进入同步块的状态，因为其他线程总是能在它之前\n持续地对该同步块进行访问。\n3、线程在等待一个本身也处于永久等待完成的对象(比如调用这个对象的 wait 方\n法)，因为其他线程总是被持续地获得唤醒。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br")])]),s("h2",{attrs:{id:"_5、java-中用到的线程调度算法是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、java-中用到的线程调度算法是什么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("5、Java 中用到的线程调度算法是什么？")])]),a._v(" "),s("p",[a._v("采用时间片轮转的方式。可以设置线程的优先级，会映射到下层的系统上面的优")]),a._v(" "),s("p",[a._v("先级上，如非特别需要，尽量不要用，防止线程饥饿。")]),a._v(" "),s("h2",{attrs:{id:"_6、什么是线程组-为什么在-java-中不推荐使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、什么是线程组-为什么在-java-中不推荐使用"}},[a._v("#")]),a._v(" "),s("strong",[a._v("6、什么是线程组，为什么在 Java 中不推荐使用？")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("ThreadGroup 类，可以把线程归属到某一个线程组中，线程组中可以有线程对象，\n也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式。\n为什么不推荐使用？因为使用有很多的安全隐患吧，没有具体追究，如果需要使\n用，推荐使用线程池\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h2",{attrs:{id:"_7、为什么使用-executor-框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、为什么使用-executor-框架"}},[a._v("#")]),a._v(" "),s("strong",[a._v("7、为什么使用 Executor 框架？")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("每次执行任务创建线程 new Thread()比较消耗性能，创建一个线程是比较耗时、\n耗资源的。\n调用 new Thread()创建的线程缺乏管理，被称为野线程，而且可以无限制的创建，\n线程之间的相互竞争会导致过多占用系统资源而导致系统瘫痪，还有线程之间的\n频繁交替也会消耗很多系统资源。\n接使用 new Thread() 启动的线程不利于扩展，比如定时执行、定期执行、定时\n定期执行、线程中断等都不便实现。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h2",{attrs:{id:"_8、在-java-中-executor-和-executors-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8、在-java-中-executor-和-executors-的区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("8、在 Java 中 Executor 和 Executors 的区别？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Executors 工具类的不同方法按照我们的需求创建了不同的线程池，来满足业务\n的需求。\nExecutor 接口对象能执行我们的线程任务。\nExecutorService 接口继承了 Executor 接口并进行了扩展，提供了更多的方法我\n们能获得任务执行的状态并且可以获取任务的返回值。\n使用 ThreadPoolExecutor 可以创建自定义线程池。\nFuture 表示异步计算的结果，他提供了检查计算是否完成的方法，以等待计算的\n完成，并可以使用 get()方法获取计算的结果。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("h2",{attrs:{id:"_9、如何在-windows-和-linux-上查找哪个线程使用的-cpu-时间最长"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9、如何在-windows-和-linux-上查找哪个线程使用的-cpu-时间最长"}},[a._v("#")]),a._v(" "),s("strong",[a._v("9、如何在 Windows 和 Linux 上查找哪个线程使用的 CPU 时间最长？")])]),a._v(" "),s("p",[a._v("参考：")]),a._v(" "),s("p",[a._v("http://daiguahub.com/2016/07/31/使用 jstack 找出消耗 CPU 最多的线程代码/")]),a._v(" "),s("h2",{attrs:{id:"_10、什么是原子操作-在-java-concurrency-api-中有哪些原子类-atomic-classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10、什么是原子操作-在-java-concurrency-api-中有哪些原子类-atomic-classes"}},[a._v("#")]),a._v(" "),s("strong",[a._v("10、什么是原子操作？在 Java Concurrency API 中有哪些原子类(atomic classes)？")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("原子操作（atomic operation）意为”不可被中断的一个或一系列操作” 。\n处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。\n在 Java 中可以通过锁和循环 CAS 的方式来实现原子操作。 CAS 操作——\nCompare & Set，或是 Compare & Swap，现在几乎所有的 CPU 指令都支持 CAS\n的原子操作。\n原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境\n下避免数据不一致必须的手段。\nint++并不是一个原子操作，所以当一个线程读取它的值并加 1 时，另外一个线程\n有可能会读到之前的值，这就会引发错误。\n为了解决这个问题，必须保证增加操作是原子的，在 JDK1.5 之前我们可以使用同\n步技术来做到这一点。到 JDK1.5，java.util.concurrent.atomic 包提供了 int 和\nlong 类型的原子包装类，它们可以自动的保证对于他们的操作是原子的并且不需\n要使用同步。\n第 160 页 共 485 页\njava.util.concurrent 这个包里面提供了一组原子类。其基本的特性就是在多线程\n环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当\n某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像\n自旋锁一样，一直等到该方法执行完成，才由 JVM 从等待队列中选择一个另一个\n线程进入，这只是一种逻辑上的理解。\n原子类：AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference\n原子数组：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray\n原子属性更新器：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，\nAtomicReferenceFieldUpdater\n解决 ABA 问题的原子类：AtomicMarkableReference（通过引入一个 boolean\n来反映中间有没有变过），AtomicStampedReference（通过引入一个 int 来累\n加来反映中间有没有变过）\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br")])]),s("h2",{attrs:{id:"_11、java-concurrency-api-中的-lock-接口-lock-interface-是什么-对比同步它有什么优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11、java-concurrency-api-中的-lock-接口-lock-interface-是什么-对比同步它有什么优势"}},[a._v("#")]),a._v(" "),s("strong",[a._v("11、Java Concurrency API 中的 Lock 接口(Lock interface)是什么？对比同步它有什么优势？")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("Lock 接口比同步方法和同步块提供了更具扩展性的锁操作。\n他们允许更灵活的结构，可以具有完全不同的性质，并且可以支持多个相关类的\n条件对象。\n它的优势有：\n可以使锁更公平\n可以使线程在等待锁的时候响应中断\n可以让线程尝试获取锁，并在无法获取锁的时候立即返回或者等待一段时间\n可以在不同的范围，以不同的顺序获取和释放锁\n整体上来说 Lock 是 synchronized 的扩展版，Lock 提供了无条件的、可轮询的\n(tryLock 方法)、定时的(tryLock 带参方法)、可中断的(lockInterruptibly)、可多\n条件队列的(newCondition 方法)锁操作。另外 Lock 的实现类基本都支持非公平\n锁(默认)和公平锁，synchronized 只支持非公平锁，当然，在大部分情况下，非\n公平锁是高效的选择。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("h2",{attrs:{id:"_12、什么是-executors-框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12、什么是-executors-框架"}},[a._v("#")]),a._v(" "),s("strong",[a._v("12、什么是 Executors 框架？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Executor 框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的框\n架。\n无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的的\n解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。利用\nExecutors 框架可以非常方便的创建一个线程池。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h2",{attrs:{id:"_13、什么是阻塞队列-阻塞队列的实现原理是什么-如何使用阻塞队列来实现生产者-消费者模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13、什么是阻塞队列-阻塞队列的实现原理是什么-如何使用阻塞队列来实现生产者-消费者模型"}},[a._v("#")]),a._v(" "),s("strong",[a._v("13、什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。\n这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当\n队列满时，存储元素的线程会等待队列可用。\n阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消\n费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者\n也只从容器里拿元素。\nJDK7 提供了 7 个阻塞队列。分别是：\nArrayBlockingQueue ：一个由数组结构组成的有界阻塞队列。\nLinkedBlockingQueue ：一个由链表结构组成的有界阻塞队列。\nPriorityBlockingQueue ：一个支持优先级排序的无界阻塞队列。\nDelayQueue：一个使用优先级队列实现的无界阻塞队列。\nSynchronousQueue：一个不存储元素的阻塞队列。\nLinkedTransferQueue：一个由链表结构组成的无界阻塞队列。\nLinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。\nJava 5 之前实现同步存取时，可以使用普通的一个集合，然后在使用线程的协作\n和线程同步可以实现生产者，消费者模式，主要的技术就是用好，\nwait ,notify,notifyAll,sychronized 这些关键字。而在 java 5 之后，可以使用阻\n塞队列来实现，此方式大大简少了代码量，使得多线程编程更加容易，安全方面\n也有保障。\nBlockingQueue 接口是 Queue 的子接口，它的主要用途并不是作为容器，而是\n作为线程同步的的工具，因此他具有一个很明显的特性，当生产者线程试图向\nBlockingQueue 放入元素时，如果队列已满，则线程被阻塞，当消费者线程试图\n从中取出一个元素时，如果队列为空，则该线程会被阻塞，正是因为它所具有这\n个特性，所以在程序中多个线程交替向 BlockingQueue 中放入元素，取出元素，\n它可以很好的控制线程之间的通信。\n阻塞队列使用最经典的场景就是 socket 客户端数据的读取和解析，读取数据的线\n程不断将数据放入队列，然后解析线程不断从队列取数据解析。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br")])]),s("h2",{attrs:{id:"_14、什么是-callable-和-future"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14、什么是-callable-和-future"}},[a._v("#")]),a._v(" "),s("strong",[a._v("14、什么是 Callable 和 Future?")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Callable 接口类似于 Runnable，从名字就可以看出来了，但是 Runnable 不会返\n回结果，并且无法抛出返回结果的异常，而 Callable 功能更强大一些，被线程执\n行后，可以返回值，这个返回值可以被 Future 拿到，也就是说，Future 可以拿到\n异步执行任务的返回值。\n可以认为是带有回调的 Runnable。\nFuture 接口表示异步任务，是还没有完成的任务给出的未来结果。所以说 Callable\n用于产生结果，Future 用于获取结果。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h2",{attrs:{id:"_15、什么是-futuretask-使用-executorservice-启动任务。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15、什么是-futuretask-使用-executorservice-启动任务。"}},[a._v("#")]),a._v(" "),s("strong",[a._v("15、什么是 FutureTask?使用 ExecutorService 启动任务。")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("在 Java 并发程序中 FutureTask 表示一个可以取消的异步运算。它有启动和取消\n运算、查询运算是否完成和取回运算结果等方法。只有当运算完成的时候结果才\n能取回，如果运算尚未完成 get 方法将会阻塞。一个 FutureTask 对象可以对调用\n了 Callable 和 Runnable 的对象进行包装，由于 FutureTask 也是调用了 Runnable\n接口所以它可以提交给 Executor 来执行。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h2",{attrs:{id:"_16、什么是并发容器的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16、什么是并发容器的实现"}},[a._v("#")]),a._v(" "),s("strong",[a._v("16、什么是并发容器的实现？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("何为同步容器：可以简单地理解为通过 synchronized 来实现同步的容器，如果有\n多个线程调用同步容器的方法，它们将会串行执行。比如 Vector，Hashtable，\n以及 Collections.synchronizedSet，synchronizedList 等方法返回的容器。\n可以通过查看 Vector，Hashtable 等这些同步容器的实现代码，可以看到这些容\n器实现线程安全的方式就是将它们的状态封装起来，并在需要同步的方法上加上\n关键字 synchronized。\n并发容器使用了与同步容器完全不同的加锁策略来提供更高的并发性和伸缩性，\n例如在 ConcurrentHashMap 中采用了一种粒度更细的加锁机制，可以称为分段\n锁，在这种锁机制下，允许任意数量的读线程并发地访问 map，并且执行读操作\n的线程和写操作的线程也可以并发的访问 map，同时允许一定数量的写操作线程\n并发地修改 map，所以它可以在并发环境下实现更高的吞吐量。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("h2",{attrs:{id:"_17、多线程同步和互斥有几种实现方法-都是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17、多线程同步和互斥有几种实现方法-都是什么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("17、多线程同步和互斥有几种实现方法，都是什么？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("线程同步是指线程之间所具有的一种制约关系，一个线程的执行依赖另一个线程\n的消息，当它没有得到另一个线程的消息时应等待，直到消息到达时才被唤醒。\n线程互斥是指对于共享的进程系统资源，在各单个线程访问时的排它性。当有若\n干个线程都要使用某一共享资源时，任何时刻最多只允许一个线程去使用，其它\n要使用该资源的线程必须等待，直到占用资源者释放该资源。线程互斥可以看成\n是一种特殊的线程同步。\n线程间的同步方法大体可分为两类：用户模式和内核模式。顾名思义，内核模式\n就是指利用系统内核对象的单一性来进行同步，使用时需要切换内核态与用户态，\n而用户模式就是不需要切换到内核态，只在用户态完成操作。\n用户模式下的方法有：原子操作（例如一个单一的全局变量），临界区。内核模\n式下的方法有：事件，信号量，互斥量。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("h2",{attrs:{id:"_18、什么是竞争条件-你怎样发现和解决竞争"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18、什么是竞争条件-你怎样发现和解决竞争"}},[a._v("#")]),a._v(" "),s("strong",[a._v("18、什么是竞争条件？你怎样发现和解决竞争？")])]),a._v(" "),s("p",[a._v("当多个进程都企图对共享数据进行某种处理，而最后的结果又取决于进程运行的")]),a._v(" "),s("p",[a._v("顺序时，则我们认为这发生了竞争条件（race condition）。")]),a._v(" "),s("h2",{attrs:{id:"_19、你将如何使用-thread-dump-你将如何分析-threaddump"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19、你将如何使用-thread-dump-你将如何分析-threaddump"}},[a._v("#")]),a._v(" "),s("strong",[a._v("19、你将如何使用 thread dump？你将如何分析 Threaddump？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("新建状态（New）\n用 new 语句创建的线程处于新建状态，此时它和其他 Java 对象一样，仅仅在堆区\n中被分配了内存。\n就绪状态（Runnable）\n当一个线程对象创建后，其他线程调用它的 start()方法，该线程就进入就绪状态，\nJava 虚拟机会为它创建方法调用栈和程序计数器。处于这个状态的线程位于可运\n行池中，等待获得 CPU 的使用权。\n运行状态（Running）\n处于这个状态的线程占用 CPU，执行程序代码。只有处于就绪状态的线程才有机\n会转到运行状态。\n阻塞状态（Blocked）\n阻塞状态是指线程因为某些原因放弃 CPU，暂时停止运行。当线程处于阻塞状态\n时，Java 虚拟机不会给线程分配 CPU。直到线程重新进入就绪状态，它才有机会\n转到运行状态。\n阻塞状态可分为以下 3 种：\n位于对象等待池中的阻塞状态（Blocked in object’s wait pool）：\n当线程处于运行状态时，如果执行了某个对象的 wait()方法，Java 虚拟机就会把\n线程放到这个对象的等待池中，这涉及到“线程通信”的内容。\n位于对象锁池中的阻塞状态（Blocked in object’s lock pool）：\n当线程处于运行状态时，试图获得某个对象的同步锁时，如果该对象的同步锁已\n经被其他线程占用，Java 虚拟机就会把这个线程放到这个对象的锁池中，这涉及\n到“线程同步”的内容。\n其他阻塞状态（Otherwise Blocked）：\n当前线程执行了 sleep()方法，或者调用了其他线程的 join()方法，或者发出了 I/O\n请求时，就会进入这个状态。\n死亡状态（Dead）\n当线程退出 run()方法时，就进入死亡状态，该线程结束生命周期。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br")])]),s("h2",{attrs:{id:"_20、为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20、为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法"}},[a._v("#")]),a._v(" "),s("strong",[a._v("20、为什么我们调用 start()方法时会执行 run()方法，为什么我们不能直接调用 run()方法？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("当你调用 start()方法时你将创建新的线程，并且执行在 run()方法里的代码。\n但是如果你直接调用 run()方法，它不会创建新的线程也不会执行调用线程的代码，\n只会把 run 方法当作普通方法去执行。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"_21、java-中你怎样唤醒一个阻塞的线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21、java-中你怎样唤醒一个阻塞的线程"}},[a._v("#")]),a._v(" "),s("strong",[a._v("21、Java 中你怎样唤醒一个阻塞的线程？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("在 Java 发展史上曾经使用 suspend()、resume()方法对于线程进行阻塞唤醒，但\n随之出现很多问题，比较典型的还是死锁问题。\n解决方案可以使用以对象为目标的阻塞，即利用 Object 类的 wait()和 notify()方\n法实现线程阻塞。\n首先，wait、notify 方法是针对对象的，调用任意对象的 wait()方法都将导致线程\n阻塞，阻塞的同时也将释放该对象的锁，相应地，调用任意对象的 notify()方法则\n将随机解除该对象阻塞的线程，但它需要重新获取改对象的锁，直到获取成功才\n能往下执行；其次，wait、notify 方法必须在 synchronized 块或方法中被调用，\n并且要保证同步块或方法的锁对象与调用 wait、notify 方法的对象是同一个，如\n此一来在调用 wait 之前当前线程就已经成功获取某对象的锁，执行 wait 阻塞后当\n前线程就将之前获取的对象锁释放。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("h2",{attrs:{id:"_22、在-java-中-cyclibarriar-和-countdownlatch-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22、在-java-中-cyclibarriar-和-countdownlatch-有什么区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("22、在 Java 中 CycliBarriar 和 CountdownLatch 有什么区别？")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("CyclicBarrier 可以重复使用，而 CountdownLatch 不能重复使用。\nJava 的 concurrent 包里面的 CountDownLatch 其实可以把它看作一个计数器，\n只不过这个计数器的操作是原子操作，同时只能有一个线程去操作这个计数器，\n也就是同时只能有一个线程去减这个计数器里面的值。\n你可以向 CountDownLatch 对象设置一个初始的数字作为计数值，任何调用这个\n对象上的 await()方法都会阻塞，直到这个计数器的计数值被其他的线程减为 0 为\n止。\n所以在当前计数到达零之前，await 方法会一直受阻塞。之后，会释放所有等待\n的线程，await 的所有后续调用都将立即返回。这种现象只出现一次——计数无法\n被重置。如果需要重置计数，请考虑使用 CyclicBarrier。\nCountDownLatch 的一个非常典型的应用场景是：有一个任务想要往下执行，但\n必须要等到其他的任务执行完毕后才可以继续往下执行。假如我们这个想要继续\n往下执行的任务调用一个 CountDownLatch 对象的 await()方法，其他的任务执\n行完自己的任务后调用同一个 CountDownLatch 对象上的 countDown()方法，\n这个调用 await()方法的任务将一直阻塞等待，直到这个 CountDownLatch 对象\n的计数值减到 0 为止。\nCyclicBarrier 一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏\n障点 (common barrier point)。在涉及一组固定大小的线程的程序中，这些线程\n必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier 在释放等待\n线程后可以重用，所以称它为循环 的 barrier。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br")])]),s("h2",{attrs:{id:"_23、什么是不可变对象-它对写并发应用有什么帮助"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23、什么是不可变对象-它对写并发应用有什么帮助"}},[a._v("#")]),a._v(" "),s("strong",[a._v("23、什么是不可变对象，它对写并发应用有什么帮助？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("不可变对象(Immutable Objects)即对象一旦被创建它的状态（对象的数据，也即\n对象属性值）就不能改变，反之即为可变对象(Mutable Objects)。\n不可变对象的类即为不可变类(Immutable Class)。Java 平台类库中包含许多不可\n变类，如 String、基本类型的包装类、BigInteger 和 BigDecimal 等。\n不可变对象天生是线程安全的。它们的常量（域）是在构造函数中创建的。既然\n它们的状态无法修改，这些常量永远不会变。\n不可变对象永远是线程安全的。\n只有满足如下状态，一个对象才是不可变的；\n它的状态不能在创建后再被修改；\n所有域都是 final 类型；并且，\n它被正确创建（创建期间没有发生 this 引用的逸出）。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("h2",{attrs:{id:"_24、什么是多线程中的上下文切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24、什么是多线程中的上下文切换"}},[a._v("#")]),a._v(" "),s("strong",[a._v("24、什么是多线程中的上下文切换？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("在上下文切换过程中，CPU 会停止处理当前运行的程序，并保存当前程序运行的\n具体位置以便之后继续运行。从这个角度来看，上下文切换有点像我们同时阅读\n几本书，在来回切换书本的同时我们需要记住每本书当前读到的页码。在程序中，\n上下文切换过程中的“页码”信息是保存在进程控制块（PCB）中的。PCB 还经\n常被称作“切换桢”（switchframe）。“页码”信息会一直保存到 CPU 的内存\n中，直到他们被再次使用。\n上下文切换是存储和恢复 CPU 状态的过程，它使得线程执行能够从中断点恢复执\n行。上下文切换是多任务操作系统和多线程环境的基本特征。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("h2",{attrs:{id:"_25、java-中用到的线程调度算法是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25、java-中用到的线程调度算法是什么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("25、Java 中用到的线程调度算法是什么？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("计算机通常只有一个 CPU,在任意时刻只能执行一条机器指令,每个线程只有获得\nCPU 的使用权才能执行指令.所谓多线程的并发运行,其实是指从宏观上看,各个线\n程轮流获得 CPU 的使用权,分别执行各自的任务.在运行池中,会有多个处于就绪状\n态的线程在等待 CPU,JAVA 虚拟机的一项任务就是负责线程的调度,线程调度是指\n按照特定机制为多个线程分配 CPU 的使用权.\n有两种调度模型：分时调度模型和抢占式调度模型。\n分时调度模型是指让所有的线程轮流获得 cpu 的使用权,并且平均分配每个线程占\n用的 CPU 的时间片这个也比较好理解。\njava 虚拟机采用抢占式调度模型，是指优先让可运行池中优先级高的线程占用\nCPU，如果可运行池中的线程优先级相同，那么就随机选择一个线程，使其占用\nCPU。处于运行状态的线程会一直运行，直至它不得不放弃 CPU。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("h2",{attrs:{id:"_27、为什么使用-executor-框架比使用应用创建和管理线程好"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27、为什么使用-executor-框架比使用应用创建和管理线程好"}},[a._v("#")]),a._v(" "),s("strong",[a._v("27、为什么使用 Executor 框架比使用应用创建和管理线程好？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("为什么要使用 Executor 线程池框架\n1、每次执行任务创建线程 new Thread()比较消耗性能，创建一个线程是比较耗\n时、耗资源的。\n2、调用 new Thread()创建的线程缺乏管理，被称为野线程，而且可以无限制的\n创建，线程之间的相互竞争会导致过多占用系统资源而导致系统瘫痪，还有线程\n之间的频繁交替也会消耗很多系统资源。\n3、直接使用 new Thread() 启动的线程不利于扩展，比如定时执行、定期执行、\n定时定期执行、线程中断等都不便实现。\n使用 Executor 线程池框架的优点\n1、能复用已存在并空闲的线程从而减少线程对象的创建从而减少了消亡线程的开\n销。\n2、可有效控制最大并发线程数，提高系统资源使用率，同时避免过多资源竞争。\n3、框架中已经有定时、定期、单线程、并发数控制等功能。\n综上所述使用线程池框架 Executor 能更好的管理线程、提供系统资源使用率。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br")])]),s("h2",{attrs:{id:"_28、java-中有几种方法可以实现一个线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28、java-中有几种方法可以实现一个线程"}},[a._v("#")]),a._v(" "),s("strong",[a._v("28、java 中有几种方法可以实现一个线程？")])]),a._v(" "),s("p",[a._v("继承 Thread 类")]),a._v(" "),s("p",[a._v("实现 Runnable 接口")]),a._v(" "),s("p",[a._v("实现 Callable 接口，需要实现的是 call() 方法")]),a._v(" "),s("h2",{attrs:{id:"_29、如何停止一个正在运行的线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29、如何停止一个正在运行的线程"}},[a._v("#")]),a._v(" "),s("strong",[a._v("29、如何停止一个正在运行的线程？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("使用共享变量的方式\n在这种方式中，之所以引入共享变量，是因为该变量可以被多个执行相同任务的\n线程用来作为是否中断的信号，通知中断线程的执行。\n使用 interrupt 方法终止线程\n如果一个线程由于等待某些事件的发生而被阻塞，又该怎样停止该线程呢？这种\n情况经常会发生，比如当一个线程由于需要等候键盘输入而被阻塞，或者调用\nThread.join()方法，或者 Thread.sleep()方法，在网络中调用\nServerSocket.accept()方法，或者调用了 DatagramSocket.receive()方法时，都\n有可能导致线程阻塞，使线程处于处于不可运行状态时，即使主程序中将该线程\n的共享变量设置为 true，但该线程此时根本无法检查循环标志，当然也就无法立\n即中断。这里我们给出的建议是，不要使用 stop()方法，而是使用 Thread 提供的\ninterrupt()方法，因为该方法虽然不会中断一个正在运行的线程，但是它可以使一\n个被阻塞的线程抛出一个中断异常，从而使线程提前结束阻塞状态，退出堵塞代\n码。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br")])]),s("h2",{attrs:{id:"_30、notify-和-notifyall-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30、notify-和-notifyall-有什么区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("30、notify()和 notifyAll()有什么区别？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("当一个线程进入 wait 之后，就必须等其他线程 notify/notifyall,使用 notifyall,可\n以唤醒所有处于 wait 状态的线程，使其重新进入锁的争夺队列中，而 notify 只能\n唤醒一个。\n如果没把握，建议 notifyAll，防止 notigy 因为信号丢失而造成程序异常。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h2",{attrs:{id:"_32、java-如何实现多线程之间的通讯和协作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32、java-如何实现多线程之间的通讯和协作"}},[a._v("#")]),a._v(" "),s("strong",[a._v("32、java 如何实现多线程之间的通讯和协作？")])]),a._v(" "),s("p",[a._v("中断 和 共享变量")]),a._v(" "),s("h2",{attrs:{id:"_33、什么是可重入锁-reentrantlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33、什么是可重入锁-reentrantlock"}},[a._v("#")]),a._v(" "),s("strong",[a._v("33、什么是可重入锁（ReentrantLock）？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("举例来说明锁的可重入性\npublic class UnReentrant{\nLock lock = new Lock();\npublic void outer(){\nlock.lock();\ninner();\nlock.unlock();\n}\npublic void inner(){\nlock.lock();\n//do something\nlock.unlock();\n}\n}\nouter 中调用了 inner，outer 先锁住了 lock，这样 inner 就不能再获取 lock。其\n实调用 outer 的线程已经获取了 lock 锁，但是不能在 inner 中重复利用已经获取\n的锁资源，这种锁即称之为 不可重入可重入就意味着：线程可以进入任何一个它\n已经拥有的锁所同步着的代码块。\nsynchronized、ReentrantLock 都是可重入的锁，可重入锁相对来说简化了并发\n编程的开发。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br")])]),s("h2",{attrs:{id:"_34、当一个线程进入某个对象的一个-synchronized-的实例方法后-其它线程是否可进入此对象的其它方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34、当一个线程进入某个对象的一个-synchronized-的实例方法后-其它线程是否可进入此对象的其它方法"}},[a._v("#")]),a._v(" "),s("strong",[a._v("34、当一个线程进入某个对象的一个 synchronized 的实例方法后，其它线程是否可进入此对象的其它方法？")])]),a._v(" "),s("p",[a._v("如果其他方法没有 synchronized 的话，其他线程是可以进入的。")]),a._v(" "),s("p",[a._v("所以要开放一个线程安全的对象时，得保证每个方法都是线程安全的。")]),a._v(" "),s("h2",{attrs:{id:"_35、乐观锁和悲观锁的理解及如何实现-有哪些实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35、乐观锁和悲观锁的理解及如何实现-有哪些实现方式"}},[a._v("#")]),a._v(" "),s("strong",[a._v("35、乐观锁和悲观锁的理解及如何实现，有哪些实现方式？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("悲观锁：总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每\n次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。传\n统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写\n锁等，都是在做操作之前先上锁。再比如 Java 里面的同步原语 synchronized 关\n键字的实现也是悲观锁。\n乐观锁：顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所\n以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，\n可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，\n像数据库提供的类似于 write_condition 机制，其实都是提供的乐观锁。在 Java\n中 java.util.concurrent.atomic 包下面的原子变量类就是使用了乐观锁的一种实\n现方式 CAS 实现的。\n乐观锁的实现方式：\n1、使用版本标识来确定读到的数据与提交时的数据是否一致。提交后修改版本标\n识，不一致时可以采取丢弃和再次尝试的策略。\n2、java 中的 Compare and Swap 即 CAS ，当多个线程尝试使用 CAS 同时更新\n同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的\n线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。 CAS 操作\n中包含三个操作数 —— 需要读写的内存位置（V）、进行比较的预期原值（A）\n和拟写入的新值(B)。如果内存位置 V 的值与预期原值 A 相匹配，那么处理器会自\n动将该位置值更新为新值 B。否则处理器不做任何操作。\nCAS 缺点：\n1、ABA 问题：\n比如说一个线程 one 从内存位置 V 中取出 A，这时候另一个线程 two 也从内存中\n取出 A，并且 two 进行了一些操作变成了 B，然后 two 又将 V 位置的数据变成 A，\n这时候线程 one 进行 CAS 操作发现内存中仍然是 A，然后 one 操作成功。尽管线\n程 one 的 CAS 操作成功，但可能存在潜藏的问题。从 Java1.5 开始 JDK 的 atomic\n包里提供了一个类 AtomicStampedReference 来解决 ABA 问题。\n2、循环时间长开销大：\n对于资源竞争严重（线程冲突严重）的情况，CAS 自旋的概率会比较大，从而浪\n费更多的 CPU 资源，效率低于 synchronized。\n3、只能保证一个共享变量的原子操作：\n当对一个共享变量执行操作时，我们可以使用循环 CAS 的方式来保证原子操作，\n但是对多个共享变量操作时，循环 CAS 就无法保证操作的原子性，这个时候就可\n以用锁。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br")])]),s("h2",{attrs:{id:"_36、synchronizedmap-和-concurrenthashmap-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36、synchronizedmap-和-concurrenthashmap-有什么区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("36、SynchronizedMap 和 ConcurrentHashMap 有什么区别？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SynchronizedMap 一次锁住整张表来保证线程安全，所以每次只能有一个线程来\n访为 map。\nConcurrentHashMap 使用分段锁来保证在多线程下的性能。\nConcurrentHashMap 中则是一次锁住一个桶。ConcurrentHashMap 默认将\nhash 表分为 16 个桶，诸如 get,put,remove 等常用操作只锁当前需要用到的桶。\n这样，原来只能一个线程进入，现在却能同时有 16 个写线程执行，并发性能的提\n升是显而易见的。\n另外 ConcurrentHashMap 使用了一种不同的迭代方式。在这种迭代方式中，当\niterator 被创建后集合再发生改变就不再是抛出\nConcurrentModificationException，取而代之的是在改变时 new 新的数据从而\n不影响原有的数据 ，iterator 完成后再将头指针替换为新的数据 ，这样 iterator\n线程可以使用原来老的数据，而写线程也可以并发的完成改变。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("h2",{attrs:{id:"_37、copyonwritearraylist-可以用于什么应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_37、copyonwritearraylist-可以用于什么应用场景"}},[a._v("#")]),a._v(" "),s("strong",[a._v("37、CopyOnWriteArrayList 可以用于什么应用场景？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CopyOnWriteArrayList(免锁容器)的好处之一是当多个迭代器同时遍历和修改这\n个列表时，不会抛出 ConcurrentModificationException。在\nCopyOnWriteArrayList 中，写入将导致创建整个底层数组的副本，而源数组将保\n留在原地，使得复制的数组在被修改时，读取操作可以安全地执行。\n1、由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的\n情况下，可能导致 young gc 或者 full gc；\n2、不能用于实时读的场景，像拷贝数组、新增元素都需要时间，所以调用一个 set\n操作后，读取到数据可能还是旧的,虽然 CopyOnWriteArrayList 能做到最终一致\n性,但是还是没法满足实时性要求；\nCopyOnWriteArrayList 透露的思想\n1、读写分离，读和写分开\n2、最终一致性\n3、使用另外开辟空间的思路，来解决并发冲突\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("h2",{attrs:{id:"_38、什么叫线程安全-servlet-是线程安全吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_38、什么叫线程安全-servlet-是线程安全吗"}},[a._v("#")]),a._v(" "),s("strong",[a._v("38、什么叫线程安全？servlet 是线程安全吗?")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("线程安全是编程中的术语，指某个函数、函数库在多线程环境中被调用时，能够\n正确地处理多个线程之间的共享变量，使程序功能正确完成。\nServlet 不是线程安全的，servlet 是单实例多线程的，当多个线程同时访问同一个\n方法，是不能保证共享变量的线程安全性的。\nStruts2 的 action 是多实例多线程的，是线程安全的，每个请求过来都会 new 一\n个新的 action 分配给这个请求，请求完成后销毁。\nSpringMVC 的 Controller 是线程安全的吗？不是的，和 Servlet 类似的处理流程。\nStruts2 好处是不用考虑线程安全问题；Servlet 和 SpringMVC 需要考虑线程安\n全问题，但是性能可以提升不用处理太多的 gc，可以使用 ThreadLocal 来处理多\n线程的问题。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("h2",{attrs:{id:"_39、volatile-有什么用-能否用一句话说明下-volatile-的应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_39、volatile-有什么用-能否用一句话说明下-volatile-的应用场景"}},[a._v("#")]),a._v(" "),s("strong",[a._v("39、volatile 有什么用？能否用一句话说明下 volatile 的应用场景？")])]),a._v(" "),s("p",[a._v("volatile 保证内存可见性和禁止指令重排。")]),a._v(" "),s("p",[a._v("volatile 用于多线程环境下的单次操作(单次读或者单次写)。")]),a._v(" "),s("h2",{attrs:{id:"_40、为什么代码会重排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_40、为什么代码会重排序"}},[a._v("#")]),a._v(" "),s("strong",[a._v("40、为什么代码会重排序？")])]),a._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[a._v("在执行程序时，为了提供性能，处理器和编译器常常会对指令进行重排序，但是\n不能随意重排序，不是你想怎么排序就怎么排序，它需要满足以下两个条件：\n在单线程环境下不能改变程序运行的结果；\n存在数据依赖关系的不允许重排序\n需要注意的是：重排序不会影响单线程环境的执行结果，但是会破坏多线程的执\n行语义。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h2",{attrs:{id:"_41、在-java-中-wait-和-sleep-方法的不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_41、在-java-中-wait-和-sleep-方法的不同"}},[a._v("#")]),a._v(" "),s("strong",[a._v("41、在 java 中 wait 和 sleep 方法的不同？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("最大的不同是在等待时 wait 会释放锁，而 sleep 一直持有锁。Wait 通常被用于线\n程间交互，sleep 通常被用于暂停执行。\n直接了解的深入一点吧：\n在 Java 中线程的状态一共被分成 6 种：\n初始态：NEW\n创建一个 Thread 对象，但还未调用 start()启动线程时，线程处于初始态。\n运行态：RUNNABLE\n在 Java 中，运行态包括就绪态 和 运行态。\n就绪态 该状态下的线程已经获得执行所需的所有资源，只要 CPU 分配执行权就\n能运行。所有就绪态的线程存放在就绪队列中。\n运行态 获得 CPU 执行权，正在执行的线程。由于一个 CPU 同一时刻只能执行一\n条线程，因此每个 CPU 每个时刻只有一条运行态的线程。\n阻塞态\n当一条正在执行的线程请求某一资源失败时，就会进入阻塞态。而在 Java 中，阻\n塞态专指请求锁失败时进入的状态。由一个阻塞队列存放所有阻塞态的线程。处\n于阻塞态的线程会不断请求资源，一旦请求成功，就会进入就绪队列，等待执行。\nPS：锁、IO、Socket 等都资源。\n等待态\n当前线程中调用 wait、join、park 函数时，当前线程就会进入等待态。也有一个\n等待队列存放所有等待态的线程。线程处于等待态表示它需要等待其他线程的指\n示才能继续运行。进入等待态的线程会释放 CPU 执行权，并释放资源（如：锁）\n超时等待态\n当运行中的线程调用 sleep(time)、wait、join、parkNanos、parkUntil 时，就\n会进入该状态；它和等待态一样，并不是因为请求不到资源，而是主动进入，并\n且进入后需要其他线程唤醒；进入该状态后释放 CPU 执行权 和 占有的资源。与\n等待态的区别：到了超时时间后自动进入阻塞队列，开始竞争锁。\n终止态\n线程执行结束后的状态。\n注意：\nwait()方法会释放 CPU 执行权 和 占有的锁。\nsleep(long)方法仅释放 CPU 使用权，锁仍然占用；线程被放入超时等待队列，与\nyield 相比，它会使线程较长时间得不到运行。\nyield()方法仅释放 CPU 执行权，锁仍然占用，线程会被放入就绪队列，会在短时\n间内再次执行。\nwait 和 notify 必须配套使用，即必须使用同一把锁调用；\nwait 和 notify 必须放在一个同步块中调用 wait 和 notify 的对象必须是他们所处\n同步块的锁对象\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br")])]),s("h2",{attrs:{id:"_42、用-java-实现阻塞队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_42、用-java-实现阻塞队列"}},[a._v("#")]),a._v(" "),s("strong",[a._v("42、用 Java 实现阻塞队列")])]),a._v(" "),s("p",[a._v("参考 java 中的阻塞队列的内容吧，直接实现有点烦：")]),a._v(" "),s("p",[a._v("http://www.infoq.com/cn/articles/java-blocking-queue")]),a._v(" "),s("h2",{attrs:{id:"_43、一个线程运行时发生异常会怎样"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_43、一个线程运行时发生异常会怎样"}},[a._v("#")]),a._v(" "),s("strong",[a._v("43、一个线程运行时发生异常会怎样？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("如果异常没有被捕获该线程将会停止执行。Thread.UncaughtExceptionHandler\n是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异\n常将造成线程中断的时候 JVM 会使用 Thread.getUncaughtExceptionHandler()\n来查询线程的 UncaughtExceptionHandler 并将线程和异常作为参数传递给\nhandler 的 uncaughtException()方法进行处理。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h2",{attrs:{id:"_44、如何在两个线程间共享数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_44、如何在两个线程间共享数据"}},[a._v("#")]),a._v(" "),s("strong",[a._v("44、如何在两个线程间共享数据？")])]),a._v(" "),s("p",[a._v("在两个线程间共享变量即可实现共享。")]),a._v(" "),s("p",[a._v("一般来说，共享变量要求变量本身是线程安全的，然后在线程内使用的时候，如")]),a._v(" "),s("p",[a._v("果有对共享变量的复合操作，那么也得保证复合操作的线程安全性。")]),a._v(" "),s("h2",{attrs:{id:"_45、java-中-notify-和-notifyall-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_45、java-中-notify-和-notifyall-有什么区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("45、Java 中 notify 和 notifyAll 有什么区别？")])]),a._v(" "),s("p",[a._v("notify() 方法不能唤醒某个具体的线程，所以只有一个线程在等待的时候它才有")]),a._v(" "),s("p",[a._v("用武之地。而 notifyAll()唤醒所有线程并允许他们争夺锁确保了至少有一个线程")]),a._v(" "),s("p",[a._v("能继续运行。")]),a._v(" "),s("h2",{attrs:{id:"_46、为什么-wait-notify-和-notifyall-这些方法不在-thread类里面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_46、为什么-wait-notify-和-notifyall-这些方法不在-thread类里面"}},[a._v("#")]),a._v(" "),s("strong",[a._v("46、为什么 wait, notify 和 notifyAll 这些方法不在 thread类里面？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("一个很明显的原因是 JAVA 提供的锁是对象级的而不是线程级的，每个对象都有\n锁，通过线程获得。由于 wait，notify 和 notifyAll 都是锁级别的操作，所以把他\n们定义在 Object 类中因为锁属于对象。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"_47、什么是-threadlocal-变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_47、什么是-threadlocal-变量"}},[a._v("#")]),a._v(" "),s("strong",[a._v("47、什么是 ThreadLocal 变量？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ThreadLocal 是 Java 里一种特殊的变量。每个线程都有一个 ThreadLocal 就是每\n个线程都拥有了自己独立的一个变量，竞争条件被彻底消除了。它是为创建代价\n高昂的对象获取线程安全的好方法，比如你可以用 ThreadLocal 让\nSimpleDateFormat 变成线程安全的，因为那个类创建代价高昂且每次调用都需\n要创建不同的实例所以不值得在局部范围使用它，如果为每个线程提供一个自己\n独有的变量拷贝，将大大提高效率。首先，通过复用减少了代价高昂的对象的创\n建个数。其次，你在没有使用高代价的同步或者不变性的情况下获得了线程安全。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h2",{attrs:{id:"_48、java-中-interrupted-和-isinterrupted-方法的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_48、java-中-interrupted-和-isinterrupted-方法的区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("48、Java 中 interrupted 和 isInterrupted 方法的区别？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("interrupt\ninterrupt 方法用于中断线程。调用该方法的线程的状态为将被置为”中断”状态。\n注意：线程中断仅仅是置线程的中断状态位，不会停止线程。需要用户自己去监\n视线程的状态为并做处理。支持线程中断的方法（也就是线程中断后会抛出\ninterruptedException 的方法）就是在监视线程的中断状态，一旦线程的中断状\n态被置为“中断状态”，就会抛出中断异常。\ninterrupted\n查询当前线程的中断状态，并且清除原状态。如果一个线程被中断了，第一次调\n用 interrupted 则返回 true，第二次和后面的就返回 false 了。\nisInterrupted\n仅仅是查询当前线程的中断状态\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("h2",{attrs:{id:"_49、为什么-wait-和-notify-方法要在同步块中调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_49、为什么-wait-和-notify-方法要在同步块中调用"}},[a._v("#")]),a._v(" "),s("strong",[a._v("49、为什么 wait 和 notify 方法要在同步块中调用？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Java API 强制要求这样做，如果你不这么做，你的代码会抛出\nIllegalMonitorStateException 异常。还有一个原因是为了避免 wait 和 notify\n之间产生竞态条件。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"_50、为什么你应该在循环中检查等待条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_50、为什么你应该在循环中检查等待条件"}},[a._v("#")]),a._v(" "),s("strong",[a._v("50、为什么你应该在循环中检查等待条件?")])]),a._v(" "),s("p",[a._v("处于等待状态的线程可能会收到错误警报和伪唤醒，如果不在循环中检查等待条")]),a._v(" "),s("p",[a._v("件，程序就会在没有满足结束条件的情况下退出。")]),a._v(" "),s("h2",{attrs:{id:"_51、java-中的同步集合与并发集合有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_51、java-中的同步集合与并发集合有什么区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("51、Java 中的同步集合与并发集合有什么区别？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("同步集合与并发集合都为多线程和并发提供了合适的线程安全的集合，不过并发\n集合的可扩展性更高。在 Java1.5 之前程序员们只有同步集合来用且在多线程并发\n的时候会导致争用，阻碍了系统的扩展性。Java5 介绍了并发集合像\nConcurrentHashMap，不仅提供线程安全还用锁分离和内部分区等现代技术提高\n了可扩展性。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h2",{attrs:{id:"_52、什么是线程池-为什么要使用它"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_52、什么是线程池-为什么要使用它"}},[a._v("#")]),a._v(" "),s("strong",[a._v("52、什么是线程池？ 为什么要使用它？")])]),a._v(" "),s("p",[a._v("创建线程要花费昂贵的资源和时间，如果任务来了才创建线程那么响应时间会变")]),a._v(" "),s("p",[a._v("长，而且一个进程能创建的线程数有限。为了避免这些问题，在程序启动的时候")]),a._v(" "),s("p",[a._v("就创建若干线程来响应处理，它们被称为线程池，里面的线程叫工作线程。从")]),a._v(" "),s("p",[a._v("JDK1.5 开始，Java API 提供了 Executor 框架让你可以创建不同的线程池。")]),a._v(" "),s("h2",{attrs:{id:"_53、怎么检测一个线程是否拥有锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_53、怎么检测一个线程是否拥有锁"}},[a._v("#")]),a._v(" "),s("strong",[a._v("53、怎么检测一个线程是否拥有锁？")])]),a._v(" "),s("p",[a._v("在 java.lang.Thread 中有一个方法叫 holdsLock()，它返回 true 如果当且仅当当")]),a._v(" "),s("p",[a._v("前线程拥有某个具体对象的锁。")]),a._v(" "),s("h2",{attrs:{id:"_54、你如何在-java-中获取线程堆栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_54、你如何在-java-中获取线程堆栈"}},[a._v("#")]),a._v(" "),s("strong",[a._v("54、你如何在 Java 中获取线程堆栈？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("kill -3 [java pid]\n不会在当前终端输出，它会输出到代码执行的或指定的地方去。比如，kill -3\ntomcat pid, 输出堆栈到 log 目录下。\nJstack [java pid]\n这个比较简单，在当前终端显示，也可以重定向到指定文件中。\n-JvisualVM：Thread Dump\n不做说明，打开 JvisualVM 后，都是界面操作，过程还是很简单的。\n55、JVM 中哪个参数是用来控制线程的栈堆栈小的?\n-Xss 每个线程的栈大小\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("h2",{attrs:{id:"_56、thread-类中的-yield-方法有什么作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_56、thread-类中的-yield-方法有什么作用"}},[a._v("#")]),a._v(" "),s("strong",[a._v("56、Thread 类中的 yield 方法有什么作用？")])]),a._v(" "),s("p",[a._v("使当前线程从执行状态（运行状态）变为可执行态（就绪状态）。")]),a._v(" "),s("p",[a._v("当前线程到了就绪状态，那么接下来哪个线程会从就绪状态变成执行状态呢？可")]),a._v(" "),s("p",[a._v("能是当前线程，也可能是其他线程，看系统的分配了。")]),a._v(" "),s("h2",{attrs:{id:"_57、java-中-concurrenthashmap-的并发度是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_57、java-中-concurrenthashmap-的并发度是什么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("57、Java 中 ConcurrentHashMap 的并发度是什么？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ConcurrentHashMap 把实际 map 划分成若干部分来实现它的可扩展性和线程安\n全。这种划分是使用并发度获得的，它是 ConcurrentHashMap 类构造函数的一\n个可选参数，默认值为 16，这样在多线程情况下就能避免争用。\n在 JDK8 后，它摒弃了 Segment（锁段）的概念，而是启用了一种全新的方式实\n现,利用 CAS 算法。同时加入了更多的辅助变量来提高并发度，具体内容还是查看\n源码吧。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h2",{attrs:{id:"_58、java-中-semaphore-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_58、java-中-semaphore-是什么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("58、Java 中 Semaphore 是什么？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Java 中的 Semaphore 是一种新的同步类，它是一个计数信号。从概念上讲，从\n概念上讲，信号量维护了一个许可集合。如有必要，在许可可用前会阻塞每一个\nacquire()，然后再获取该许可。每个 release()添加一个许可，从而可能释放一个\n正在阻塞的获取者。但是，不使用实际的许可对象，Semaphore 只对可用许可的\n号码进行计数，并采取相应的行动。信号量常常用于多线程的代码中，比如数据\n库连接池。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h2",{attrs:{id:"_59、java-线程池中-submit-和-execute-方法有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_59、java-线程池中-submit-和-execute-方法有什么区别"}},[a._v("#")]),a._v(" "),s("strong",[a._v("59、Java 线程池中 submit() 和 execute()方法有什么区别？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("两个方法都可以向线程池提交任务，execute()方法的返回类型是 void，它定义在\nExecutor 接口中。\n而 submit()方法可以返回持有计算结果的 Future 对象，它定义在\nExecutorService 接口中，它扩展了 Executor 接口，其它线程池类像\nThreadPoolExecutor 和 ScheduledThreadPoolExecutor 都有这些方法。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h2",{attrs:{id:"_60、什么是阻塞式方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_60、什么是阻塞式方法"}},[a._v("#")]),a._v(" "),s("strong",[a._v("60、什么是阻塞式方法？")])]),a._v(" "),s("p",[a._v("阻塞式方法是指程序会一直等待该方法完成期间不做其他事情，ServerSocket 的")]),a._v(" "),s("p",[a._v("accept()方法就是一直等待客户端连接。这里的阻塞是指调用结果返回之前，当前")]),a._v(" "),s("p",[a._v("线程会被挂起，直到得到结果之后才会返回。此外，还有异步和非阻塞式方法在")]),a._v(" "),s("p",[a._v("任务完成前就返回。")]),a._v(" "),s("h2",{attrs:{id:"_61、java-中的-readwritelock-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_61、java-中的-readwritelock-是什么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("61、Java 中的 ReadWriteLock 是什么？")])]),a._v(" "),s("p",[a._v("读写锁是用来提升并发程序性能的锁分离技术的成果。")]),a._v(" "),s("h2",{attrs:{id:"_62、volatile-变量和-atomic-变量有什么不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_62、volatile-变量和-atomic-变量有什么不同"}},[a._v("#")]),a._v(" "),s("strong",[a._v("62、volatile 变量和 atomic 变量有什么不同？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Volatile 变量可以确保先行关系，即写操作会发生在后续的读操作之前, 但它并不\n能保证原子性。例如用 volatile 修饰 count 变量那么 count++ 操作就不是原子\n性的。\n而 AtomicInteger 类提供的 atomic 方法可以让这种操作具有原子性如\ngetAndIncrement()方法会原子性的进行增量操作把当前值加一，其它数据类型\n和引用变量也可以进行相似操作。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h2",{attrs:{id:"_63、可以直接调用-thread-类的-run-方法么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_63、可以直接调用-thread-类的-run-方法么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("63、可以直接调用 Thread 类的 run ()方法么？")])]),a._v(" "),s("p",[a._v("当然可以。但是如果我们调用了 Thread 的 run()方法，它的行为就会和普通的方")]),a._v(" "),s("p",[a._v("法一样，会在当前线程中执行。为了在新的线程中执行我们的代码，必须使用")]),a._v(" "),s("p",[a._v("Thread.start()方法。")]),a._v(" "),s("h2",{attrs:{id:"_64、如何让正在运行的线程暂停一段时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_64、如何让正在运行的线程暂停一段时间"}},[a._v("#")]),a._v(" "),s("strong",[a._v("64、如何让正在运行的线程暂停一段时间？")])]),a._v(" "),s("p",[a._v("我们可以使用 Thread 类的 Sleep()方法让线程暂停一段时间。需要注意的是，这")]),a._v(" "),s("p",[a._v("并不会让线程终止，一旦从休眠中唤醒线程，线程的状态将会被改变为 Runnable，")]),a._v(" "),s("p",[a._v("并且根据线程调度，它将得到执行。")]),a._v(" "),s("h2",{attrs:{id:"_65、你对线程优先级的理解是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_65、你对线程优先级的理解是什么"}},[a._v("#")]),a._v(" "),s("strong",[a._v("65、你对线程优先级的理解是什么？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("每一个线程都是有优先级的，一般来说，高优先级的线程在运行时会具有优先权，\n但这依赖于线程调度的实现，这个实现是和操作系统相关的(OS dependent)。我\n们可以定义线程的优先级，但是这并不能保证高优先级的线程会在低优先级的线\n程前执行。线程优先级是一个 int 变量(从 1-10)，1 代表最低优先级，10 代表最\n高优先级。\njava 的线程优先级调度会委托给操作系统去处理，所以与具体的操作系统优先级\n有关，如非特别需要，一般无需设置线程优先级。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h2",{attrs:{id:"_66、什么是线程调度器-thread-scheduler-和时间分片-timeslicing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_66、什么是线程调度器-thread-scheduler-和时间分片-timeslicing"}},[a._v("#")]),a._v(" "),s("strong",[a._v("66、什么是线程调度器(Thread Scheduler)和时间分片(TimeSlicing )？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("线程调度器是一个操作系统服务，它负责为 Runnable 状态的线程分配 CPU 时间。\n一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现。\n同上一个问题，线程调度并不受到 Java 虚拟机控制，所以由应用程序来控制它是\n更好的选择（也就是说不要让你的程序依赖于线程的优先级）。\n时间分片是指将可用的 CPU 时间分配给可用的 Runnable 线程的过程。分配 CPU\n时间可以基于线程优先级或者线程等待的时间。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h2",{attrs:{id:"_67、你如何确保-main-方法所在的线程是-java-程序最后结束的线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_67、你如何确保-main-方法所在的线程是-java-程序最后结束的线程"}},[a._v("#")]),a._v(" "),s("strong",[a._v("67、你如何确保 main()方法所在的线程是 Java 程序最后结束的线程？")])]),a._v(" "),s("p",[a._v("我们可以使用 Thread 类的 join()方法来确保所有程序创建的线程在 main()方法退")]),a._v(" "),s("p",[a._v("出前结束。")]),a._v(" "),s("h2",{attrs:{id:"_68、线程之间是如何通信的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_68、线程之间是如何通信的"}},[a._v("#")]),a._v(" "),s("strong",[a._v("68、线程之间是如何通信的？")])]),a._v(" "),s("p",[a._v("当线程间是可以共享资源时，线程间通信是协调它们的重要的手段。Object 类中")]),a._v(" "),s("p",[a._v("wait()\\notify()\\notifyAll()方法可以用于线程间通信关于资源的锁的状态。")]),a._v(" "),s("h2",{attrs:{id:"_69、为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_69、为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里"}},[a._v("#")]),a._v(" "),s("strong",[a._v("69、为什么线程通信的方法 wait(), notify()和 notifyAll()被定义在 Object 类里？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Java 的每个对象中都有一个锁(monitor，也可以成为监视器) 并且 wait()，notify()\n等方法用于等待对象的锁或者通知其他线程对象的监视器可用。在 Java 的线程中\n并没有可供任何对象使用的锁和同步器。这就是为什么这些方法是 Object 类的一\n部分，这样 Java 的每一个类都有用于线程间通信的基本方法。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h2",{attrs:{id:"_70、为什么-wait-notify-和-notifyall-必须在同步方法或者同步块中被调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_70、为什么-wait-notify-和-notifyall-必须在同步方法或者同步块中被调用"}},[a._v("#")]),a._v(" "),s("strong",[a._v("70、为什么 wait(), notify()和 notifyAll ()必须在同步方法或者同步块中被调用？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("当一个线程需要调用对象的 wait()方法的时候，这个线程必须拥有该对象的锁，接\n着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的 notify()\n方法。同样的，当一个线程需要调用对象的 notify()方法时，它会释放这个对象的\n锁，以便其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要\n线程持有对象的锁，这样就只能通过同步来实现，所以他们只能在同步方法或者\n同步块中被调用。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h2",{attrs:{id:"_71、为什么-thread-类的-sleep-和-yield-方法是静态的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_71、为什么-thread-类的-sleep-和-yield-方法是静态的"}},[a._v("#")]),a._v(" "),s("strong",[a._v("71、为什么 Thread 类的 sleep()和 yield ()方法是静态的？")])]),a._v(" "),s("p",[a._v("Thread 类的 sleep()和 yield()方法将在当前正在执行的线程上运行。所以在其他")]),a._v(" "),s("p",[a._v("处于等待状态的线程上调用这些方法是没有意义的。这就是为什么这些方法是静")]),a._v(" "),s("p",[a._v("态的。它们可以在当前正在执行的线程中工作，并避免程序员错误的认为可以在")]),a._v(" "),s("p",[a._v("其他非运行线程调用这些方法。")]),a._v(" "),s("h2",{attrs:{id:"_72、如何确保线程安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_72、如何确保线程安全"}},[a._v("#")]),a._v(" "),s("strong",[a._v("72、如何确保线程安全？")])]),a._v(" "),s("p",[a._v("在 Java 中可以有很多方法来保证线程安全——同步，使用原子类(atomic")]),a._v(" "),s("p",[a._v("concurrent classes)，实现并发锁，使用 volatile 关键字，使用不变类和线程安")]),a._v(" "),s("p",[a._v("全类。")]),a._v(" "),s("h2",{attrs:{id:"_73、同步方法和同步块-哪个是更好的选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_73、同步方法和同步块-哪个是更好的选择"}},[a._v("#")]),a._v(" "),s("strong",[a._v("73、同步方法和同步块，哪个是更好的选择？")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("同步块是更好的选择，因为它不会锁住整个对象（当然你也可以让它锁住整个对\n象）。同步方法会锁住整个对象，哪怕这个类中有多个不相关联的同步块，这通\n常会导致他们停止执行并需要等待获得这个对象上的锁。\n同步块更要符合开放调用的原则，只在需要锁住的代码块锁住相应的对象，这样\n从侧面来说也可以避免死锁。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h2",{attrs:{id:"_74、如何创建守护线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_74、如何创建守护线程"}},[a._v("#")]),a._v(" "),s("strong",[a._v("74、如何创建守护线程？")])]),a._v(" "),s("p",[a._v("使用 Thread 类的 setDaemon(true)方法可以将线程设置为守护线程，需要注意")]),a._v(" "),s("p",[a._v("的是，需要在调用 start()方法前调用这个方法，否则会抛出")]),a._v(" "),s("p",[a._v("IllegalThreadStateException 异常。")]),a._v(" "),s("h2",{attrs:{id:"_75、什么是-java-timer-类-如何创建一个有特定时间间隔的任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_75、什么是-java-timer-类-如何创建一个有特定时间间隔的任务"}},[a._v("#")]),a._v(" "),s("strong",[a._v("75、什么是 Java Timer 类？如何创建一个有特定时间间隔的任务？")])]),a._v(" "),s("p",[a._v("java.util.Timer 是一个工具类，可以用于安排一个线程在未来的某个特定时间执")]),a._v(" "),s("p",[a._v("行。Timer 类可以用安排一次性任务或者周期任务。")]),a._v(" "),s("p",[a._v("java.util.TimerTask 是一个实现了 Runnable 接口的抽象类，我们需要去继承这")]),a._v(" "),s("p",[a._v("个类来创建我们自己的定时任务并使用 Timer 去安排它的执行。")])])}),[],!1,null,null,null);s.default=e.exports}}]);