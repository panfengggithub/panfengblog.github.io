(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{458:function(s,n,a){"use strict";a.r(n);var e=a(1),r=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"spring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[s._v("#")]),s._v(" Spring")]),s._v(" "),n("h2",{attrs:{id:"_1、spring-framework-有哪些不同的功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、spring-framework-有哪些不同的功能"}},[s._v("#")]),s._v(" "),n("strong",[s._v("1、Spring Framework 有哪些不同的功能？")])]),s._v(" "),n("p",[n("strong",[s._v("轻量级")]),s._v(" - Spring 在代码量和透明度方面都很轻便。"),n("strong",[s._v("IOC")]),s._v(" - 控制反转 "),n("strong",[s._v("AOP")]),s._v(" - 面向")]),s._v(" "),n("p",[s._v("切面编程可以将应用业务逻辑和系统服务分离，以实现高内聚。"),n("strong",[s._v("容器")]),s._v(" - Spring 负")]),s._v(" "),n("p",[s._v("责创建和管理对象（Bean）的生命周期和配置。"),n("strong",[s._v("MVC")]),s._v(" - 对 web 应用提供了高")]),s._v(" "),n("p",[s._v("度可配置性，其他框架的集成也十分方便。"),n("strong",[s._v("事务管理")]),s._v(" - 提供了用于事务管理的通")]),s._v(" "),n("p",[s._v("用抽象层。Spring 的事务支持也可用于容器较少的环境。"),n("strong",[s._v("JDBC 异常")]),s._v(" - Spring")]),s._v(" "),n("p",[s._v("的 JDBC 抽象层提供了一个异常层次结构，简化了错误处理策略。")]),s._v(" "),n("h2",{attrs:{id:"_2、spring-framework-中有多少个模块-它们分别是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、spring-framework-中有多少个模块-它们分别是什么"}},[s._v("#")]),s._v(" "),n("strong",[s._v("2、Spring Framework 中有多少个模块，它们分别是什么？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Spring 核心容器 – 该层基本上是 Spring Framework 的核心。它包含以下模\n块：\n Spring Core\n Spring Bean\n SpEL (Spring Expression Language)\n Spring Context\n数据访问/集成 – 该层提供与数据库交互的支持。它包含以下模块：\n JDBC (Java DataBase Connectivity)\n ORM (Object Relational Mapping)\n OXM (Object XML Mappers)\n JMS (Java Messaging Service)\n Transaction\nWeb – 该层提供了创建 Web 应用程序的支持。它包含以下模块：\n Web\n Web – Servlet\n Web – Socket\n Web – Portlet\nAOP\n 该层支持面向切面编程\nInstrumentation\n 该层为类检测和类加载器实现提供支持。\nTest\n 该层为使用 JUnit 和 TestNG 进行测试提供支持。\n几个杂项模块:\nMessaging – 该模块为 STOMP 提供支持。它还支持注解编程模型，该模型用\n于从 WebSocket 客户端路由和处理 STOMP 消息。\nAspects – 该模块为与 AspectJ 的集成提供支持。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("h2",{attrs:{id:"_3、什么是-spring-配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、什么是-spring-配置文件"}},[s._v("#")]),s._v(" "),n("strong",[s._v("3、什么是 Spring 配置文件？")])]),s._v(" "),n("p",[s._v("Spring 配置文件是 XML 文件。该文件主要包含类信息。它描述了这些类是如何")]),s._v(" "),n("p",[s._v("配置以及相互引入的。但是，XML 配置文件冗长且更加干净。如果没有正确规划")]),s._v(" "),n("p",[s._v("和编写，那么在大项目中管理变得非常困难。")]),s._v(" "),n("h2",{attrs:{id:"_4、spring-应用程序有哪些不同组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、spring-应用程序有哪些不同组件"}},[s._v("#")]),s._v(" "),n("strong",[s._v("4、Spring 应用程序有哪些不同组件？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Spring 应用一般有以下组件：\n 接口 - 定义功能。\n Bean 类 - 它包含属性，setter 和 getter 方法，函数等。\n Spring 面向切面编程（AOP） - 提供面向切面编程的功能。\n Bean 配置文件 - 包含类的信息以及如何配置它们。\n 用户程序 - 它使用接口。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"_5、什么是-spring-bean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、什么是-spring-bean"}},[s._v("#")]),s._v(" "),n("strong",[s._v("5、什么是 spring bean？")])]),s._v(" "),n("p",[s._v("它们是构成用户应用程序主干的对象。")]),s._v(" "),n("p",[s._v("Bean 由 Spring IoC 容器管理。")]),s._v(" "),n("p",[s._v("它们由 Spring IoC 容器实例化，配置，装配和管理。")]),s._v(" "),n("p",[s._v("Bean 是基于用户提供给容器的配置元数据创建。")]),s._v(" "),n("h2",{attrs:{id:"_6、spring-支持集中-bean-scope"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、spring-支持集中-bean-scope"}},[s._v("#")]),s._v(" "),n("strong",[s._v("6、spring 支持集中 bean scope？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Spring bean 支持 5 种 scope：\nSingleton - 每个 Spring IoC 容器仅有一个单实例。Prototype - 每次请求都\n会产生一个新的实例。Request - 每一次 HTTP 请求都会产生一个新的实例，并\n且该 bean 仅在当前 HTTP 请求内有效。Session - 每一次 HTTP 请求都会产\n生一个新的 bean，同时该 bean 仅在当前 HTTP session 内有效。\nGlobal-session - 类似于标准的 HTTP Session 作用域，不过它仅仅在基于\nportlet 的 web 应用中才有意义。Portlet 规范定义了全局 Session 的概念，\n它被所有构成某个 portlet web 应用的各种不同的 portlet 所共享。在 global\nsession 作用域中定义的 bean 被限定于全局 portlet Session 的生命周期范\n围内。如果你在 web 中使用 global session 作用域来标识 bean，那么 web\n会自动当成 session 类型来使用。\n仅当用户使用支持 Web 的 ApplicationContext 时，最后三个才可用。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"_7、spring-bean-容器的生命周期是什么样的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、spring-bean-容器的生命周期是什么样的"}},[s._v("#")]),s._v(" "),n("strong",[s._v("7、spring bean 容器的生命周期是什么样的？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("spring bean 容器的生命周期流程如下：\n1、Spring 容器根据配置中的 bean 定义中实例化 bean。\n2、Spring 使用依赖注入填充所有属性，如 bean 中所定义的配置。\n3、如果 bean 实现BeanNameAware 接口，则工厂通过传递 bean 的 ID 来调用setBeanName()。\n4、如果 bean 实现 BeanFactoryAware 接口，工厂通过传递自身的实例来调用 setBeanFactory()。\n5、如果存在与 bean 关联的任何BeanPostProcessors，则调用 preProcessBeforeInitialization() 方法。\n6、如果为 bean 指定了 init 方法（ <bean> 的 init-method 属性），那么将调\n用它。\n7、最后，如果存在与 bean 关联的任何 BeanPostProcessors，则将调postProcessAfterInitialization() 方法。\n8、如果 bean 实现DisposableBean 接口，当 spring 容器关闭时，会调用 destory()。\n9、如果为bean 指定了 destroy 方法（ <bean> 的 destroy-method 属性），那么将调用它\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"_8、什么是-aspect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8、什么是-aspect"}},[s._v("#")]),s._v(" "),n("strong",[s._v("8、什么是 Aspect？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("aspect 由 pointcount 和 advice 组成, 它既包含了横切逻辑的定义, 也包\n括了连接点的定义. Spring AOP 就是负责实施切面的框架, 它将切面所定义的横\n切逻辑编织到切面所指定的连接点中. AOP 的工作重心在于如何将增强编织目标\n对象的连接点上, 这里包含两个工作:\n1、如何通过 pointcut 和 advice 定位到特定的 joinpoint 上 2、如何在\nadvice 中编写切面代码.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"_9、什么是切点-joinpoint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9、什么是切点-joinpoint"}},[s._v("#")]),s._v(" "),n("strong",[s._v("9、什么是切点（JoinPoint）")])]),s._v(" "),n("p",[s._v("程序运行中的一些时间点, 例如一个方法的执行, 或者是一个异常的处理.")]),s._v(" "),n("p",[s._v("在 Spring AOP 中, join point 总是方法的执行点。")]),s._v(" "),n("h2",{attrs:{id:"_10、什么是通知-advice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10、什么是通知-advice"}},[s._v("#")]),s._v(" "),n("strong",[s._v("10、什么是通知（Advice）？")])]),s._v(" "),n("p",[s._v("特定 JoinPoint 处的 Aspect 所采取的动作称为 Advice。Spring AOP 使用一")]),s._v(" "),n("p",[s._v("个 Advice 作为拦截器，在 JoinPoint")]),s._v(" "),n("p",[s._v("“周围”维护一系列的拦截器。")]),s._v(" "),n("h2",{attrs:{id:"_11、有哪些类型的通知-advice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11、有哪些类型的通知-advice"}},[s._v("#")]),s._v(" "),n("strong",[s._v("11、有哪些类型的通知（Advice）？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Before - 这些类型的 Advice 在 joinpoint 方法之前执行，并使用\n@Before 注解标记进行配置。\n After Returning - 这些类型的 Advice 在连接点方法正常执行后执\n行，并使用@AfterReturning 注解标记进行配置。\n After Throwing - 这些类型的 Advice 仅在 joinpoint 方法通过抛出\n异常退出并使用 @AfterThrowing 注解标记配置时执行。\n After (finally) - 这些类型的 Advice 在连接点方法之后执行，无论方\n法退出是正常还是异常返回，并使用 @After 注解标记进行配置。\n Around - 这些类型的 Advice 在连接点之前和之后执行，并使用\n@Around 注解标记进行配置。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"_12、指出在-spring-aop-中-concern-和-cross-cuttingconcern-的不同之处。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12、指出在-spring-aop-中-concern-和-cross-cuttingconcern-的不同之处。"}},[s._v("#")]),s._v(" "),n("strong",[s._v("12、指出在 spring aop 中 concern 和 cross-cuttingconcern 的不同之处。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("concern 是我们想要在应用程序的特定模块中定义的行为。它可以定义为我们想\n要实现的功能。\ncross-cutting concern 是一个适用于整个应用的行为，这会影响整个应用程序。\n例如，日志记录，安全性和数据传输是应用程序几乎每个模块都需要关注的问题，\n因此它们是跨领域的问题。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"_13、aop-有哪些实现方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13、aop-有哪些实现方式"}},[s._v("#")]),s._v(" "),n("strong",[s._v("13、AOP 有哪些实现方式？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("实现 AOP 的技术，主要分为两大类：\n静态代理\n指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，\n因此也称为编译时增强；\n 编译时编织（特殊编译器实现）\n 类加载时编织（特殊的类加载器实现）。\n动态代理\n在运行时在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。\n JDK 动态代理\n CGLIB\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"_14、spring-aop-and-aspectj-aop-有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14、spring-aop-and-aspectj-aop-有什么区别"}},[s._v("#")]),s._v(" "),n("strong",[s._v("14、Spring AOP and AspectJ AOP 有什么区别？")])]),s._v(" "),n("p",[s._v("Spring AOP 基于动态代理方式实现；AspectJ 基于静态代理方式实现。Spring")]),s._v(" "),n("p",[s._v("AOP 仅支持方法级别的 PointCut；提供了完全的 AOP 支持，它还支持属性级")]),s._v(" "),n("p",[s._v("别的 PointCut。")]),s._v(" "),n("h2",{attrs:{id:"_15、如何理解-spring-中的代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15、如何理解-spring-中的代理"}},[s._v("#")]),s._v(" "),n("strong",[s._v("15、如何理解 Spring 中的代理？")])]),s._v(" "),n("p",[s._v("将 Advice 应用于目标对象后创建的对象称为代理。在客户端对象的情况下，目")]),s._v(" "),n("p",[s._v("标对象和代理对象是相同的。")]),s._v(" "),n("h2",{attrs:{id:"_16、spring-mvc-框架有什么用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16、spring-mvc-框架有什么用"}},[s._v("#")]),s._v(" "),n("strong",[s._v("16、Spring MVC 框架有什么用？")])]),s._v(" "),n("p",[s._v("Spring Web MVC 框架提供 "),n("strong",[s._v("模型-视图-控制器")]),s._v(" 架构和随时可用的组件，用于开")]),s._v(" "),n("p",[s._v("发灵活且松散耦合的 Web 应用程序。MVC 模式有助于分离应用程序的不同方")]),s._v(" "),n("p",[s._v("面，如输入逻辑，业务逻辑和 UI 逻辑，同时在所有这些元素之间提供松散耦合。")]),s._v(" "),n("h2",{attrs:{id:"_17、描述一下-dispatcherservlet-的工作流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17、描述一下-dispatcherservlet-的工作流程"}},[s._v("#")]),s._v(" "),n("strong",[s._v("17、描述一下 DispatcherServlet 的工作流程")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1、向服务器发送 HTTP 请求，请求被前端控制器 DispatcherServlet 捕获。\n2、 DispatcherServlet 根据 -servlet.xml 中的配置对请求的 URL 进行解\n析，得到请求资源标识符（URI）。然后根据该 URI，调用 HandlerMapping\n获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对\n象对应的拦截器），最后以 HandlerExecutionChain 对象的形式返回。\n3、 DispatcherServlet 根据获得的 Handler，选择一个合适的\nHandlerAdapter。（附注：如果成功获得 HandlerAdapter 后，此时将开始\n执行拦截器的 preHandler(...)方法）。\n4、提取 Request 中的模型数据，填充 Handler 入参，开始执行 Handler\n（ Controller)。在填充 Handler 的入参过程中，根据你的配置，Spring 将\n帮你做一些额外的工作\n HttpMessageConveter：将请求消息（如 Json、xml 等数据）转换\n成一个对象，将对象转换为指定的响应信息。\n 数据转换：对请求消息进行数据转换。如 String 转换成 Integer、\nDouble 等。\n 数据根式化：对请求消息进行数据格式化。如将字符串转换成格式化数字\n或格式化日期等。\n 数据验证：验证数据的有效性（长度、格式等），验证结果存储到\nBindingResult 或 Error 中。\n5、Handler(Controller)执行完成后，向 DispatcherServlet 返回一个\nModelAndView 对象；\n6、根据返回的 ModelAndView，选择一个适合的 ViewResolver（必须是已\n经注册到 Spring 容器中的 ViewResolver)返回给 DispatcherServlet。\n7、 ViewResolver 结合 Model 和 View，来渲染视图。\n8、视图负责将渲染结果返回给客户端。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("h2",{attrs:{id:"_18、使用-spring-框架的好处是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18、使用-spring-框架的好处是什么"}},[s._v("#")]),s._v(" "),n("strong",[s._v("18、使用 Spring 框架的好处是什么？")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" 轻量：Spring 是轻量的，基本的版本大约 2MB。\n 控制反转：Spring 通过控制反转实现了松散耦合，对象们给出它们的依\n赖，而不是创建或查找依赖的对象们。\n 面向切面的编程(AOP)：Spring 支持面向切面的编程，并且把应用业务\n逻辑和系统服务分开。\n 容器：Spring 包含并管理应用中对象的生命周期和配置。\n MVC 框架：Spring 的 WEB 框架是个精心设计的框架，是 Web 框架的\n一个很好的替代品。\n 事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地\n事务下至全局事务（JTA）。\n 异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，\nHibernate or JDO 抛出的）转化为一致的 unchecked 异常。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);