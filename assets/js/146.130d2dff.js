(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{560:function(_,v,t){"use strict";t.r(v);var p=t(1),r=Object(p.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"nginx-负载均衡与生产环境应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nginx-负载均衡与生产环境应用"}},[_._v("#")]),_._v(" "),v("strong",[_._v("Nginx 负载均衡与生产环境应用")])]),_._v(" "),v("p",[v("strong",[_._v("概要：")])]),_._v(" "),v("p",[_._v("\\1.   Nginx 反向代理与负载均衡")]),_._v(" "),v("p",[_._v("\\2.   Nginx 实现高速缓存")]),_._v(" "),v("p",[_._v("\\3.   Nginx 性能参数调优")]),_._v(" "),v("p",[_._v("一、Nginx 反向代理实现")]),_._v(" "),v("p",[_._v("知识点：")]),_._v(" "),v("p",[_._v("\\1.   反向代理基本配置")]),_._v(" "),v("p",[_._v("\\2.   负载均衡配置与参数解析")]),_._v(" "),v("p",[_._v("\\3.   负载均衡算法详解")]),_._v(" "),v("p",[_._v("\\1.  反向代理基本配置")]),_._v(" "),v("p",[_._v("提问：什么是反向代理其与正向代理有什么区别？")]),_._v(" "),v("p",[v("strong",[_._v("正向代理的概念：")])]),_._v(" "),v("p",[_._v("正向代理是指客户端与目标服务器之间增加一个代理服务器，客户端直接访问代理服务器，在由代理服务器访问目标服务器并返回客户端并返回 。这个过程当中客户端需要知道代理服务器地址，并配置连接。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/365147/1586935864446-044eb86b-ac9b-4c62-8ee8-82a8345095d4.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),_._v(" "),v("p",[v("strong",[_._v("反向代理的概念：")])]),_._v(" "),v("p",[_._v("反向代理是指 客户端访问目标服务器，在目标服务内部有一个统一接入网关将请求转发至后端真正处理的服务器并返回结果。这个过程当中客户端不需要知道代理服务器地址，代理对客户端而言是透明的。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/365147/1586935876767-bc88f106-ae55-4027-a268-4fd9267bf4b1.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_15%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),_._v(" "),v("p",[v("strong",[_._v("反向代理与正向代理的区别")])]),_._v(" "),v("table",[v("thead",[v("tr",[v("th"),_._v(" "),v("th",[v("strong",[_._v("正向代理")])]),_._v(" "),v("th",[v("strong",[_._v("反向代理")])])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("代理服务器位置")]),_._v(" "),v("td",[_._v("客户端与服务都能连接的们位置")]),_._v(" "),v("td",[_._v("目标服务器内部")])]),_._v(" "),v("tr",[v("td",[_._v("主要作用")]),_._v(" "),v("td",[_._v("屏蔽客户端IP、集中式缓存、解决客户端不能直连服务端的问题。")]),_._v(" "),v("td",[_._v("屏蔽服务端内部实现、负载均衡、缓存。")])]),_._v(" "),v("tr",[v("td",[_._v("应用场景")]),_._v(" "),v("td",[_._v("爬虫、翻墙、maven   的nexus 服务")]),_._v(" "),v("td",[_._v("Nginx 、Apache负载均衡应用")])])])]),_._v(" "),v("p",[v("strong",[_._v("Nginx****代理基本配置")])]),_._v(" "),v("p",[_._v("Nginx 代理只需要配置 location 中配置proxy_pass 属性即可。其指向代理的服务器地址。")]),_._v(" "),v("p",[_._v("# 正向代理到baidu 服务")]),_._v(" "),v("p",[_._v("location = /baidu.html {")]),_._v(" "),v("p",[_._v("​     proxy_pass http://www.baidu.com;")]),_._v(" "),v("p",[_._v("}")]),_._v(" "),v("p",[_._v("# 反向代理至 本机的8010服务")]),_._v(" "),v("p",[_._v("location /luban/ {")]),_._v(" "),v("p",[_._v("proxy_pass http://127.0.0.1:8010;")]),_._v(" "),v("p",[_._v("}")]),_._v(" "),v("p",[v("strong",[_._v("代理相关参数：")])]),_._v(" "),v("p",[_._v("proxy_pass      # 代理服务")]),_._v(" "),v("p",[_._v("proxy_redirect off;  # 是否允许重定向")]),_._v(" "),v("p",[_._v("proxy_set_header Host $host; # 传 header 参数至后端服务")]),_._v(" "),v("p",[_._v("proxy_set_header X-Forwarded-For $remote_addr; # 设置request header 即客户端IP 地址")]),_._v(" "),v("p",[_._v("proxy_connect_timeout 90; # 连接代理服务超时时间")]),_._v(" "),v("p",[_._v("proxy_send_timeout 90; # 请求发送最大时间")]),_._v(" "),v("p",[_._v("proxy_read_timeout 90; # 读取最大时间")]),_._v(" "),v("p",[_._v("proxy_buffer_size 4k;")]),_._v(" "),v("p",[_._v("proxy_buffers 4 32k;")]),_._v(" "),v("p",[_._v("proxy_busy_buffers_size 64k;")]),_._v(" "),v("p",[_._v("proxy_temp_file_write_size 64k;")]),_._v(" "),v("p",[_._v("2.负载均衡配置与参数解析")]),_._v(" "),v("p",[_._v("通过proxy_pass 可以把请求代理至后端服务，但是为了实现更高的负载及性能， 我们的后端服务通常是多个， 这个是时候可以通过upstream 模块实现负载均衡。")]),_._v(" "),v("p",[v("strong",[_._v("演示****upstream")]),_._v(" "),v("strong",[_._v("的实现。")])]),_._v(" "),v("p",[_._v("upstream backend {")]),_._v(" "),v("p",[_._v("server 127.0.0.1:8010 weight=1;")]),_._v(" "),v("p",[_._v("server 127.0.0.1:8080 weight=2;")]),_._v(" "),v("p",[_._v("server 127.0.0.1:8030 weight=1 backup;")]),_._v(" "),v("p",[_._v("}")]),_._v(" "),v("p",[_._v("location / {")]),_._v(" "),v("p",[_._v("proxy_pass http://backend;")]),_._v(" "),v("p",[_._v("}")]),_._v(" "),v("p",[v("strong",[_._v("upstream")]),_._v(" "),v("strong",[_._v("相关参数")]),_._v("**😗*")]),_._v(" "),v("p",[_._v("l server  反向服务地址 加端口")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("weight")]),_._v("  权重")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("max_fails")]),_._v("  失败多少次 认为主机已挂掉则，踢出")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("fail_timeout")]),_._v("    踢出后重新探测时间")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("backup")]),_._v(" 备用服务")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("max_conns")]),_._v(" 允许最大连接数")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("slow_start")]),_._v("  当节点恢复，不立即加入,而是等待 slow_start 后加入服务对列。")]),_._v(" "),v("p",[_._v("3.upstream 负载均衡算法介绍")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("ll+weight")]),_._v("**：** 轮询加权重 (默认)")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("ip_hash :")]),_._v(" 基于Hash 计算 ,用于保持session 一至性")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("url_hash:")]),_._v(" 静态资源缓存,节约存储，加快速度（第三方）")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("least_conn")]),_._v(" ：最少链接（第三方）")]),_._v(" "),v("p",[_._v("l "),v("strong",[_._v("least_time")]),_._v(" ：最小的响应时间,计算节点平均响应时间，然后取响应最快的那个，分配更高权重（第三方）")]),_._v(" "),v("p",[_._v("二、Nginx 高速缓存")]),_._v(" "),v("p",[_._v("知识点：")]),_._v(" "),v("p",[_._v("\\1.   缓存案例分析")]),_._v(" "),v("p",[_._v("\\2.   Nginx 静态缓存基本配置")]),_._v(" "),v("p",[_._v("\\3.   缓存更新")]),_._v(" "),v("p",[_._v("1、案例分析：")]),_._v(" "),v("p",[_._v("​    某电商平台商品详情页需要实现 700+ QPS，如何着手去做？")]),_._v(" "),v("p",[_._v("\\1.   首先为分析一下一个商品详情页有哪些信息")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/365147/1586936062792-0da6b2e3-3b38-40ce-9acc-e8a84f57c513.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),_._v(" "),v("p",[_._v("​    从中得出 商品详情页依懒了")]),_._v(" "),v("p",[v("strong",[_._v("对于商品详情页涉及了如下主要服务：")])]),_._v(" "),v("p",[_._v("l 商品详情页HTML页面渲染")]),_._v(" "),v("p",[_._v("l 价格服务")]),_._v(" "),v("p",[_._v("l  促销服务")]),_._v(" "),v("p",[_._v("l  库存状态/配送至服务")]),_._v(" "),v("p",[_._v("l  广告词服务")]),_._v(" "),v("p",[_._v("l  预售/秒杀服务")]),_._v(" "),v("p",[_._v("l  评价服务")]),_._v(" "),v("p",[_._v("l  试用服务")]),_._v(" "),v("p",[_._v("l  推荐服务")]),_._v(" "),v("p",[_._v("l  商品介绍服务")]),_._v(" "),v("p",[_._v("l  各品类相关的一些特殊服务")]),_._v(" "),v("p",[v("strong",[_._v("解决方案：")])]),_._v(" "),v("p",[_._v("\\1.   采用Ajax 动态加载 价格、广告、库存等服务")]),_._v(" "),v("p",[_._v("\\2.   采用key value 缓存详情页主体html。")]),_._v(" "),v("p",[_._v("方案架构：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/365147/1586936071255-41190fe1-dc72-4d3d-b8f0-815a1434694b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_13%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),_._v(" "),v("p",[v("strong",[_._v("问题：")])]),_._v(" "),v("p",[_._v("​    当达到500QPS 的时候很难继续压测上去。")]),_._v(" "),v("p",[v("strong",[_._v("分析原因")]),_._v("：一个详情页html 主体达平均150 kb 那么在500QPS 已接近千M局域网宽带极限。必须减少内网通信。")]),_._v(" "),v("p",[v("strong",[_._v("基于****Nginx")]),_._v(" "),v("strong",[_._v("静态缓存的解决方案：")])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/365147/1586936078727-9a201301-0fcf-43a7-94d6-5c70cb3861b5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_16%2Ctext_6bKB54-t5a2m6Zmi5Ye65ZOB%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"img"}})]),_._v(" "),v("p",[_._v("2.Nginx 静态缓存基本配置")]),_._v(" "),v("p",[_._v("一、在http元素下添加缓存区声明。")]),_._v(" "),v("p",[_._v("#proxy_cache_path 缓存路径")]),_._v(" "),v("p",[_._v("#levels 缓存层级及目录位数")]),_._v(" "),v("p",[_._v("#keys_zone 缓存区内存大小")]),_._v(" "),v("p",[_._v("#inactive 有效期")]),_._v(" "),v("p",[_._v("#max_size 硬盘大小")]),_._v(" "),v("p",[_._v("proxy_cache_path /data/nginx/cache_luban levels=1:2 keys_zone=cache_luban:500m inactive=20d max_size=1g;")]),_._v(" "),v("p",[_._v("二、为指定location 设定缓存策略。")]),_._v(" "),v("p",[_._v("# 指定缓存区")]),_._v(" "),v("p",[_._v("proxy_cache cache_luban;")]),_._v(" "),v("p",[_._v("#以全路径md5值做做为Key")]),_._v(" "),v("p",[_._v("proxy_cache_key $host$uri$is_args$args;")]),_._v(" "),v("p",[_._v("#对不同的HTTP状态码设置不同的缓存时间")]),_._v(" "),v("p",[_._v("proxy_cache_valid 200 304 12h;")]),_._v(" "),v("p",[v("strong",[_._v("演示缓存生效过程")])]),_._v(" "),v("p",[_._v("l 配置声明缓存路径")]),_._v(" "),v("p",[_._v("l 为location 配置缓存策略")]),_._v(" "),v("p",[_._v("l 重启nginx（修改了）")]),_._v(" "),v("p",[_._v("l 查看缓存目录生成")]),_._v(" "),v("p",[_._v("缓存参数详细说明")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("父元素")]),_._v(" "),v("th",[_._v("名称")]),_._v(" "),v("th",[_._v("描述")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("http")]),_._v(" "),v("td",[_._v("proxy_cache_path")]),_._v(" "),v("td",[_._v("指定缓存区的根路径")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[_._v("levels")]),_._v(" "),v("td",[_._v("缓存目录层级最高三层，每层1~2个字符表示。如1:1:2   表示三层。")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[_._v("keys_zone")]),_._v(" "),v("td",[_._v("缓存块名称 及内存块大小。如 cache_item:500m 。表示声明一个名为cache_item 大小为500m。超出大小后最早的数据将会被清除。")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[_._v("inactive")]),_._v(" "),v("td",[_._v("最长闲置时间 如:10d 如果一个数据被闲置10天将会被清除")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[_._v("max_size")]),_._v(" "),v("td",[_._v("缓存区硬盘最大值。超出闲置数据将会被清除")])]),_._v(" "),v("tr",[v("td",[_._v("location")]),_._v(" "),v("td",[_._v("proxy_cache")]),_._v(" "),v("td",[_._v("指定缓存区，对应keys_zone 中设置的值")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[_._v("proxy_cache_key")]),_._v(" "),v("td",[_._v("通过参数拼装缓存key 如：$host$uri$is_args$args   则会以全路径md5值做做为Key")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[_._v("proxy_cache_valid")]),_._v(" "),v("td",[_._v("为不同的状态码设置缓存有效期")])])])]),_._v(" "),v("p",[_._v("3.缓存的清除：")]),_._v(" "),v("p",[_._v("​    该功能可以采用第三方模块 ngx_cache_purge 实现。")]),_._v(" "),v("p",[v("strong",[_._v("为****nginx")]),_._v(" "),v("strong",[_._v("添加")]),_._v(" "),v("strong",[_._v("ngx_cache_purge")]),_._v(" "),v("strong",[_._v("模块")])]),_._v(" "),v("p",[_._v("#下载ngx_cache_purge 模块包 ,这里nginx 版本为1.6.2 purge 对应2.0版")]),_._v(" "),v("p",[_._v("wget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz")]),_._v(" "),v("p",[_._v("#查看已安装模块")]),_._v(" "),v("p",[_._v("./sbin/nginx -V")]),_._v(" "),v("p",[_._v("#进入nginx安装包目录 重新安装 --add-module为模块解压的全路径")]),_._v(" "),v("p",[_._v("./configure --prefix=/root/svr/nginx --with-http_stub_status_module --with-http_ssl_module  --add-module=/root/svr/packages/ngx_cache_purge-2.3")]),_._v(" "),v("p",[_._v("#重新编译")]),_._v(" "),v("p",[_._v("make")]),_._v(" "),v("p",[_._v("#拷贝 安装目录/objs/nginx 文件用于替换原nginx 文件")]),_._v(" "),v("p",[_._v("#检测查看安装是否成功")]),_._v(" "),v("p",[_._v("nginx -t")]),_._v(" "),v("p",[v("strong",[_._v("清除配置：")])]),_._v(" "),v("p",[_._v("location ~ /clear(/.*) {")]),_._v(" "),v("p",[_._v("#允许访问的IP")]),_._v(" "),v("p",[_._v("allow      127.0.0.1;")]),_._v(" "),v("p",[_._v("allow      192.168.0.193;")]),_._v(" "),v("p",[_._v("#禁止访问的IP")]),_._v(" "),v("p",[_._v("deny      all;")]),_._v(" "),v("p",[_._v("#配置清除指定缓存区和路径(与proxy_cache_key一至)")]),_._v(" "),v("p",[_._v("proxy_cache_purge  cache_luban $host$1$is_args$args;")]),_._v(" "),v("p",[_._v("}")]),_._v(" "),v("p",[_._v("配置好以后 直接访问 ：")]),_._v(" "),v("p",[_._v("# 访问生成缓存文件")]),_._v(" "),v("p",[_._v("http://www.luban.com/?a=1")]),_._v(" "),v("p",[_._v("# 清除生成的缓存,如果指定缓存不存在 则会报404 错误。")]),_._v(" "),v("p",[_._v("http://www.luban.com/clear/?a=1")]),_._v(" "),v("p",[_._v("三、Nginx 性能参数调优")]),_._v(" "),v("p",[v("strong",[_._v("worker_processes number;")])]),_._v(" "),v("p",[_._v("每个worker进程都是单线程的进程，它们会调用各个模块以实现多种多样的功能。如果这些模块确认不会出现阻塞式的调用，那么，有多少CPU内核就应该配置多少个进程；反之，如果有可能出现阻塞式调用，那么需要配置稍多一些的worker进程。例如，如果业务方面会致使用户请求大量读取本地磁盘上的静态资源文件，而且服务器上的内存较小，以至于大部分的请求访问静态资源文件时都必须读取磁盘（磁头的寻址是缓慢的），而不是内存中的磁盘缓存，那么磁盘I/O调用可能会阻塞住worker进程少量时间，进而导致服务整体性能下降。")]),_._v(" "),v("p",[v("strong",[_._v("每个****worker")]),_._v(" "),v("strong",[_._v("进程的最大连接数")])]),_._v(" "),v("p",[v("strong",[_._v("语法")]),_._v("：worker_connections number;")]),_._v(" "),v("p",[v("strong",[_._v("默认")]),_._v("：worker_connections 1024")]),_._v(" "),v("p",[v("strong",[_._v("worker_cpu_affinity cpumask[cpumask……]")])]),_._v(" "),v("p",[v("strong",[_._v("绑定"),v("strong",[v("strong",[_._v("Nginx worker")])]),_._v("进程到指定的"),v("strong",[v("strong",[_._v("CPU")])]),_._v("内核")])]),_._v(" "),v("p",[_._v("为什么要绑定worker进程到指定的CPU内核呢？假定每一个worker进程都是非常繁忙的，如果多个worker进程都在抢同一个CPU，那么这就会出现同步问题。反之，如果每一个worker进程都独享一个CPU，就在内核的调度策略上实现了完全的并发。")]),_._v(" "),v("p",[_._v("例如，如果有4颗CPU内核，就可以进行如下配置：")]),_._v(" "),v("p",[_._v("worker_processes 4;")]),_._v(" "),v("p",[_._v("worker_cpu_affinity 1000 0100 0010 0001;")]),_._v(" "),v("p",[_._v("注意 worker_cpu_affinity配置仅对Linux操作系统有效。")]),_._v(" "),v("p",[v("strong",[_._v("Nginx worker")]),_._v(" "),v("strong",[_._v("进程优先级设置")])]),_._v(" "),v("p",[v("strong",[_._v("语法")]),_._v("：worker_priority nice;")]),_._v(" "),v("p",[v("strong",[_._v("默认")]),_._v("：worker_priority 0;")]),_._v(" "),v("p",[_._v("优先级由静态优先级和内核根据进程执行情况所做的动态调整（目前只有±5的调整）共同决定。nice值是进程的静态优先级，它的取值范围是–20～+19，–20是最高优先级，+19是最低优先级。因此，如果用户希望Nginx占有更多的系统资源，那么可以把nice值配置得更小一些，但不建议比内核进程的nice值（通常为–5）还要小")]),_._v(" "),v("p",[v("strong",[_._v("Nginx worker****进程可以打开的最大句柄描述符个数")])]),_._v(" "),v("p",[v("strong",[_._v("语法")]),_._v("： worker_rlimit_nofile limit;")]),_._v(" "),v("p",[_._v("**默认：**空")]),_._v(" "),v("p",[_._v("更改worker进程的最大打开文件数限制。如果没设置的话，这个值为操作系统的限制。设置后你的操作系统和Nginx可以处理比“ulimit -a”更多的文件，所以把这个值设高，这样nginx就不会有“too many open files”问题了。")]),_._v(" "),v("p",[v("strong",[_._v("是否打开"),v("strong",[v("strong",[_._v("accept")])]),_._v("锁")])]),_._v(" "),v("p",[v("strong",[_._v("语法")]),_._v("：accept_mutex[on|off]")]),_._v(" "),v("p",[v("strong",[_._v("默认")]),_._v("：accept_mutext on;")]),_._v(" "),v("p",[_._v("accept_mutex是Nginx的负载均衡锁，当某一个worker进程建立的连接数量达到worker_connections配置的最大连接数的7/8时，会大大地减小该worker进程试图建立新TCP连接的机会，accept锁默认是打开的，如果关闭它，那么建立TCP连接的耗时会更短，但worker进程之间的负载会非常不均衡，因此不建议关闭它。")]),_._v(" "),v("p",[v("strong",[_._v("使用"),v("strong",[v("strong",[_._v("accept")])]),_._v("锁后到真正建立连接之间的延迟时间")])]),_._v(" "),v("p",[_._v("语法：accept_mutex_delay Nms;")]),_._v(" "),v("p",[_._v("默认：accept_mutex_delay 500ms;")]),_._v(" "),v("p",[_._v("在使用accept锁后，同一时间只有一个worker进程能够取到accept锁。这个accept锁不是堵塞锁，如果取不到会立刻返回。如果只有一个worker进程试图取锁而没有取到，他至少要等待accept_mutex_delay定义的时间才能再次试图取锁。")])])}),[],!1,null,null,null);v.default=r.exports}}]);